<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Objection使用学习笔记</title>
      <link href="/2021/08/13/Objection%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/13/Objection%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="Objection使用学习笔记"><a href="#Objection使用学习笔记" class="headerlink" title="Objection使用学习笔记"></a>Objection使用学习笔记</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -d -g com.tanwan.mobile.rxhjgwzy explore</span><br></pre></td></tr></table></figure><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -d -g com.tanwan.mobile.rxhjgwzy explore -P &#x27;C:\Users\Administrator\.objection\pluguns&#x27;</span><br></pre></td></tr></table></figure><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="内存堆搜索实例"><a href="#内存堆搜索实例" class="headerlink" title="* 内存堆搜索实例"></a>* 内存堆搜索实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap search instances com.tanwan.mobile.rxhjgwzy</span><br></pre></td></tr></table></figure><h3 id="实例ID-实例方法"><a href="#实例ID-实例方法" class="headerlink" title="* 实例ID 实例方法"></a>* 实例ID 实例方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap execute </span><br></pre></td></tr></table></figure><h3 id="查看当前可用的activity或者service"><a href="#查看当前可用的activity或者service" class="headerlink" title="* 查看当前可用的activity或者service"></a>* 查看当前可用的activity或者service</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities/services</span><br></pre></td></tr></table></figure><h3 id="直接启动activity或者服务"><a href="#直接启动activity或者服务" class="headerlink" title="* 直接启动activity或者服务"></a>* 直接启动activity或者服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure><h3 id="列出内存中所有的类"><a href="#列出内存中所有的类" class="headerlink" title="* 列出内存中所有的类"></a>* 列出内存中所有的类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><h3 id="在内存中所有已加载的类中搜索包含特定关键词的类"><a href="#在内存中所有已加载的类中搜索包含特定关键词的类" class="headerlink" title="* 在内存中所有已加载的类中搜索包含特定关键词的类"></a>* 在内存中所有已加载的类中搜索包含特定关键词的类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes display</span><br></pre></td></tr></table></figure><h3 id="生成-hook-的-js-代码"><a href="#生成-hook-的-js-代码" class="headerlink" title="* 生成 hook 的 js 代码"></a>* 生成 hook 的 js 代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking generate class javax.microedition.khronos.egl.EGLDisplay </span><br></pre></td></tr></table></figure><h3 id="在内存中所有已加载的类的方法中搜索包含特定关键词的方法"><a href="#在内存中所有已加载的类的方法中搜索包含特定关键词的方法" class="headerlink" title="* 在内存中所有已加载的类的方法中搜索包含特定关键词的方法"></a>* 在内存中所有已加载的类的方法中搜索包含特定关键词的方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search methods display</span><br></pre></td></tr></table></figure><h3 id="hook类的方法（hook类里的所有方法-具体某个方法）"><a href="#hook类的方法（hook类里的所有方法-具体某个方法）" class="headerlink" title="* hook类的方法（hook类里的所有方法/具体某个方法）"></a>* hook类的方法（hook类里的所有方法/具体某个方法）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class 类名</span><br></pre></td></tr></table></figure><h3 id="hook类函数-在上面的基础上，额外dump参数，栈回溯，返回值"><a href="#hook类函数-在上面的基础上，额外dump参数，栈回溯，返回值" class="headerlink" title="* hook类函数 - 在上面的基础上，额外dump参数，栈回溯，返回值"></a>* hook类函数 - 在上面的基础上，额外dump参数，栈回溯，返回值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class 类名</span><br><span class="line">android hooking watch class_method 类名 --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><h2 id="Wallbreaker插件用法"><a href="#Wallbreaker插件用法" class="headerlink" title="Wallbreaker插件用法"></a>Wallbreaker插件用法</h2><ul><li>插件加载<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugin load &#x27;C:\Users\Administrator\.objection\pluguns&#x27;</span><br><span class="line">//或者</span><br><span class="line">objection -d -g com.tanwan.mobile.rxhjgwzy explore -P &#x27;C:\Users\Administrator\.objection\pluguns&#x27;</span><br></pre></td></tr></table></figure></li><li>基本用法 Use wallbreaker command<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch java.util.HashMap</span><br><span class="line">plugin wallbreaker objectdump &lt;object-handle&gt;</span><br></pre></td></tr></table></figure></li><li><strong><strong>Search</strong></strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wallbreaker classsearch &lt;type-pattern&gt;</span><br><span class="line">[return all matched class]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wallbreaker objectsearch &lt;instance-class-name&gt;</span><br><span class="line">[return all matched object-handle and toString]</span><br></pre></td></tr></table></figure></li><li><strong><strong>Dump</strong></strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wallbreaker classdump &lt;class-name&gt; [--fullname]</span><br><span class="line">[</span><br><span class="line">   pretty print class structure: fields declare, static field value, methods declare.</span><br><span class="line">      set --fullname to display package name of type name.</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wallbreaker objectdump &lt;object-handle&gt; [--fullname] [--as-class class-name]</span><br><span class="line">[</span><br><span class="line">   pretty print object structure: fields declare and value, methods declare.</span><br><span class="line">      set --fullname to display package name of type name;</span><br><span class="line">      set --as-class to cast instance type(super class, not interface).</span><br><span class="line">   if instance is a collection or map, dump all entries.</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div><p>—&gt; <a href="https://www.runoob.com">Markdown 教程</a></p><ul><li>aaaaaa<ul><li>bbb</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> frida hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida学习笔记</title>
      <link href="/2021/08/13/frida%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/13/frida%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="Frida学习笔记"><a href="#Frida学习笔记" class="headerlink" title="Frida学习笔记"></a>Frida学习笔记</h1><ul><li><strong><a href="https://github.com/frida">官方地址</a></strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida -U -l okhttp_poker.js -f com.example.demo --no-pause 可追加 </span><br><span class="line">-o [output filepath]保存到文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.layabox.game.gsjh --no-pause -l _fcagent.js</span><br></pre></td></tr></table></figure><h2 id="手机中安装Frida服务端"><a href="#手机中安装Frida服务端" class="headerlink" title="手机中安装Frida服务端"></a>手机中安装Frida服务端</h2></li><li>下载<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ffrida%2Ffrida%2Freleases">frida-server</a></li><li>查看内核  uname -a 或者<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure>如果运行不了，关闭liunx的SELinux：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 0 &gt; /sys/fs/selinux/enforce</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2></li><li>端口映射<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">adb forward tcp:27043 tcp:27043</span><br></pre></td></tr></table></figure></li><li>查看<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U</span><br><span class="line">* 安装更新</span><br><span class="line">pip3 install -U frida</span><br><span class="line">pip3 install -U frida-tools</span><br></pre></td></tr></table></figure></li><li>基本模块 frida-trace，frida-ps，frida，frida-discover</li><li><p><strong>hook so</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import frida</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">jscode = &quot;&quot;&quot;</span><br><span class="line">Java.perform(function()&#123;</span><br><span class="line">    Interceptor.attach(Module.findExportByName(&quot;libfridaso.so&quot;,&quot;Java_com_example_fridasostring_fridaSoString_FridaSo&quot;),&#123;</span><br><span class="line">        onEnter: function(args) &#123;</span><br><span class="line">            send(&quot;Hook start&quot;);</span><br><span class="line">            send(&quot;args[2]=&quot; + args[2]);</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function(retval)&#123;</span><br><span class="line">            send(&quot;return:&quot;+retval);</span><br><span class="line">            var env = Java.vm.getEnv(); //获取env对象，也就是native函数的第一个参数</span><br><span class="line">            var jstrings = env.newStringUtf(&quot;tamper&quot;); //因为返回的是字符串指针，使用我们需要构造一个newStringUtf对象，用来代替这个指针</span><br><span class="line">            retval.replace(jstrings); //替换返回值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">def printMessage(message,data):</span><br><span class="line">    if message[&#x27;type&#x27;] == &#x27;send&#x27;:</span><br><span class="line">        print(&#x27;[*] &#123;0&#125;&#x27;.format(message[&#x27;payload&#x27;]))</span><br><span class="line">    else:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(&#x27;com.example.fridasostring&#x27;)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(&#x27;message&#x27;,printMessage)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure></li><li><p><strong>hook Java层</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import frida  #导入frida模块</span><br><span class="line">import sys    #导入sys模块</span><br><span class="line"></span><br><span class="line">jscode = &quot;&quot;&quot;  #从此处开始定义用来Hook的javascript代码</span><br><span class="line">    Java.perform(function()&#123;  </span><br><span class="line">        var MainActivity = Java.use(&#x27;com.example.testfrida.MainActivity&#x27;); //获得MainActivity类</span><br><span class="line">        MainActivity.testFrida.implementation = function()&#123; //Hook testFrida函数，用js自己实现</span><br><span class="line">            send(&#x27;Statr! Hook!&#x27;); //发送信息，用于回调python中的函数</span><br><span class="line">            return &#x27;Change String!&#x27; //劫持返回值，修改为我们想要返回的字符串</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def on_message(message,data): #js中执行send函数后要回调的函数</span><br><span class="line">    print(message)</span><br><span class="line">    </span><br><span class="line">process = frida.get_remote_device().attach(&#x27;com.example.testfrida&#x27;) #得到设备并劫持进程com.example.testfrida（该开始用get_usb_device函数用来获取设备，但是一直报错找不到设备，改用get_remote_device函数即可解决这个问题）</span><br><span class="line">script = process.create_script(jscode) #创建js脚本</span><br><span class="line">script.on(&#x27;message&#x27;,on_message) #加载回调函数，也就是js中执行send函数规定要执行的python函数</span><br><span class="line">script.load() #加载脚本</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure></li><li><p>frida环境配置<a href="https://www.52pojie.cn/thread-836277-1-1.html">查看</a></p></li><li>frida操作手册<a href="https://github.com/hookmaster/frida-all-in-one">查看</a></li><li>hook jni<a href="https://github.com/chame1eon/jnitrace">查看</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/07/27/README_CN/"/>
      <url>/2021/07/27/README_CN/</url>
      
        <content type="html"><![CDATA[<div align="right">  語言:  中文  <a title="English" href="/README.md">英文</a></div><h1 id="hexo-theme-butterfly"><a href="#hexo-theme-butterfly" class="headerlink" title="hexo-theme-butterfly"></a>hexo-theme-butterfly</h1><p><img src="https://img.shields.io/github/package-json/v/jerryc127/hexo-theme-butterfly/master?color=%231ab1ad&amp;label=master" alt="master version"><br><img src="https://img.shields.io/github/package-json/v/jerryc127/hexo-theme-butterfly/dev?label=dev" alt="master version"><br><img src="https://img.shields.io/npm/v/hexo-theme-butterfly?color=%09%23bf00ff" alt="https://img.shields.io/npm/v/hexo-theme-butterfly?color=%09%23bf00ff"><br><img src="https://img.shields.io/badge/hexo-5.0+-0e83c" alt="hexo version"><br><img src="https://img.shields.io/github/license/jerryc127/hexo-theme-butterfly?color=FF5531" alt="license"></p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/theme-butterfly-readme.png" alt=""></p><p>預覽: 👍 <a href="https://butterfly.js.org/">Butterfly</a>  ||  🤞 <a href="https://immyw.com/">MYW</a></p><p>文檔: 📖 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly Docs</a></p><p>一款基於<a href="https://github.com/Molunerfinn/hexo-theme-melody">hexo-theme-melody</a>修改的主題</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><h3 id="Git-安裝"><a href="#Git-安裝" class="headerlink" title="Git 安裝"></a>Git 安裝</h3><blockquote><p>本倉庫同時上傳到 <a href="https://gitee.com/iamjerryw/hexo-theme-butterfly">Gitee</a>，如果你訪問 Github 緩慢，可從 Gitee 中下載。</p></blockquote><p>在博客根目錄裡安裝穩定版【推薦】</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><p>如果想要安裝比較新的dev分支，可以</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> dev https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><h3 id="npm-安裝"><a href="#npm-安裝" class="headerlink" title="npm 安裝"></a>npm 安裝</h3><blockquote><p>此方法只支持Hexo 5.0.0以上版本</p></blockquote><p>在博客根目錄裡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="literal">-theme</span><span class="literal">-butterfly</span></span><br></pre></td></tr></table></figure><h2 id="應用主題"><a href="#應用主題" class="headerlink" title="應用主題"></a>應用主題</h2><p>修改hexo配置文件<code>_config.yml</code>，把主題改為<code>Butterfly</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><blockquote><p>如果你沒有pug以及stylus的渲染器，請下載安裝： npm install hexo-renderer-pug hexo-renderer-stylus —save</p></blockquote><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ul><li>[x] 卡片化設計</li><li>[X] 支持二級目錄</li><li>[x] 雙欄設計</li><li>[x] 響應式主題</li><li>[x] 夜間模式</li><li>[x] Pjax</li><li>[x] 文章閲讀模式</li><li>[x] 簡體和繁體轉換</li><li>[X] 電腦和手機都可查看TOC目錄</li><li>[X] 內置多種代碼配色（darker/pale night/light/ocean/mac/mac light），可自定義代碼配色</li><li>[X] 代碼塊顯示代碼語言/關閉或展開代碼塊/代碼複製/代碼自動換行</li><li>[X] 可關閉文字複製/可開啟內容複製增加版權信息）</li><li>[X] 兩種搜索（Algolia搜索和本地搜索）</li><li>[x] Mathjax 和 Katex</li><li>[x] 內置404頁面</li><li>[x] 顯示字數統計</li><li>[x] 顯示相關文章</li><li>[x] 過期文章提醒</li><li>[x] 多種分享系統（AddThis/Sharejs/Addtoany）</li><li>[X] 多種評論系統（Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo）</li><li>[x] 支持雙評論部署</li><li>[x] 多種在線聊天（Chatra/Tidio/Daovoice/Gitter/Crisp）</li><li>[x] 多種分析系統</li><li>[x] 谷歌廣告/手動廣告位置</li><li>[x] 各種站長驗證（Google/Bing/Baidu/360/Yandex）</li><li>[x] 修改網站配色</li><li>[x] 打字特效 activate_power_mode</li><li>[x] 多種背景特效（靜止彩帶/動態彩帶/Canvas Nest）</li><li>[x] 多種鼠標點擊特效（煙花/文字/愛心）</li><li>[x] 內置一種 Preloader 加載動畫</li><li>[x] 不蒜子訪問統計</li><li>[x] 兩種大圖模式（Medium Zoom/Fancybox）</li><li>[x] Mermaid 圖表顯示</li><li>[x] 照片牆</li><li>[x] 圖片懶加載</li><li>[x] Instantpage/Pangu/Snackbar彈窗/PWA……</li></ul><h2 id="截圖"><a href="#截圖" class="headerlink" title="截圖"></a>截圖</h2><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-1.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-2.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-3.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/butterfly-readme-screenshots-4.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-1.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/theme-butterfly-readme-homepage-2.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django Models 常用方法</title>
      <link href="/2021/07/26/Django_models/"/>
      <url>/2021/07/26/Django_models/</url>
      
        <content type="html"><![CDATA[<h1 id="Modles"><a href="#Modles" class="headerlink" title="Modles"></a>Modles</h1><ul><li>1  null   默认为False，True则表示可以为null。（空字符串在数据库中可能被存储为’’）</li><li>2  blank  默认为False，True表示可以为空。</li><li>3  choice  可选的，限制了该选项的字段值必须是所指定的choice中的一个。</li><li>4  db_column  数据库column名称。默认为本字段的名称。</li><li>5  db_index  如果为True的话，该字段的数据库索引将会被创建</li><li>6  default   设置该字段的默认值，可以是值也可以是对象。</li><li>7  editable   默认为True，若为False，则不会在admin/界面显示</li><li>8  primary_key  若设置为True，则表示将该字段设置为主键。一般情况下django默认会设置一个自增长的id主键。</li><li>9  unique   若设置为True，该字段值不可重复</li></ul><hr><ul><li>AutoField()[自增长]  根据已有id自增长的整形唯一字段</li><li>BooleanField()  布尔型字段</li><li>CharField() [变长] 字符型字段</li><li>DateTimeField() 日期和时间字段，值为datetime.datetime实例</li><li>DecimalField()  混合精度的小数型数字字段</li><li>EmailField(max_length=254, **options)  邮件字段</li><li>FileField(upload_to=None, max_length=100, **options)  文件上传字段</li><li>FloatField()  浮点字段</li><li>ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options) 图像字段</li><li>IntegerField  整形字段。</li><li>GenericIPAddressField(protocol=’both’, unpack_ipv4=False, **options)  ip地址字段<br>TextField()   与CharField类似，但一般用来存储体积较大的文本。</li><li>URLField(max_length=200, **options)    URL字段</li><li>TimeField(auto_now=False, auto_now_add=False, **options)   时间字段，其值为datetime.time实例</li></ul><hr><ul><li>1  ForeignKey(othermodel, on_delete, **options)  多对一或者一对多或者外键字段。</li><li>2  ManyToManyField(othermodel, **options)  多对多字段。</li><li>3  OneToOneField(othermodel, on_delete, parent_link=False, **options)  一对一字段。</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> python,Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuerySet常用方法</title>
      <link href="/2021/07/26/Django_QuerySet/"/>
      <url>/2021/07/26/Django_QuerySet/</url>
      
        <content type="html"><![CDATA[<h1 id="QuerySet常用方法"><a href="#QuerySet常用方法" class="headerlink" title="QuerySet常用方法"></a>QuerySet常用方法</h1><ul><li>使用 connection.queries 可以查看sql语句</li></ul><ul><li>filter 将满足条件的结果返回，返回值为QuerySet对象</li></ul><ul><li>exclude 将满足条件的结果过滤掉,返回值为QuerySet对象</li><li>annotate 给QuerySet中的每一个对象都添加一个查询表达式，（Q,F,聚合函数）的字段</li><li>order_by 安装某个字段进行排序，默认为从小到大排序，如果想要重大到小可以在字段前加“-”,需要注意</li><li>order_by可以传递多个参数，会按照先后级别进行排序，而且order_by还可以用annotate新增的字段来排序，注意：order_by重复调用会只会保存最后一个。</li><li>values:提取需要哪些字段，默认会把全部都提取出来。返回的结果是QuerySet，但是其中包裹的不是模型，而是字典，如果想要提取关联数据，那么可以通过F表达式来完成。values也可以使用聚合函数values_list 提取需要字段，返回QuerySet，其中包裹的元组，如果数据只有一条，则可以使用flat=True进行扁平化处理，直接返回结果</li><li>all 方法：返回全部数据（返回包裹对象的QuerySet）</li><li>select_related : 可以将关联的对象一起查询出来，只能用于外键连接的形式（一对多或者一对一的形式）</li><li>prefetch_related : 使用的时候传入反向引用的时候调用的名称默认为 filed_set，使用这个方式可以用来查询多对一或者多对多的方式，也可以用来查询一对一或者一对多的，但是不推荐。</li><li>defer : 过滤掉不需要的字段，返回值是一个包裹着模型的QuerySet</li><li>only : 提取某些字段，返回一个包裹模型的QuerySet</li><li>get : 直接返回对象，只能返回一条数据，如果返回数据超过一条就会报错，如果没有匹配到任何数据也会报错。</li><li>create : 用于增加一条数据，并且将数据保存在数据库中，相当于先创建数据，然后调用save方法</li><li>get_or_create : 如果给定的条件存在数据就查找返回，如果不存在就创建一个，然后在返回，返回结果是一个元组，元组中两个内容，第一个是模型对象，第二个是bool值，如果没有创建返回False，如果创建了返还True。</li><li>bulk_create ：可以一次性创建多条数据。</li><li>count ：获取满足条件的数据的个数</li><li>first,last 分别返回QuerySet中第一条和最后一条数据</li><li>exists ： 判断数据是否存在，存在返回True，不存在返回False</li><li>distinct : 去重，默认按照全部字段判断。注意如果和order_by同时使用会失效</li><li>update ：更新数据</li><li>delete : 删除数据，需要注意：字段中on_delete的级联删除方式</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python,Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django - ForeignKey 用法</title>
      <link href="/2021/07/26/Django_ForeignKey/"/>
      <url>/2021/07/26/Django_ForeignKey/</url>
      
        <content type="html"><![CDATA[<h1 id="ForeignKey"><a href="#ForeignKey" class="headerlink" title="ForeignKey"></a>ForeignKey</h1><h2 id="1-创建Model-测试"><a href="#1-创建Model-测试" class="headerlink" title="1.创建Model 测试"></a>1.创建Model 测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;User&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    author = models.ForeignKey(<span class="string">&#x27;User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">&#x27;Article&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-引入"><a href="#2-引入" class="headerlink" title="2.引入"></a>2.引入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Order_Session, db_wx_login,User,Article</span><br></pre></td></tr></table></figure><h2 id="3-外键的方式引用"><a href="#3-外键的方式引用" class="headerlink" title="3. 外键的方式引用"></a>3. 外键的方式引用</h2><p>  在django中，如果这个模型被其它模型使用外键的方式引用，那么django会自动给这个模型添加一个属性，这个属性的名字为：引用的模型名称小写形式_set 。上边Article模型引用了User模型，所以User模型会被django添加一个属性为：article_set，返回的也是一个QuerySet，也可使用all方法获取全部文章，或者使用first获取第一篇文章。</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(request.method)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建测试数据</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;user = User(username=&#x27;lxc&#x27;, password=&#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">    user.save()</span></span><br><span class="line"><span class="string">    article = Article(title=&#x27;测试标题&#x27;, content=&#x27;测试内容&#x27;)</span></span><br><span class="line"><span class="string">    article.author = user</span></span><br><span class="line"><span class="string">    article.save()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#pk代表primary key 大部分时候==id</span></span><br><span class="line">    <span class="comment">#先查询User表id=4的对象给author，在查author在Article的对象</span></span><br><span class="line">    abc = Article.objects.<span class="built_in">filter</span>(author=User.objects.get(<span class="built_in">id</span>=<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> abc:</span><br><span class="line">        <span class="comment">#&lt;class &#x27;django.db.models.query.QuerySet&#x27;&gt; == abc</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;abc: &#x27;</span>,item.title,item.content,item.author_id,<span class="built_in">type</span>(abc))</span><br><span class="line">    <span class="comment">#user = &lt;class &#x27;api.models.User&#x27;&gt;</span></span><br><span class="line">    user = User.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b1: &#x27;</span>,user.username,user.password,user.<span class="built_in">id</span>,<span class="built_in">type</span>(user))</span><br><span class="line">    b = user.article_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;b2: &#x27;</span>,item.title,item.content,item.author_id)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="built_in">all</span> = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;all: &#x27;</span>,item,item.title,item.content,item.author_id)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post_create It is not a POST request!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python,Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习知识Makedown基础</title>
      <link href="/2021/07/25/2021.07.24/"/>
      <url>/2021/07/25/2021.07.24/</url>
      
        <content type="html"><![CDATA[<p>学习知识Makedown基础</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h3><h4 id="一-目录"><a href="#一-目录" class="headerlink" title="一. 目录"></a>一. 目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h4 id="二-段落"><a href="#二-段落" class="headerlink" title="二. 段落"></a>二. 段落</h4><p>Markdown [段落]没有特殊的格式，直接<em>编写</em>文字就好，段落的换行是使用两个以上空格加上回车。<strong>回车</strong></p><h4 id="三-字体"><a href="#三-字体" class="headerlink" title="三. 字体"></a>三. 字体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><hr><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p><hr><h4 id="四-分隔线"><a href="#四-分隔线" class="headerlink" title="四. 分隔线"></a>四. 分隔线</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id=""><a href="#" class="headerlink" title="- - -"></a>- - -</h2><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h4 id="五-删除线"><a href="#五-删除线" class="headerlink" title="五. 删除线"></a>五. 删除线</h4><p>GOOGLE.COM<br><del>BAIDU.COM</del></p><h4 id="六-下划线"><a href="#六-下划线" class="headerlink" title="六. 下划线"></a>六. 下划线</h4><p><u>带下划线文本</u></p><hr><h4 id="七-脚注"><a href="#七-脚注" class="headerlink" title="七. 脚注"></a>七. 脚注</h4><p><sup><a href="#fn_要注明的文本" id="reffn_要注明的文本">要注明的文本</a></sup><br>创建脚注格式类似这样 <sup><a href="#fn_RUNOOB" id="reffn_RUNOOB">RUNOOB</a></sup>。<br><sup><a href="#fn_RUNOOB" id="reffn_RUNOOB">RUNOOB</a></sup>: 菜鸟教程 — 学的不仅是技术，更是梦想！！！</p><hr><h4 id="八-列表"><a href="#八-列表" class="headerlink" title="八. 列表"></a>八. 列表</h4><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><hr><h4 id="九-区块中使用列表"><a href="#九-区块中使用列表" class="headerlink" title="九. 区块中使用列表"></a>九. 区块中使用列表</h4><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h4 id="十-列表中使用区块"><a href="#十-列表中使用区块" class="headerlink" title="十. 列表中使用区块"></a>十. 列表中使用区块</h4><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h4 id="十一-区块-引用"><a href="#十一-区块-引用" class="headerlink" title="十一. 区块 引用"></a>十一. 区块 引用</h4><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h4 id="十二-代码"><a href="#十二-代码" class="headerlink" title="十二. 代码"></a>十二. 代码</h4><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），代码区块使用 4 个空格或者一个制表符（Tab 键）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="十三-链接"><a href="#十三-链接" class="headerlink" title="十三. 链接"></a>十三. 链接</h4><p><a href="链接地址">链接名称</a><br>或者<br>&lt;链接地址&gt;</p><p>这是一个链接 <a href="https://www.runoob.com">菜鸟教程</a></p><h5 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h5><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h4 id="十四-图片"><a href="#十四-图片" class="headerlink" title="十四. 图片"></a>十四. 图片</h4><p><img src="图片地址" alt="图片alt" title="&#39;图片title&#39;"></p><hr><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><hr><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><hr><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><hr><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><hr><p> 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。<br><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"></p><hr><h4 id="十四-表格"><a href="#十四-表格" class="headerlink" title="十四. 表格"></a>十四. 表格</h4><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div><p>|| <em>Year</em> || <em>Temperature (low)</em> || <em>Temperature (high)</em> ||<br>|| 1900 || -10 || 25 ||<br>|| 1910 || -15 || 30 ||<br>|| 1920 || -10 || 32 ||</p><hr><div class="table-container"><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table></div><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对齐方式</span><br><span class="line">我们可以设置表格的对齐方式：</span><br><span class="line">-: 设置内容和标题栏居右对齐。</span><br><span class="line">:- 设置内容和标题栏居左对齐。</span><br><span class="line">:-: 设置内容和标题栏居中对齐。</span><br></pre></td></tr></table></figure><h4 id="十五-高级功能"><a href="#十五-高级功能" class="headerlink" title="十五.高级功能"></a>十五.高级功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">支持的 HTML 元素</span><br><span class="line">不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</span><br><span class="line">目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如：</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><hr><h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><p><strong>文本加粗</strong><br>** 正常显示星号 **<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure></p><h5 id="十六-公式"><a href="#十六-公式" class="headerlink" title="十六.公式"></a>十六.公式</h5><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 十七. 其他</span><br><span class="line">More info: [Writing](https://hexo.io/docs/writing.html)</span><br><span class="line"></span><br><span class="line">### Run server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$ hexo server<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">More info: [Server](https://hexo.io/docs/server.html)</span><br><span class="line"></span><br><span class="line">### Generate static files</span><br><span class="line"></span><br><span class="line">``` python</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="MeiliDu"><a href="#MeiliDu" class="headerlink" title="MeiliDu"></a>MeiliDu</h1><p><a href="http://www.repostatus.org/#active"><img src="http://www.repostatus.org/badges/latest/active.svg" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed."></a></p><blockquote><p>a beautiful read</p></blockquote><p>A simple, text focused theme for Hexo. Bringing your readers attention to what is most import: your posts.<br>Check out the <a href="https://meilidu.github.io/">Demo</a></p><p><img src="gitHubAssets/showcase.png" alt="MeiliDu responsive showcase."></p><h1 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h1><p>:exclamation: Make sure your <strong>Node version is 6.x or above</strong> as the theme uses some ES6 syntax. :exclamation:</p><ol><li>Get the <a href="https://github.com/HoverBaum/meilidu-hexo/releases/latest">latest release</a>, simply download the file <strong>meilidu.zip</strong>. (see below for cloning)</li><li>Unpack it into your <strong>themes</strong> folder. (You should now have a folder in your themes folder named “meilidu” which should not contain a folder named “meilidu”)</li><li>Change your <strong>_config.yml</strong>: <code>theme: meilidu</code></li></ol><h3 id="Alternative-clone"><a href="#Alternative-clone" class="headerlink" title="Alternative: clone"></a>Alternative: clone</h3><p>You can also manage the theme as a subproject of your website. Simply run the following in the root directory of your project. After that change the theme property in your projects <code>_config.yml</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/HoverBaum/meilidu-hexo.git themes/meilidu</span><br></pre></td></tr></table></figure><h1 id="Get-help-and-involved"><a href="#Get-help-and-involved" class="headerlink" title="Get help and involved"></a>Get help and involved</h1><p>Below is a documentation of all features and how to use them as well as some <em>good to know</em> points. If you have any further questions or suggestions please open an issue.</p><p>The issues are open to anyone looking for help or wishing to make a suggestion to improve the theme.</p><h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><p>We have a few features you can configure and some that need to be enabled first. Check out the <a href="https://meilidu.github.io/">Demo</a> to see them all in action.</p><h3 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h3><p>Add an array of all widgets you want to display in the footer in MeiliDus <code>_config.yml</code>. These should be the names of files in the <code>layout/_widgets</code> folder. A widget should always be wrapped in an <em>footer__element</em>, like such:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer__element&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi there, <span class="tag">&lt;<span class="name">br</span> /&gt;</span>welcome to my Blog glad you found it. Have a look around, will you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h3><p>You can change the text of “read more” links by setting the <code>readMore</code> option in MeiliDus <code>_config.yml</code>.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">readMore:</span> <span class="string">...read</span> <span class="string">more</span></span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>You can set the link to you RSS feed in MeiliDus <code>_config.yml</code>.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><p>You also need to install the <a href="https://github.com/hexojs/hexo-generator-feed">feed generator</a> for this to work.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>Make sure to use the <code>--save</code> option and run this in the root folder of your repository as it won’t work otherwise.</p><h3 id="Tags-page"><a href="#Tags-page" class="headerlink" title="Tags page"></a>Tags page</h3><p>To activate the tags page create a <code>source/tags/index.md</code> with the following content.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &quot;Tags&quot;</span><br><span class="line"><span class="section">layout: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="Categories-page"><a href="#Categories-page" class="headerlink" title="Categories page"></a>Categories page</h3><p>Activating the categories page is similar to tags, create a <code>source/categories/index.md</code> with the following content.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &quot;Categories&quot;</span><br><span class="line"><span class="section">layout: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="About-page"><a href="#About-page" class="headerlink" title="About page"></a>About page</h3><p>Like any other page create a folder with the name of the page and an <code>index.md</code> file in it to have an about page. The most basic about page in <code>source/about/index.md</code> might look like this.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: About</span><br><span class="line"><span class="section">layout: page</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">This is a page about pages. It is the mother of all pages and pageception.</span><br></pre></td></tr></table></figure><h3 id="Archives"><a href="#Archives" class="headerlink" title="Archives"></a>Archives</h3><p>If you archive is only showing the current years posts try adding the following yml to your sites <code>_config.yml</code> (not the one in meilidus folder).</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>It can have any size really. It will always fill half of the screens height when the user first arrives on the page. Simply replace <code>meilidu/source/img/header.jpg</code> with your own file.</p><p>The default header is from <a href="https://unsplash.com/search/landscape%20mountain?photo=Ni4NgA64TFQ">unspalsh</a>, a picture by <a href="https://unsplash.com/@albertorestifo">Alberto Restifo</a>.</p><h3 id="Top-menu"><a href="#Top-menu" class="headerlink" title="Top menu"></a>Top menu</h3><p>To customize the menu at the top of the page simply change MeiliDus <code>_config.yml</code> and add your links to the <code>menu</code> object. Remove everything from it to hide the top menu.</p><h1 id="Good-to-know"><a href="#Good-to-know" class="headerlink" title="Good to know"></a>Good to know</h1><h4 id="Absolute-URLs"><a href="#Absolute-URLs" class="headerlink" title="Absolute URLs"></a>Absolute URLs</h4><p>Hexo itself and the MeiliDu theme use a lot of absolute URLs (those starting with <code>/something</code>). Due to this you can only run your blog on a domain or subdomain but not as something like <code>domain.com/blog/</code>. To run a blog on GitHub check out <a href="https://help.github.com/articles/user-organization-and-project-pages/">User pages</a> in the GitHub documentation.</p><h4 id="Using-GitHub-to-host"><a href="#Using-GitHub-to-host" class="headerlink" title="Using GitHub to host"></a>Using GitHub to host</h4><p>You can host websites for free on GitHub. The <a href="https://meilidu.github.io/">Demo for MeiliDu</a> is a great example of this. I use <a href="https://travis-ci.org/">Travis</a> to automate the generation of static files whenever we push to the master branch. Check out this <a href="https://gist.github.com/HoverBaum/d11361337d2c59f0de591c9c9390c1a9">travis config file</a>, it comes with explanation on how to use it. Personally I found it easiest to have a repo that contains the blog (this one) and one that is only there to get the page going. Travis then gets the current version, generates all files and pushes to the website repo.</p><h4 id="Why-an-Apple-showcase"><a href="#Why-an-Apple-showcase" class="headerlink" title="Why an Apple showcase???"></a>Why an Apple showcase???</h4><p>Because two minutes of googleing found this <a href="http://www.pixeden.com/psd-web-elements/modern-psd-responsive-showcase">PSD showcase</a> so that is what I went with.</p><h1 id="Blogs-using-MeiliDu"><a href="#Blogs-using-MeiliDu" class="headerlink" title="Blogs using MeiliDu"></a>Blogs using MeiliDu</h1><p>You are using MeiliDu for your blog? That is awesome! Let us know about it with a pull request and be featured here as an example for people to see how MeiliDu looks in the wild.</p><ul><li><a href="http://hoverbaum.gitlab.io/">HoverBaum</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Makedown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/2020/02/12/index/"/>
      <url>/2020/02/12/index/</url>
      
        <content type="html"><![CDATA[<!-- https://www.bootcdn.cn/botui/ --><p><link href="https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css" rel="stylesheet"></p><link href="https://cdn.bootcss.com/botui/0.3.9/botui.min.css" rel="stylesheet"><!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 --><div class="entry-content">  <div class="moe-mashiro" style="text-align:center; font-size: 50px; margin-bottom: 20px;">[崖墓の小屋]</div>  <div id="hello-mashiro" class="popcontainer" style="min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;">    <center>    <p>    </p>    <h4>    与&nbsp;<ruby>    cungudafa&nbsp;<rp>    （</rp>    <rt>    真（ま）白（しろ）</rt>    <rp>    ）</rp>    </ruby>    对话中...</h4>    <p>    </p>    </center>    <bot-ui></botui>  </div></div><!--<script src="https://cungudafa.gitee.io/js/botui.js></script>--><script src="/js/third-party/botui.js"></script><script>bot_ui_ini()</script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
