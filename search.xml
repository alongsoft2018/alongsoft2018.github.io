<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>E项目编译记录</title>
      <link href="/2022/07/26/E%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/07/26/E%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="编译记录"><a href="#编译记录" class="headerlink" title="编译记录"></a>编译记录</h1><h2 id="安装必要的库"><a href="#安装必要的库" class="headerlink" title="安装必要的库"></a>安装必要的库</h2><ul><li>cJSON<blockquote><ul><li>安装</li></ul></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/DaveGamble/cJSON.git</span><br><span class="line"><span class="built_in">cd</span> cJSON</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># cd .. 回到上级目录</span></span><br><span class="line">make</span><br><span class="line">sudo make install <span class="comment"># 要加sudo 否则  Permission denied</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># mkdir -p /usr/local/lib /usr/local/include/cjson</span></span><br><span class="line"><span class="comment"># cp -a cJSON.h /usr/local/include/cjson</span></span><br><span class="line"><span class="comment"># cp -a libcjson.so libcjson.so.1 libcjson.so.1.7.15 /usr/local/lib</span></span><br><span class="line"><span class="comment"># cp -a cJSON_Utils.h /usr/local/include/cjson</span></span><br><span class="line"><span class="comment"># cp -a libcjson_utils.so libcjson_utils.so.1 libcjson_utils.so.1.7.15 /usr/local/lib</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><blockquote><p>安装mosquitto</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa</span><br><span class="line"><span class="comment">#--------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># More info: https://launchpad.net/~mosquitto-dev/+archive/ubuntu/mosquitto-ppa</span></span><br><span class="line"><span class="comment"># Press [ENTER] to continue or Ctrl-c to cancel adding it.</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------------</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mosquitto -y</span><br><span class="line">sudo apt-get install mosquitto-clients -y</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/tmp/cc7DP8ZD.o: In <span class="keyword">function</span> `parse_number<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">cJSON.c:(.text+0x48f): undefined reference to `pow&#x27;</span></span><br><span class="line">/tmp/cc7DP8ZD.o: In <span class="keyword">function</span> `print_number<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">cJSON.c:(.text+0x5b4): undefined reference to `floor&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>解决办法</code>：在编译语句后加 <code>-lm</code>，原因是在Unix，一些数学计算并不属于Unix的标准库</p></blockquote><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(CC)</span> -g -o <span class="variable">$@</span> <span class="variable">$^</span>  <span class="variable">$(LDFLAGS)</span> <span class="variable">$(CFLAGS)</span>  -lm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> make </tag>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux信息查询指令汇总</title>
      <link href="/2022/07/23/Linux%20%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
      <url>/2022/07/23/Linux%20%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<!-- https://www.bootcdn.cn/botui/ --><p><link href="https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css" rel="stylesheet"></p><link href="https://cdn.bootcss.com/botui/0.3.9/botui.min.css" rel="stylesheet"><!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 --><div class="entry-content">  <div class="moe-mashiro" style="text-align:center; font-size: 50px; margin-bottom: 20px;">Linux信息查询指令汇总</div>  <div id="hello-mashiro" class="popcontainer" style="min-height: 20px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;">    <center>    <p>    </p>    <h4>    - &nbsp;<ruby>    NPCS&nbsp;<rp>    （</rp>    <rt>    2022-07-23 23:46</rt>    <rp>    ）</rp>    </ruby>    WIN - </h4>    <p>    </p>    </center>    <bot-ui></botui>  </div></div><!--<script src="https://cungudafa.gitee.io/js/botui.js></script>--><script src="/js/third-party/botui.js"></script><script>bot_ui_ini()</script><h2 id="Linux-信息查询指令"><a href="#Linux-信息查询指令" class="headerlink" title="Linux 信息查询指令"></a>Linux 信息查询指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo - CPU (i.e. vendor, Mhz, flags like mmx)</span><br><span class="line"></span><br><span class="line">　　cat /proc/interrupts - 中断</span><br><span class="line"></span><br><span class="line">　　cat /proc/ioports - 设备IO端口</span><br><span class="line"></span><br><span class="line">　　cat /proc/meminfo - 内存信息(i.e. mem used, free, swap size)</span><br><span class="line"></span><br><span class="line">　　cat /proc/partitions - 所有设备的所有分区</span><br><span class="line"></span><br><span class="line">　　cat /proc/pci - PCI设备的信息</span><br><span class="line"></span><br><span class="line">　　cat /proc/swaps - 所有Swap分区的信息</span><br><span class="line"></span><br><span class="line">　　cat /proc/version - Linux的版本号 相当于 uname -r</span><br><span class="line"></span><br><span class="line">　　uname -a - 看系统内核等信息</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>Linux系统版本信息</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure>PRINT INFO<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ubuntu 22.04 LTS \n \l</span><br></pre></td></tr></table></figure></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><blockquote><p>PRINT INFO<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 22.04 LTS</span><br><span class="line">Release:        22.04</span><br><span class="line">Codename:       jammy</span><br></pre></td></tr></table></figure></p><p>内存大小<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/meminfo |grep MemTotal</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># head -n 1 /etc/issue  # 查看操作系统版本 </span><br><span class="line"># cat /proc/cpuinfo # 查看CPU信息 </span><br><span class="line"># hostname # 查看计算机名 </span><br><span class="line"># lspci -tv # 列出所有PCI设备 </span><br><span class="line"># lsusb -tv # 列出所有USB设备 </span><br><span class="line"># lsmod # 列出加载的内核模块 </span><br><span class="line"># env # 查看环境变量资源 </span><br><span class="line"># free -m # 查看内存使用量和交换区使用量 </span><br><span class="line"># df -h # 查看各分区使用情况 </span><br><span class="line"># du -sh &lt;目录名&gt; # 查看指定目录的大小 </span><br><span class="line"># grep MemTotal /proc/meminfo # 查看内存总量 </span><br><span class="line"># grep MemFree /proc/meminfo # 查看空闲内存量 </span><br><span class="line"># uptime # 查看系统运行时间、用户数、负载 </span><br><span class="line"># cat /proc/loadavg # 查看系统负载磁盘和分区 </span><br><span class="line"># mount | column -t # 查看挂接的分区状态 </span><br><span class="line"># fdisk -l # 查看所有分区 </span><br><span class="line"># swapon -s # 查看所有交换分区 </span><br><span class="line"># hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) </span><br><span class="line"># dmesg | grep IDE # 查看启动时IDE设备检测状况网络 </span><br><span class="line"># ifconfig # 查看所有网络接口的属性 </span><br><span class="line"># iptables -L # 查看防火墙设置 </span><br><span class="line"># route -n # 查看路由表 </span><br><span class="line"># netstat -lntp # 查看所有监听端口 </span><br><span class="line"># netstat -antp # 查看所有已经建立的连接 </span><br><span class="line"># netstat -s # 查看网络统计信息进程 </span><br><span class="line"># ps -ef # 查看所有进程 </span><br><span class="line"># top # 实时显示进程状态用户 </span><br><span class="line"># w # 查看活动用户 </span><br><span class="line"># id &lt;用户名&gt; # 查看指定用户信息 </span><br><span class="line"># last # 查看用户登录日志 </span><br><span class="line"># cut -d: -f1 /etc/passwd # 查看系统所有用户 </span><br><span class="line"># cut -d: -f1 /etc/group # 查看系统所有组 </span><br><span class="line"># crontab -l # 查看当前用户的计划任务服务 </span><br><span class="line"># chkconfig –list # 列出所有系统服务 </span><br><span class="line"># chkconfig –list | grep on # 列出所有启动的系统服务程序 </span><br><span class="line"># rpm -qa # 查看所有安装的软件包</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python -c 记录</title>
      <link href="/2022/07/21/python%20-c%20%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/07/21/python%20-c%20%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<!-- https://www.bootcdn.cn/botui/ --><p><link href="https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css" rel="stylesheet"></p><link href="https://cdn.bootcss.com/botui/0.3.9/botui.min.css" rel="stylesheet"><!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 --><div class="entry-content">  <div class="moe-mashiro" style="text-align:center; font-size: 50px; margin-bottom: 20px;">[崖墓の小屋]</div>  <div id="hello-mashiro" class="popcontainer" style="min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;">    <center>    <p>    </p>    <h4>    与&nbsp;<ruby>    cungudafa&nbsp;<rp>    （</rp>    <rt>    真（ま）白（しろ）</rt>    <rp>    ）</rp>    </ruby>    对话中...</h4>    <p>    </p>    </center>    <bot-ui></botui>  </div></div><!--<script src="https://cungudafa.gitee.io/js/botui.js></script>--><script src="/js/third-party/botui.js"></script><script>bot_ui_ini()</script><h1 id="python-c-妙用"><a href="#python-c-妙用" class="headerlink" title="python -c 妙用"></a>python -c 妙用</h1><p> python <strong>-c</strong> 参数，支持执行单行命令/脚本。</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; python -c &quot;import os;print(&#x27;hello&#x27;),print(&#x27;world&#x27;)&quot;</span><br><span class="line">&gt; python -c &quot;import os;print(&#x27;hello&#x27;);print(&#x27;world&#x27;)&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 注意：要用双引号将命令包起来，import要以 <code>;</code>  结尾，命令用<code>[]</code>括起来，多行命令用多个<code>[]</code></p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &gt; python -c &quot;import os,time;[print(i) for i in os.listdir()];[print(time.time())]&quot;</span><br><span class="line">&gt; python -c &quot;import os,time;[print(i) for i in os.listdir()],[print(time.time())]&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂的命令必须要用<code>[]</code>括起来，否则会报错。以下输出一样<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; python -c &quot;print(&#x27;hello&#x27;);print(&#x27;world&#x27;)&quot;</span><br><span class="line">&gt; python -c &quot;print(&#x27;hello&#x27;),print(&#x27;world&#x27;)&quot;</span><br><span class="line">&gt; python -c &quot;[print(&#x27;hello&#x27;),print(&#x27;world&#x27;)]&quot;</span><br><span class="line">&gt; python -c &quot;[print(&#x27;hello&#x27;)],[print(&#x27;world&#x27;)]&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android刷机记录</title>
      <link href="/2022/07/18/Android%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/07/18/Android%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<!-- https://www.bootcdn.cn/botui/ --><p><link href="[https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css" rel="stylesheet](https://img0.baidu.com/it/u=2872737658,1111775120&fm=253&fmt=auto&app=138&f=JPEG?w=750&h=500)"></p><link href="[https://cdn.bootcss.com/botui/0.3.9/botui.min.css" rel="stylesheet](https://img0.baidu.com/it/u=3673496673,1581001283&fm=253&fmt=auto&app=120&f=JPEG?w=1000&h=600)"><!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 --><div class="entry-content">  <div class="moe-mashiro" style="text-align:center; font-size: 50px; margin-bottom: 20px;">[崖墓の小屋]</div>  <div id="hello-mashiro" class="popcontainer" style="min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;">    <center>    <p>    </p>    <h4>    与&nbsp;<ruby>    cungudafa&nbsp;<rp>    （</rp>    <rt>    真（ま）白（しろ）</rt>    <rp>    ）</rp>    </ruby>    对话中...</h4>    <p>    </p>    </center>    <bot-ui></botui>  </div></div><!--<script src="https://cungudafa.gitee.io/js/botui.js></script>--><script src="/js/third-party/botui.js"></script><script>bot_ui_ini()</script><h1 id="Android刷机记录"><a href="#Android刷机记录" class="headerlink" title="Android刷机记录"></a>Android刷机记录</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><pre><code>因研究android下串口通信反复测试几个app始终无法正常通行，怀疑是因为手机没有root导致的，于是尝试root老1+3T手机，尝试了几款root工具都以失败告终。开始尝试直接按照Magisk。</code></pre><h2 id="Magisk记录。"><a href="#Magisk记录。" class="headerlink" title="Magisk记录。"></a>Magisk记录。</h2><h3 id="1、安装MT管理器"><a href="#1、安装MT管理器" class="headerlink" title="1、安装MT管理器"></a>1、安装<code>MT管理器</code></h3><blockquote><ul><li>MT是真强大，可以直接开一个ftp远程服务，通过windows直接访问，非常方便上传、下载。 </li><li>流程总结： 下载官方完整包，用mt提取压缩包里面的boot.img ,如果没有找到boot.img 只有payload.bin <a href="https://magiskcn.com/payload-boot">参考这里</a><br>-打开Magisk【安装 – 选择并修补一个文件 – 弹窗文件管理窗口（找到刚刚提取的boot.img）- 开始】<br><img src="https://cdn.magiskcn.com/wp-content/uploads/2021/11/eafbece1016a6af-3-1536x666.jpg" alt="image"></li><li>修补结束，会生成一个名字为（magisk<em>patched-版本号</em>随机字符.img）的文件（每次生成的随机字符都不一样，使用的时候请输入生成的名字）</li><li>手机连接到电脑，把boot.img和（magisk_patched-2X000_xxxxx.img）两个文件复制到电脑</li><li>使用fastboot 刷入<br><img src="https://cdn.magiskcn.com/wp-content/uploads/2022/05/2fb150dbd06b30a-e1652966025759.png" alt="刷入"></li><li>重启正常会进入系统查看Magisk是否正确安装.<br><img src="https://cdn.magiskcn.com/wp-content/uploads/2021/11/eafbece1016a6af-4.jpg" alt=""></li></ul></blockquote><h2 id="变砖"><a href="#变砖" class="headerlink" title="变砖"></a>变砖</h2><pre><code>因为系统与下载的ROM不一致二刷了不匹配的boot.img,导致系统挂掉。</code></pre><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><pre><code>尝试了本机卡刷和线刷，折腾半天都失败，怀疑recovery太老了，最后下载了twrp-3.3.0-1-oneplus3这个老版本的。可以正常刷入，最后解决问题。</code></pre><h2 id="fastboot记录"><a href="#fastboot记录" class="headerlink" title="fastboot记录"></a>fastboot记录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader                            -- 进入fastboot模式</span><br><span class="line">fastboot devices                                 -- 查看设备是否连上</span><br><span class="line">astboot命令:</span><br><span class="line">加载驱动:fastboot devices   //加载fastboot驱动</span><br><span class="line">擦除:fastboot erase xxxx    //假如我要擦除RECOVERY 就是:fastboot erase recovery</span><br><span class="line">刷BOOT:fastboot flash boot boot.img</span><br><span class="line">临时刷recovery:fastboot boot recovery.img</span><br><span class="line"></span><br><span class="line">刷system：fastboot flash system system.img</span><br><span class="line">刷系统：fastboot flash userdata userdata.Img</span><br><span class="line">刷系统：fastboot flash recovery recovery.img</span><br><span class="line">刷SPL：fastboot flash hboot hboot.img</span><br><span class="line">刷RADIO：fastboot flash radio radio.img</span><br><span class="line">重启：fastboot reboot</span><br><span class="line"></span><br><span class="line">推送文件到系统文件夹：adb push Mms.apk /system/app</span><br><span class="line"></span><br><span class="line">system:系统分区.</span><br><span class="line">userdata:数据分区.</span><br><span class="line">cache:缓存分区</span><br><span class="line">recovery:Recovery分区.</span><br><span class="line">boot:存放内核和ramdisk的分区。</span><br><span class="line">hboot:这个是SPL所在的分区.很重要哦.也是fastboot所在的分区.刷错就真的变砖了.</span><br><span class="line">splash1:这个就是开机第一屏幕了.</span><br><span class="line">radio:这个是radio所在的分区；</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fastboot -s devices partition file</p><p>命令使用：烧录file文件到指定设备devices的分区partition上</p><p>例如：fastboot -s devices flash system system.bin</p><p>如果只有一台设备则可不需要指定设备</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">fastboot flash aboot aboot.bin</span><br><span class="line"></span><br><span class="line">fastboot flash boot boot.bin</span><br><span class="line"></span><br><span class="line">fastboot flash system system.bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot continue</span><br></pre></td></tr></table></figure><p>命令使用：退出fastboot模式，继续启动系统<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><br>命令使用：重启系统<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot erase partition</span><br></pre></td></tr></table></figure></p><h2 id="ROOT"><a href="#ROOT" class="headerlink" title="ROOT"></a>ROOT</h2><ul><li>Kingo ROOT 不错</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vcpkg包管理工具</title>
      <link href="/2022/07/14/Vcpkg%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/07/14/Vcpkg%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<!-- https://www.bootcdn.cn/botui/ --><p><link href="https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css" rel="stylesheet"></p><link href="https://cdn.bootcss.com/botui/0.3.9/botui.min.css" rel="stylesheet"><!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 --><div class="entry-content">  <div class="moe-mashiro" style="text-align:center; font-size: 50px; margin-bottom: 20px;">Vcpkg  C++包管理工具</div>  <div id="hello-mashiro" class="popcontainer" style="min-height: 20px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;">    <center>    <p>    </p>    <h4>    - &nbsp;<ruby>    NPCS&nbsp;<rp>    （</rp>    <rt>    2022-07-23 23:46</rt>    <rp>    ）</rp>    </ruby>    WIN - </h4>    <p>    </p>    </center>    <bot-ui></botui>  </div></div><!--<script src="https://cungudafa.gitee.io/js/botui.js></script>--><script src="/js/third-party/botui.js"></script><script>bot_ui_ini()<p>&lt;/script&gt;</p><h2 id="Table-Of-Contents"><a href="#Table-Of-Contents" class="headerlink" title="Table Of Contents"></a>Table Of Contents</h2><ul><li><a href="#vcpkgc包管理工具">Vcpkg——C++包管理工具</a><ul><li><a href="#安装">安装</a></li><li><a href="#搜索可用库">搜索可用库</a></li><li><a href="#安装三方库">安装三方库</a></li><li><a href="#查看已安装的三方库">查看已安装的三方库</a></li><li><a href="#已安装的包更新">已安装的包更新</a></li><li><a href="#除已安装的包">除已安装的包</a></li><li><a href="#集成至visual-studio中windows">集成至Visual Studio中(Windows)</a></li><li><a href="#生成配置">生成配置</a></li><li><a href="#-为每一个用户设置">### 为每一个用户设置</a></li><li><a href="#-为当前项目配置这里需要在该项目的目录下拥有一份vcpkg的拷贝">### 为当前项目配置，这里需要在该项目的目录下拥有一份vcpkg的拷贝</a><ul><li><a href="#基本配置">基本配置</a></li><li><a href="#工程配置">工程配置</a></li></ul></li><li><a href="#集成静态库">集成静态库</a></li><li><a href="#使用vcpkg时的注意点">使用Vcpkg时的注意点</a></li><li><a href="#安装-linux-developer-tools">安装 Linux Developer Tools</a></li><li><a href="#安装-macos-developer-tools">安装 macOS Developer Tools</a></li><li><a href="#visual-studio-code-中的-cmake-tools">Visual Studio Code 中的 CMake Tools</a><ul><li><a href="#visual-studio-cmake-工程中使用-vcpkg">Visual Studio CMake 工程中使用 vcpkg</a></li></ul></li><li><a href="#将-vcpkg-作为一个子模块">将 vcpkg 作为一个子模块</a></li><li><a href="#tab补全自动补全">Tab补全/自动补全</a></li></ul></li></ul><h1 id="Vcpkg——C-包管理工具"><a href="#Vcpkg——C-包管理工具" class="headerlink" title="Vcpkg——C++包管理工具"></a>Vcpkg——C++包管理工具</h1><blockquote><p>在Windows下开发C++程序时，常用依赖包的管理是一个头疼的问题。<strong>Vcpkg</strong>是一个命令行包管理工具，它可以极大地简化三方库的获取、安装、使用和部署流程。Vcpkg是微软团队在GitHub上的一个开源项目，它提供一系列简单的命令，自动下载源码然后编译成三方库，而且[并不依赖于Windows注册表或Visual Studio]。<code>Vcpkg</code>允许多份克隆同时存在于同一台机器上，每一份克隆都是一个完整独立的环境，拥有独立的三方库和编译选项。</p><p><a href="https://blogs.msdn.microsoft.com/vcblog/2016/09/19/vcpkg-a-tool-to-acquire-and-build-c-open-source-libraries-on-windows/">“MSDN介绍”</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Microsoft/vcpkg.git</span><br><span class="line">cd vcpkg</span><br><span class="line">bootstrap-vcpkg.bat</span><br></pre></td></tr></table></figure><blockquote><ul><li>设置环境变量——将vcpkg.exe文件所在目录加入到环境变量PATH中</li></ul></blockquote><h2 id="搜索可用库"><a href="#搜索可用库" class="headerlink" title="搜索可用库"></a>搜索可用库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcpkg search</span><br></pre></td></tr></table></figure><blockquote><p>这条命令会列举vcpkg/ports子文件夹中的控制文件。搜索的结果如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ce       6.4.3   The ADAPTIVE Communication Environment</span><br><span class="line">anax      2.1.0-1 An open source C++ entity system. \&lt;https://github...</span><br><span class="line">antlr4    4.6-1   ANother Tool for Language Recognition</span><br><span class="line">apr       1.5.2   The Apache Portable Runtime (APR) is a C library ...</span><br><span class="line">asio      1.10.8  Asio is a cross-platform C++ library for network ...</span><br><span class="line">assimp    3.3.1   The Open Asset import library</span><br><span class="line">atk       2.24.0  GNOME Accessibility Toolkit</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以加入一些过滤，如vcpkg search ta：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">botan       2.0.1      A cryptography library written in C++11</span><br><span class="line">portaudio   19.0.6.00  PortAudio Portable Cross-platform Audio I/O API P...</span><br><span class="line">taglib      1.11.1-2   TagLib Audio Meta-Data Library</span><br></pre></td></tr></table></figure></p><h2 id="安装三方库"><a href="#安装三方库" class="headerlink" title="安装三方库"></a>安装三方库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcpkg install</span><br></pre></td></tr></table></figure><blockquote><p>vcpkg install boost:x86-windows<br>请注意: vcpkg在Windows中默认编译并安装x86版本的库。 若要编译并安装x64版本，请执行:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg\vcpkg install [package name]:x64-windows</span><br><span class="line">#或者</span><br><span class="line">&gt; .\vcpkg\vcpkg install [packages to install] --triplet=x64-windows</span><br></pre></td></tr></table></figure><h2 id="查看已安装的三方库"><a href="#查看已安装的三方库" class="headerlink" title="查看已安装的三方库"></a>查看已安装的三方库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcpkg list</span><br></pre></td></tr></table></figure><h2 id="已安装的包更新"><a href="#已安装的包更新" class="headerlink" title="已安装的包更新"></a>已安装的包更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcpkg upgrade</span><br></pre></td></tr></table></figure><h2 id="除已安装的包"><a href="#除已安装的包" class="headerlink" title="除已安装的包"></a>除已安装的包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcpkg remove curl:x64-windows</span><br></pre></td></tr></table></figure><h2 id="集成至Visual-Studio中-Windows"><a href="#集成至Visual-Studio中-Windows" class="headerlink" title="集成至Visual Studio中(Windows)"></a>集成至Visual Studio中(Windows)</h2><blockquote><p>与手动指定目录不同，我们可以通过一条命令将所有三方库的头文件和二进制文件自动配置到Visual Studio中。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (可能需要管理员权限)</span></span><br><span class="line">vcpkg integrate install</span><br></pre></td></tr></table></figure><p>配置完成后，在VS项目中便可以直接#include三方库目录/头文件，而库的引用和链接会自动完成</p><blockquote><p>在IDE以外在cmake中使用vcpkg，您需要使用以下工具链文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; cmake -B [build directory] -S . &quot;-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake&quot;</span><br><span class="line">&gt; cmake --build [build directory]</span><br></pre></td></tr></table></figure></p></blockquote><p>对于CMAKE项目来说，如果要通过find_package()使用安装后的三方库，必须要制定环境变量CMAKE_TOOLCHAIN_FILE。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake .. -DCMAKE_TOOLCHAIN_FILE=D:/library/vcpkg/scripts/buildsystems/vcpkg.cmake </span><br><span class="line">cmake .. &quot;-DCMAKE_TOOLCHAIN_FILE=C:/Users/Administrator/vcpkg/scripts/buildsystems/vcpkg.cmake&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcpkg integrate project</span><br></pre></td></tr></table></figure><blockquote><ul><li>会在“<vcpkg_dir>\scripts\buildsystems”目录下，生成nuget配置文件.</li><li>其中<vcpkg_dir>是指vcpkg实际所在目录</li></ul></blockquote><h3 id="为每一个用户设置"><a href="#为每一个用户设置" class="headerlink" title="为每一个用户设置"></a>为每一个用户设置</h3><hr><p><code>vcpkg integrate install</code></p><h3 id="为当前项目配置，这里需要在该项目的目录下拥有一份vcpkg的拷贝"><a href="#为当前项目配置，这里需要在该项目的目录下拥有一份vcpkg的拷贝" class="headerlink" title="为当前项目配置，这里需要在该项目的目录下拥有一份vcpkg的拷贝"></a>为当前项目配置，这里需要在该项目的目录下拥有一份vcpkg的拷贝</h3><hr><p><code>vcpkg integrate project</code></p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><blockquote><ul><li>打开Visual Studio，点击菜单“工具-&gt;NuGet包管理器-&gt;程序包管理器设置”，进入设置界面，点击“程序包源”。</li></ul></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMjA3MTc0NzQ4Mjc3?x-oss-process=image/format,png" alt="" title="NuGet"></p><!--<img src="http://static.runoob.com/images/runoob-logo.png" width="50%">--><blockquote><ul><li>点击“加号”增加一个源。修改源的名字为vcpkg。在“源”的选项中点击右侧的”…”选择vcpkg目录下的<code>“scripts\buildsystems”</code>目录，然后点击右侧的“更新按钮”。点击<code>确定</code>，关闭设置对话框。到此，全局性的设置已经完成，以后不必再重复设置了。</li></ul></blockquote><h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3><blockquote><ul><li>用Visual Studio       打开一个工程或解决方案。右键点击需要设置的工程，选择<code>管理NuGet程序包</code>。在右上角的<strong>程序包源</strong>中选择刚刚设置的“vcpkg”。这样在“浏览”选项卡中就可以看到<code>vcpkg.H.Repos.vcpkg</code>。点击最右侧的“安装”。这样就可以集成到某个工程了。</li></ul></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMjA3MTc0ODE2MDQ4?x-oss-process=image/format,png" alt=""></p><h2 id="集成静态库"><a href="#集成静态库" class="headerlink" title="集成静态库"></a>集成静态库</h2><p>Vcpkg默认编译链接的是动态库，如果要链接静态库，目前还没有简便的方法。需要做如下操作</p><p>用文本方式打开vcxproj工程文件<br>在xml的段里面增加如下两句话即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VcpkgTriplet&gt;x86-windows-static&lt;/VcpkgTriplet&gt;</span><br><span class="line">&lt;VcpkgEnabled&gt;true&lt;/VcpkgEnabled&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在CMake中集成静态库，需要额外指令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake .. -DCMAKE_TOOLCHAIN_FILE=.../vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x86-windows-static</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="使用Vcpkg时的注意点"><a href="#使用Vcpkg时的注意点" class="headerlink" title="使用Vcpkg时的注意点"></a>使用Vcpkg时的注意点</h2><blockquote><ul><li>Vcpkg仅支持Visual Studio 2015 update 3及以上版本（包括Visual Studio 2017），究其原因，很可能和c++11的支持度以及集成原理有关系。</li><li>目前Vcpkg编译静态库，默认只支持MT模式。</li><li>找不到包问题 例子:   <code>./vcpkg install glfw3:x64-windows</code> <a href="#1">注意 :x64-windows</a></li></ul></blockquote><h2 id="安装-Linux-Developer-Tools"><a href="#安装-Linux-Developer-Tools" class="headerlink" title="安装 Linux Developer Tools"></a>安装 Linux Developer Tools</h2><ul><li><p>Debian，Ubuntu，popOS或其他基于 Debian 的发行版:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install build-essential tar curl zip unzip</span><br></pre></td></tr></table></figure></li><li><p>CentOS</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install centos-release-scl</span><br><span class="line">$ sudo yum install devtoolset-7</span><br><span class="line">$ scl enable devtoolset-7 bash</span><br></pre></td></tr></table></figure><h2 id="安装-macOS-Developer-Tools"><a href="#安装-macOS-Developer-Tools" class="headerlink" title="安装 macOS Developer Tools"></a>安装 macOS Developer Tools</h2><p>在 macOS 中，您唯一需要做的是在终端中运行以下命令:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure></li></ul><h2 id="Visual-Studio-Code-中的-CMake-Tools"><a href="#Visual-Studio-Code-中的-CMake-Tools" class="headerlink" title="Visual Studio Code 中的 CMake Tools"></a>Visual Studio Code 中的 CMake Tools</h2><p>将以下内容添加到您的工作区的 settings.json 中将使CMake Tools自动使用vcpkg中的第三方库:<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;cmake.configureSettings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;CMAKE_TOOLCHAIN_FILE&quot;</span>: <span class="string">&quot;[vcpkg root]/scripts/buildsystems/vcpkg.cmake&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Visual-Studio-CMake-工程中使用-vcpkg"><a href="#Visual-Studio-CMake-工程中使用-vcpkg" class="headerlink" title="Visual Studio CMake 工程中使用 vcpkg"></a>Visual Studio CMake 工程中使用 vcpkg</h3><p>打开CMake设置选项，将 vcpkg toolchain 文件路径在 CMake toolchain file 中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[vcpkg root]/scripts/buildsystems/vcpkg.cmake</span><br></pre></td></tr></table></figure><h2 id="将-vcpkg-作为一个子模块"><a href="#将-vcpkg-作为一个子模块" class="headerlink" title="将 vcpkg 作为一个子模块"></a>将 vcpkg 作为一个子模块</h2><p>当您希望将vcpkg作为一个子模块加入到您的工程中时， 您可以在第一个 project() 调用之前将以下内容添加到 CMakeLists.txt 中， 而无需将 CMAKE_TOOLCHAIN_FILE 传递给cmake调用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(CMAKE_TOOLCHAIN_FILE &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/vcpkg/scripts/buildsystems/vcpkg.cmake&quot;</span><br><span class="line">  CACHE STRING &quot;Vcpkg toolchain file&quot;)</span><br></pre></td></tr></table></figure><h2 id="Tab补全-自动补全"><a href="#Tab补全-自动补全" class="headerlink" title="Tab补全/自动补全"></a>Tab补全/自动补全</h2><p>vcpkg 支持命令，包名称，以及 Powershell 和 Bash 中的选项。 若您需要在指定的 shell 中启用Tab补全功能，请依据您使用的shell运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; .\vcpkg integrate powershell</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">$ ./vcpkg integrate bash <span class="comment"># 或 zsh</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCODE添加右键打开</title>
      <link href="/2022/07/11/VSCODE%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80/"/>
      <url>/2022/07/11/VSCODE%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode]</span><br><span class="line">@=&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]</span><br><span class="line">@=&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]</span><br><span class="line">@=&quot;Open with Code&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> regedit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lua table的C API</title>
      <link href="/2022/07/10/lua%20table%E7%9A%84C%20API/"/>
      <url>/2022/07/10/lua%20table%E7%9A%84C%20API/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Lua笔记-关于lua table的C API  </span><br><span class="line">//Lua版本5.2  </span><br><span class="line">  </span><br><span class="line">/*相关API: </span><br><span class="line">lua_createtable </span><br><span class="line">原型: void lua_createtable (lua_State *L, int narr, int nrec); </span><br><span class="line">描述: 创建一个新的table并将之放在栈顶.narr是该table数组部分的长度,nrec是该table hash部分的长度. </span><br><span class="line">    当我们确切的知道要放多少元素到table的时候,使用这个函数,lua可以预分配一些内存,提升性能. </span><br><span class="line">    如果不确定要存放多少元素可以使用 lua_newtable 函数来创建table. </span><br><span class="line">     </span><br><span class="line">lua_newtable </span><br><span class="line">原型: void lua_newtable (lua_State *L); </span><br><span class="line">描述: 创建一个新的table并将之放在栈顶. 等同于lua_createtable(L, 0, 0).  </span><br><span class="line"> </span><br><span class="line">lua_getfield </span><br><span class="line">原型: void lua_getfield (lua_State *L, int index, const char *k); </span><br><span class="line">描述: 将t[k]元素push到栈顶. 其中t是index处的table. </span><br><span class="line">    这个函数可能触发index元方法. </span><br><span class="line"> </span><br><span class="line">lua_setfield </span><br><span class="line">原型: void lua_setfield (lua_State *L, int index, const char *k); </span><br><span class="line">描述: 为table中的key赋值. t[k] = v . 其中t是index处的table , v为栈顶元素. </span><br><span class="line">    这个函数可能触发newindex元方法. </span><br><span class="line">    调用完成后弹出栈顶元素(value).  </span><br><span class="line">lua_gettable </span><br><span class="line">原型: void lua_gettable (lua_State *L, int index); </span><br><span class="line">描述: 将t[k]元素push到栈顶. 其中t是index处的table,k为栈顶元素. </span><br><span class="line">    这个函数可能触发index元方法. </span><br><span class="line">    调用完成后弹出栈顶元素(key). </span><br><span class="line">     </span><br><span class="line">lua_settable </span><br><span class="line">原型: void lua_settable (lua_State *L, int index); </span><br><span class="line">描述: 为table中的key赋值. t[k] = v . 其中t是index处的table , v为栈顶元素. k为-2处的元素. </span><br><span class="line">    这个函数可能触发newindex元方法. </span><br><span class="line">    调用完成后弹出栈顶两个元素(key , value) </span><br><span class="line">     </span><br><span class="line">lua_rawget </span><br><span class="line">原型: void lua_rawget (lua_State *L, int index); </span><br><span class="line">描述: 与lua_gettable函数类似, 但是不会触发index元方法. </span><br><span class="line"> </span><br><span class="line">lua_rawset </span><br><span class="line">原型: void lua_rawset (lua_State *L, int index); </span><br><span class="line">描述: 与lua_settable函数类似, 但是不会触发newindex元方法. </span><br><span class="line"> </span><br><span class="line">lua_rawgeti </span><br><span class="line">原型: void lua_rawgeti (lua_State *L, int index, int n); </span><br><span class="line">描述: 将t[n]元素push到栈顶.其中t是index处的table. </span><br><span class="line">    这个函数不会触发index元方法. </span><br><span class="line"> </span><br><span class="line">lua_rawseti </span><br><span class="line">原型: void lua_rawseti (lua_State *L, int index, int n); </span><br><span class="line">描述: 为table中的key赋值. t[n] = v .其中t是index处的table , v为栈顶元素. </span><br><span class="line">    这个函数不会触发newindex元方法. </span><br><span class="line">    调用完成后弹出栈顶元素. </span><br><span class="line"> </span><br><span class="line">lua_rawgetp </span><br><span class="line">原型: void lua_rawgetp (lua_State *L, int index, const void *p); </span><br><span class="line">描述: 将t[p]元素push到栈顶.其中t是index处的table. p是一个lightuserdata. </span><br><span class="line">    这个函数不会触发index元方法. </span><br><span class="line"> </span><br><span class="line">lua_rawsetp </span><br><span class="line">原型: void lua_rawsetp (lua_State *L, int index, const void *p); </span><br><span class="line">描述: 为table中的key赋值. t[p] = v .其中t是index处的table , p是一个lightuserdata , v为栈顶元素. </span><br><span class="line">    这个函数不会触发newindex元方法. </span><br><span class="line">    调用完成后弹出栈顶元素. </span><br><span class="line"> </span><br><span class="line">lua_getmetatable </span><br><span class="line">原型: int lua_getmetatable (lua_State *L, int index); </span><br><span class="line">描述: 将index处元素的元表push到栈顶. 如果该元素没有元表, 函数返回0 , 不改变栈. </span><br><span class="line"> </span><br><span class="line">lua_setmetatable </span><br><span class="line">原型: void lua_setmetatable (lua_State *L, int index); </span><br><span class="line">描述: 将栈顶元素设置为index处元素的元表. </span><br><span class="line">    调用完成后弹出栈顶元素. </span><br><span class="line"> </span><br><span class="line">lua_istable </span><br><span class="line">原型: int lua_istable (lua_State *L, int index); </span><br><span class="line">描述: 判断index处元素是否为一个table , 如果是返回1,否则返回0. </span><br><span class="line"> </span><br><span class="line">lua_pushglobaltable </span><br><span class="line">原型: void lua_pushglobaltable (lua_State *L); </span><br><span class="line">描述: 将lua的全局表放在栈顶. </span><br><span class="line">luaL_newmetatable </span><br><span class="line">原型: int luaL_newmetatable (lua_State *L, const char *tname); </span><br><span class="line">描述: 如果注册表中已经有名为tname的key,则返回0. </span><br><span class="line">    否则创建一个新table作为userdata的元表. 这个元表存储在注册表中,并以tname为key. 返回1. </span><br><span class="line">    函数完成后将该元表置于栈顶. </span><br><span class="line">     </span><br><span class="line">luaL_getmetatable </span><br><span class="line">原型: void luaL_getmetatable (lua_State *L, const char *tname); </span><br><span class="line">描述: 将注册表中以tname为key的元表push到栈顶. </span><br><span class="line"> </span><br><span class="line">luaL_setmetatable </span><br><span class="line">原型: void luaL_setmetatable (lua_State *L, const char *tname); </span><br><span class="line">描述: 将栈顶元素存储到注册表中, 它的key为tname. </span><br><span class="line"> </span><br><span class="line">luaL_getsubtable </span><br><span class="line">原型: int luaL_getsubtable (lua_State *L, int idx, const char *fname); </span><br><span class="line">描述: 将 t[fname] push到栈顶, 其中t是index处的table , 并且 t[fname] 也为一个table. </span><br><span class="line">    如果 t[fname] 原本就存在,返回 true ,否则返回false,并且将 t[fname] 新建为一张空表. </span><br><span class="line">lua_getglobal </span><br><span class="line">原型: void lua_getglobal (lua_State *L, const char *name); </span><br><span class="line">描述: 将 t[name] 元素push到栈顶, 其中t为全局表. </span><br><span class="line">lua_setglobal </span><br><span class="line">原型: void lua_setglobal (lua_State *L, const char *name); </span><br><span class="line">描述: 为table中的key赋值. t[name] = v . 其中t为全局表. v为栈顶元素. </span><br><span class="line">    调用完成后弹出栈顶元素(v). </span><br><span class="line">     </span><br><span class="line">luaL_newlibtable </span><br><span class="line">原型: void luaL_newlibtable (lua_State *L, const luaL_Reg l[]); </span><br><span class="line">描述: 创建一张空表, lua预先分配足够的内存用来存储我们创建的函数库. </span><br><span class="line">    稍后我们可以使用 luaL_setfuncs 函数注册我们的函数库. </span><br><span class="line"> </span><br><span class="line">luaL_setfuncs </span><br><span class="line">原型: void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup); </span><br><span class="line">描述: 将所有 luaL_Reg数组中的函数注册到栈顶的table中.  </span><br><span class="line">    当upvalue个数不为0时,所创建的所有函数共享这些upvalue. -2到-(nup+1)的元素为要注册的upvalue. </span><br><span class="line">    (注意:这些upvalue是c中的upvalue,不是lua中的upvalue,可以在注册的c函数中通过 lua_upvalueindex(n)获取其值.) </span><br><span class="line">    调用完成后弹出栈顶的所有upvalue. </span><br><span class="line"> </span><br><span class="line">luaL_newlib </span><br><span class="line">原型: void luaL_newlib (lua_State *L, const luaL_Reg *l); </span><br><span class="line">描述: 创建一个新的table , 并将luaL_Reg数组中的函数注册到其中. </span><br><span class="line">    它是一个宏 (luaL_newlibtable(L,l), luaL_setfuncs(L,l,0)) </span><br><span class="line">     </span><br><span class="line">lua_next </span><br><span class="line">原型: int lua_next (lua_State *L, int index); </span><br><span class="line">描述: 该函数用来遍历一个table. </span><br><span class="line">    从栈顶弹出一个key , 并且push一个 key-value对(栈顶key的下一个键值对) ,到栈顶. </span><br><span class="line">    如果table中没有更多的元素, 函数返回0. </span><br><span class="line">    遍历开始时栈顶为一个nil , 函数取出第一个键值对. </span><br><span class="line">     </span><br><span class="line">    通常遍历方法为: </span><br><span class="line">    lua_pushnil(L);  // first key </span><br><span class="line">    while (lua_next(L, t) != 0) &#123; </span><br><span class="line">        // uses &#x27;key&#x27; (at index -2) and &#x27;value&#x27; (at index -1) </span><br><span class="line">        printf(&quot;%s - %s\n&quot;, </span><br><span class="line">        lua_typename(L, lua_type(L, -2)), </span><br><span class="line">        lua_typename(L, lua_type(L, -1))); </span><br><span class="line">        // removes &#x27;value&#x27;; keeps &#x27;key&#x27; for next iteration  </span><br><span class="line">        lua_pop(L, 1); </span><br><span class="line">    &#125; </span><br><span class="line">    注意: 在遍历table的时候 ,除非明确的知道key为字符串,不要对栈上的key使用 lua_tolstring 函数 , </span><br><span class="line">    因为这样有可能改变key的类型 , 影响下一次 lua_next调用. </span><br><span class="line">     </span><br><span class="line">lua_rawlen </span><br><span class="line">原型: size_t lua_rawlen (lua_State *L, int index); </span><br><span class="line">描述: 获取index处元素的长度. </span><br><span class="line">    对于字符串来说,返回字符串长度. </span><br><span class="line">    对于table来说,返回#操作符的长度. 不受元方法影响. </span><br><span class="line">    对于userdata来说,返回内存的大小. </span><br><span class="line">    其他元素返回0. </span><br><span class="line">     </span><br><span class="line">lua_len </span><br><span class="line">    原型: void lua_len (lua_State *L, int index); </span><br><span class="line">    描述: 获取index处元素#操作符的结果 , 放置在栈顶. </span><br><span class="line">*/  </span><br><span class="line">  </span><br><span class="line">/* 其他概念: </span><br><span class="line">    1.伪索引: </span><br><span class="line">        Lua栈的正常索引 从栈顶算,栈顶为-1,向栈低递减. 从栈低算,栈低为1,向栈顶递增. </span><br><span class="line">        伪索引是一种索引,他不在栈的位置中,通过一个宏来定义伪索引的位置. </span><br><span class="line">        伪索引被用来访问注册表,或者在lua_CFunction中访问upvalue. </span><br><span class="line"> </span><br><span class="line">    2.注册表: </span><br><span class="line">        Lua的注册表是一个预定义的table, 可以提供给c api存储一切想要存储的值. </span><br><span class="line">        注册表通过 LUA_REGISTRYINDEX 伪索引来访问. </span><br><span class="line">        例如 lua_getfield 函数可以像下面这样使用来获取注册表中的一个以&quot;hello&quot;为key的值 : </span><br><span class="line">            lua_getfield( L , LUA_REGISTRYINDEX , &quot;hello&quot;); </span><br><span class="line">         </span><br><span class="line">    1. upvalue: </span><br><span class="line">        在使用 lua_pushcfunction 或者 luaL_setfuncs 将一个lua_CFunction 注册到Lua环境中时, </span><br><span class="line">        可以同时为这个函数设置一些upvalue .  </span><br><span class="line">        而后在这些lua_CFunction 中可以使用 lua_upvalueindex(n) 函数来获取对应位置的upvalue. </span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="lua-next函数"><a href="#lua-next函数" class="headerlink" title="lua_next函数"></a>lua_next函数</h1><p><img src="https://img-blog.csdn.net/20180308204739912" alt="image"></p><p>1 如果栈顶元素为nil，则弹出nil，将table第一个k-v对中的key和value先后入栈，返回true。</p><p>  注：所有此时栈顶为value(-1), 随后是key(-2)</p><p>2 如果栈顶为key，先弹出当前key并以key为基础，将table的下一个key-value先后入栈，返回true</p><p>3 如果栈顶元素为最后一个key，则弹出key，然后返回true</p><h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><p>假设table在stack中的所有位置为index 现在从C代码里面对这个table进行遍历有两种方法</p><ul><li>表位于索引’index’的堆栈中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lua_pushnil(L);  ///&lt;  第一个键 </span><br><span class="line">while (lua_next(L, index) != 0) &#123;</span><br><span class="line">// 使用&#x27;key&#x27;（索引-2）和&#x27;value&#x27;（索引-1）</span><br><span class="line">printf(&quot;%s - %s\n&quot;,</span><br><span class="line">lua_typename(L, lua_type(L, -2)),</span><br><span class="line">lua_typename(L, lua_type(L, -1)));</span><br><span class="line"> </span><br><span class="line">lua_pop(L, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法2、index为任意情况：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//将另一个引用推入堆栈顶部的表格</span><br><span class="line">lua_pushvalue(L, index);  </span><br><span class="line">// /现在堆栈包含：-1 =&gt;table: </span><br><span class="line">lua_pushnil(L);  </span><br><span class="line">//现在堆栈包含 -1 =&gt; nil; -2 =&gt; table  </span><br><span class="line">while (lua_next(L, -2))  </span><br><span class="line">&#123;  </span><br><span class="line">// 栈内容: -1 =&gt; value; -2 =&gt; key; -3 =&gt; table  </span><br><span class="line">// copy the key so that lua_tostring does not modify the original  </span><br><span class="line">lua_pushvalue(L, -2);  </span><br><span class="line">// 栈内容: -1 =&gt; key; -2 =&gt; value; -3 =&gt; key; -4 =&gt; table  </span><br><span class="line">printf(&quot;%s =&gt; %s\n&quot;, lua_tostring(L, -1), lua_tostring(L, -2));  </span><br><span class="line">// pop value + copy of key, leaving original key  </span><br><span class="line">lua_pop(L, 2);  </span><br><span class="line">// stack now contains: -1 =&gt; key; -2 =&gt; table  </span><br><span class="line">&#125;  </span><br><span class="line">lua_pop(L, 1); </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> lua </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C调用lua互调记录笔记</title>
      <link href="/2022/07/10/%E8%AF%A6%E8%A7%A3C%E8%B0%83%E7%94%A8lua%E4%BA%92%E8%B0%83%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/10/%E8%AF%A6%E8%A7%A3C%E8%B0%83%E7%94%A8lua%E4%BA%92%E8%B0%83%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="C调用lua互调记录笔记"><a href="#C调用lua互调记录笔记" class="headerlink" title="C调用lua互调记录笔记"></a>C调用lua互调记录笔记</h1><ul><li>下载lua5.1源码并编译</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project(lua C)</span><br><span class="line">cmake_minimum_required(VERSION 3.0.0)</span><br><span class="line"></span><br><span class="line">include_directories(src $&#123;CMAKE_CURRENT_BINARY_DIR&#125;)</span><br><span class="line">set(SRC_CORE src/lapi.c src/lcode.c src/ldebug.c src/ldo.c src/ldump.c src/lfunc.c src/lgc.c src/llex.c</span><br><span class="line">        src/lmem.c src/lobject.c src/lopcodes.c src/lparser.c src/lstate.c src/lstring.c src/ltable.c</span><br><span class="line">        src/ltm.c src/lundump.c src/lvm.c src/lzio.c)</span><br><span class="line">set(SRC_LIB src/lauxlib.c src/lbaselib.c src/ldblib.c src/liolib.c</span><br><span class="line">        src/lmathlib.c src/loslib.c src/lstrlib.c src/ltablib.c src/loadlib.c src/linit.c)</span><br><span class="line"></span><br><span class="line">set(SRC_LUA src/lua.c)</span><br><span class="line">set(SRC_LUAC src/luac.c src/print.c)</span><br><span class="line"></span><br><span class="line">add_library(liblua $&#123;SRC_CORE&#125; $&#123;SRC_LIB&#125;)</span><br><span class="line">set_target_properties(liblua PROPERTIES OUTPUT_NAME lua)</span><br><span class="line"></span><br><span class="line">add_library(libluadll SHARED $&#123;SRC_CORE&#125; $&#123;SRC_LIB&#125;)</span><br><span class="line">target_compile_definitions(libluadll PRIVATE _CRT_SECURE_NO_WARNINGS LUA_BUILD_AS_DLL)</span><br><span class="line">set_target_properties(libluadll PROPERTIES OUTPUT_NAME lua51)</span><br><span class="line"></span><br><span class="line">add_executable(lua $&#123;SRC_LUA&#125;)</span><br><span class="line">target_link_libraries(lua libluadll)</span><br><span class="line"></span><br><span class="line">add_executable(luac $&#123;SRC_LUAC&#125;)</span><br><span class="line">target_link_libraries(luac liblua)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编译完后build下生成liblua.a,liblua51.dll,liblua51.dll.a,lua.exe luac.exe </li></ul><h1 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h1><ul><li>test.lua<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = &quot;bob&quot;</span><br><span class="line">age= 20</span><br><span class="line">mystr=&quot;hello lua&quot;</span><br><span class="line">mytable=&#123;name=&quot;tom&quot;,id=123456&#125;</span><br><span class="line"></span><br><span class="line">function add(x,y)</span><br><span class="line">    return 2*x+y</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;time.h&gt;   </span><br><span class="line">#include &quot;include\lua.h&quot; </span><br><span class="line">#include &quot;include\lualib.h&quot;</span><br><span class="line">#include &quot;include\lauxlib.h&quot;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//lib库支持</span><br><span class="line">//#pragma comment(lib, &quot;lib\lua5.1.lib&quot;)</span><br><span class="line">//头文件支持</span><br><span class="line">// extern &quot;C&quot;</span><br><span class="line">// &#123;   </span><br><span class="line">// &#125;  </span><br><span class="line">#define LUA_FILE &quot;G:\\mycode\\c\\lua_c\\idl2lua.lua\\idl2lua.lua&quot;</span><br><span class="line">const char LUA_SCRIPT[] =    </span><br><span class="line">    &quot;function loop_add(a, b)            &quot;    </span><br><span class="line">    &quot;   local sum = 0                   &quot;    </span><br><span class="line">    &quot;   for i = 1, 10000000 do          &quot;    </span><br><span class="line">    &quot;       sumsum = sum + a + b           &quot;    </span><br><span class="line">    &quot;   end                             &quot;    </span><br><span class="line">    &quot;   return sum                      &quot;    </span><br><span class="line">    &quot;end                                &quot;    </span><br><span class="line">    &quot;                                   &quot;    </span><br><span class="line">    &quot;function add(a, b)                 &quot;    </span><br><span class="line">    &quot;   return a + b                    &quot;    </span><br><span class="line">    &quot;end                                &quot;    </span><br><span class="line">    ;    </span><br><span class="line">   </span><br><span class="line">// lua 脚本里面的函数由C调用    </span><br><span class="line">int use_lua_add(lua_State *L, const char *func_name, int x, int y)    </span><br><span class="line">&#123;    </span><br><span class="line">    int sum;                        /* 通过名字得到Lua函数 */    </span><br><span class="line">    lua_getglobal(L, func_name);    /* 第一个参数 */    </span><br><span class="line">    lua_pushnumber(L, x);           /* 第二个参数 */    </span><br><span class="line">    lua_pushnumber(L, y);           /* 调用函数，告知有两个参数，一个返回值 */    </span><br><span class="line">    lua_call(L, 2, 1);              /* 得到结果 */    </span><br><span class="line">    sum = (int)lua_tointeger(L, -1);    </span><br><span class="line">    lua_pop(L, 1);    </span><br><span class="line">    return sum;    </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">static int kpt_lua_Writer(lua_State *L, const void *p, size_t sz, void *u)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    int fd = *(int*)u;</span><br><span class="line">    int ret = write(fd, p, sz);</span><br><span class="line">    if(ret &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;write error!\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void buildLua(int fd)</span><br><span class="line">&#123;</span><br><span class="line">    lua_State *L;</span><br><span class="line"></span><br><span class="line">    L = luaL_newstate();</span><br><span class="line"></span><br><span class="line">    luaL_openlibs(L);</span><br><span class="line"></span><br><span class="line">    int ret = luaL_loadfile(L, LUA_FILE);</span><br><span class="line">    if(ret != 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;, lua_tostring(L, -1));</span><br><span class="line">    &#125;</span><br><span class="line">    int re = lua_dump(L, kpt_lua_Writer, &amp;fd);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    lua_close(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void print_stacknum(const char * desc, const int count)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s stack num = %d\n&quot;,desc, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test_api_getfield()</span><br><span class="line">&#123;</span><br><span class="line">    lua_State *L = lua_open();</span><br><span class="line"></span><br><span class="line">    luaL_dofile(L,&quot;fieldtest.lua&quot;);     // 加载执行lua文件</span><br><span class="line">    lua_getglobal(L,&quot;param&quot;);           // 查找param变量压入栈底</span><br><span class="line">    print_stacknum(&quot;stage1&quot;, lua_gettop(L));</span><br><span class="line"></span><br><span class="line">    lua_getfield(L, -1, &quot;a&quot;);           // 将Param.a入栈</span><br><span class="line">    int nParam_a = lua_tointeger(L,-1); // 将Param.a取出赋值给变量nParam_a</span><br><span class="line">    lua_getfield(L, -2, &quot;b&quot;);           // 将Param.b入栈</span><br><span class="line">    int nParam_b = lua_tointeger(L,-1); // 将Param.b取出赋值给变量nParam_b</span><br><span class="line">    print_stacknum(&quot;stage2&quot;,lua_gettop(L));</span><br><span class="line"></span><br><span class="line">    lua_pop(L, 3);                  // 清除掉栈中多余的3个变量param、param.a、param.b</span><br><span class="line">    print_stacknum(&quot;stage3&quot;,lua_gettop(L));</span><br><span class="line"></span><br><span class="line">    int nParam_c = 2 * nParam_a + nParam_b;</span><br><span class="line">    lua_pushinteger(L, nParam_c);       // 将c=2a+b计算完成，压入栈顶</span><br><span class="line">    lua_setfield(L, LUA_GLOBALSINDEX, &quot;c&quot;);// 使用栈顶的值设置脚本全局变量c</span><br><span class="line">    print_stacknum(&quot;stage4&quot;,lua_gettop(L));</span><br><span class="line"></span><br><span class="line">    lua_getglobal(L,&quot;lua_func&quot;);        // 查找lua_func函数压入栈底</span><br><span class="line">    lua_pushinteger(L, 3);              // 压入函数变量x=3    </span><br><span class="line">    lua_pcall(L,1,1,0);             // 执行脚本函数lua_func</span><br><span class="line">    print_stacknum(&quot;stage5&quot;,lua_gettop(L));</span><br><span class="line"></span><br><span class="line">    int result = lua_tointeger(L,-1);   // 从栈中取回返回值 </span><br><span class="line">    lua_pop(L,1);                       // 弹出返回结果</span><br><span class="line">    print_stacknum(&quot;stage6&quot;,lua_gettop(L));</span><br><span class="line"></span><br><span class="line">    printf(&quot;\nresult = %d&quot;, result);  </span><br><span class="line">    lua_close(L);                       //关闭lua环境  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void stackDump(lua_State* L)</span><br><span class="line">&#123;</span><br><span class="line">static int count = 0;</span><br><span class="line">printf(&quot;begin dump lua stack:%d\n&quot;, count);</span><br><span class="line">int top = lua_gettop(L);</span><br><span class="line">for (int i = top; i &gt; 0; --i)</span><br><span class="line">&#123;</span><br><span class="line">int t = lua_type(L, i);</span><br><span class="line">switch (t)</span><br><span class="line">&#123;</span><br><span class="line">case LUA_TSTRING:</span><br><span class="line">printf(&quot;%s\n&quot;, lua_tostring(L, i));</span><br><span class="line">break;</span><br><span class="line">case LUA_TBOOLEAN:</span><br><span class="line">printf(lua_toboolean(L, i) ? &quot;true\n&quot; : &quot;false\n&quot;);</span><br><span class="line">break;</span><br><span class="line">case LUA_TNUMBER:</span><br><span class="line">printf(&quot;%g\n&quot;, lua_tonumber(L, i));</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">printf(&quot;%s\n&quot;, lua_typename(L, t));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()    </span><br><span class="line">&#123;    </span><br><span class="line">    lua_State *L = luaL_newstate();</span><br><span class="line">    luaL_openlibs(L);</span><br><span class="line">    int retLoad = luaL_loadfile(L, &quot;test.lua&quot;);</span><br><span class="line">    if (retLoad == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;load file success retLoad:%d\n&quot;, retLoad);</span><br><span class="line">    &#125;</span><br><span class="line">    //运行Lua文件  </span><br><span class="line">    if (retLoad || lua_pcall(L, 0, 0, 0))</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;error %s\n&quot;, lua_tostring(L, -1));</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lua_getglobal(L, &quot;age&quot;);  //lua获取全局变量age的值并且返回到栈顶,这个时候length对应的值将代替width的值成为新栈顶</span><br><span class="line">    int age = lua_tointeger(L, -1); //栈顶</span><br><span class="line">    printf(&quot;age = %d\n&quot;, age);</span><br><span class="line">    </span><br><span class="line">    lua_getglobal(L, &quot;name&quot;); //lua获取全局变量name的值并且返回到栈顶</span><br><span class="line">    const char *name = lua_tostring(L, -1);//次栈顶</span><br><span class="line">    printf(&quot;name = %s\n&quot;, name); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    lua_getglobal(L, &quot;mystr&quot;);</span><br><span class="line">    const char *mystr = lua_tostring(L, -1);//次栈顶</span><br><span class="line">    printf(&quot;mystr = %s\n&quot;, mystr);    </span><br><span class="line">    // 清除掉栈中多余的3个变量</span><br><span class="line">    stackDump(L);</span><br><span class="line">    lua_pop(L, 3); </span><br><span class="line">    //5.读取table  </span><br><span class="line">    lua_getglobal(L,&quot;mytable&quot;);   </span><br><span class="line">    lua_getfield(L,-1,&quot;name&quot;);  </span><br><span class="line">    const char *strname = lua_tostring(L,-1);  </span><br><span class="line">    lua_getfield(L,-2,&quot;id&quot;); </span><br><span class="line">    </span><br><span class="line">    int id = lua_tointeger(L, -1); //栈顶</span><br><span class="line">    printf(&quot;mytable name: = %s id: %d\n&quot;, strname,id);    </span><br><span class="line">    stackDump(L);</span><br><span class="line">    // 清除掉栈中多余的3个变量 mytable name id</span><br><span class="line">    lua_pop(L, 3); </span><br><span class="line">    if (!lua_istable(L, -1))//判断是否是table</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;is table...\n&quot;); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!lua_isnumber(L, -1))//将栈顶元素转换成double类型</span><br><span class="line">    &#123;</span><br><span class="line">         printf(&quot;is number...\n&quot;); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    test_api_getfield();</span><br><span class="line">    // //注意读取顺序</span><br><span class="line">    // int age = lua_tointeger(L, -1); //栈顶</span><br><span class="line">    // const char *name = lua_tostring(L, -2);//次栈顶</span><br><span class="line">    // const char *mystr = lua_tostring(L, -3);//次栈顶</span><br><span class="line">    // printf(&quot;name = %s\n&quot;, name); </span><br><span class="line">    // printf(&quot;age = %d\n&quot;, age);</span><br><span class="line">    // printf(&quot;mystr = %s\n&quot;, mystr);    </span><br><span class="line"></span><br><span class="line">    lua_close(L);</span><br><span class="line">    return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0.0)</span><br><span class="line">project(luatest VERSION 0.1.0)</span><br><span class="line"></span><br><span class="line">#将hello.cpp 赋值给SOURCE 变量</span><br><span class="line">#SET(SOURCE $&#123;PROJECT_SOURCE_DIR&#125;/lua_load.c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#FIND_LIBRARY(RUNTIME_LIB lua lib NO_DEFAULT_PATH)</span><br><span class="line"></span><br><span class="line">include_directories(include)</span><br><span class="line">link_directories(lib)</span><br><span class="line"></span><br><span class="line">#LINK_LIBRARIES(lib/lua5.1.dll)</span><br><span class="line"></span><br><span class="line"># ADD_DEFINITIONS(</span><br><span class="line"># -O3 -g -W -Wall</span><br><span class="line">#  -Wunused-variable -Wunused-parameter -Wunused-function -Wunused</span><br><span class="line">#  -Wno-deprecated -Woverloaded-virtual -Wwrite-strings</span><br><span class="line">#  -D__WUR= -D_REENTRANT -D_FILE_OFFSET_BITS=64 -DTIXML_USE_STL</span><br><span class="line"># )</span><br><span class="line"></span><br><span class="line">#指定链接库文件目录</span><br><span class="line">#LINK_DIRECTORIES($&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br><span class="line">#MESSAGE($&#123;PROJECT_SOURCE_DIR&#125;)</span><br><span class="line"></span><br><span class="line"># add_library()</span><br><span class="line">add_executable(luatest lua_load.c)</span><br><span class="line">#target_link_libraries(luatest lua5.1)</span><br><span class="line">#PRIVATE</span><br><span class="line">#add_executable(luatest2 lua_t1.c)</span><br><span class="line">target_link_libraries(luatest lua51)</span><br><span class="line"># set(CPACK_PROJECT_NAME $&#123;PROJECT_NAME&#125;)</span><br><span class="line"># set(CPACK_PROJECT_VERSION $&#123;PROJECT_VERSION&#125;)</span><br><span class="line"># include(CPack)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lua </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ai GPT 生成网文</title>
      <link href="/2022/07/07/AiWriter/"/>
      <url>/2022/07/07/AiWriter/</url>
      
        <content type="html"><![CDATA[<ul><li>原作者github地址：<a href="https://github.com/BlinkDL/AI-Writer">https://github.com/BlinkDL/AI-Writer</a></li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:[./]</span><br><span class="line">|--AI-writer-yq.png</span><br><span class="line">|--AI-Writer.gif</span><br><span class="line">|--AI-Writer.jpg</span><br><span class="line">|--convert_pytorch2paddle.py # 转换pytorch权重代码</span><br><span class="line">|--LICENSE</span><br><span class="line">|--model</span><br><span class="line">|      |--N.-.-wangwen-2022-02-15.zip # 下载的N卡权重压缩包</span><br><span class="line">|      |--wangwen-2022-02-15.json</span><br><span class="line">|      |--wangwen-2022-02-15.pdparams # 转换好的paddle权重文件</span><br><span class="line">|      |--wangwen-2022-02-15.pth # 解压后的权重文件</span><br><span class="line">|--paddle_src # 新版模型</span><br><span class="line">|      |--convert_pytorch2paddle.py # 转换pytorch权重代码</span><br><span class="line">|      |--model.py</span><br><span class="line">|      |--utils.py</span><br><span class="line">|      |--__init__.py</span><br><span class="line">|--print_project_tree.py # 打印项目树状结构</span><br><span class="line">|--README.md</span><br><span class="line">|--run.bat # windows运行脚本</span><br><span class="line">|--run.py # 命令行运行</span><br><span class="line">|--server.jpg</span><br><span class="line">|--server.py # 开启服务</span><br><span class="line">|--src # 原作者新版代码</span><br><span class="line">|      |--model.py</span><br><span class="line">|      |--utils.py</span><br><span class="line">|      |--__init__.py</span><br><span class="line">|--web-client # 前端页面</span><br><span class="line">|      |--index.html</span><br><span class="line">|      |--index.js</span><br></pre></td></tr></table></figure><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><h3 id="paddlepaddle-gt-2-2-请参考-paddle安装教程-安装paddlepaddle2-2"><a href="#paddlepaddle-gt-2-2-请参考-paddle安装教程-安装paddlepaddle2-2" class="headerlink" title="paddlepaddle&gt;=2.2 请参考 paddle安装教程 安装paddlepaddle2.2+"></a>paddlepaddle&gt;=2.2 请参考 paddle安装教程 安装paddlepaddle2.2+</h3><h1 id="命令行使用方法"><a href="#命令行使用方法" class="headerlink" title="命令行使用方法"></a>命令行使用方法</h1><ul><li><ol><li>进入原作者的 <a href="https://github.com/BlinkDL/AI-Writer">https://github.com/BlinkDL/AI-Writer</a> ，下载模型，在右边 Release（v2022-02-15 最新综合模型（N卡）），解压 pth 到 model 目录。</li></ol></li><li><ol><li>python convert_pytorch2paddle.py 转换权重。</li></ol></li><li><ol><li>运行 python run.py。</li></ol></li></ul><h1 id="网页界面使用方法："><a href="#网页界面使用方法：" class="headerlink" title="网页界面使用方法："></a>网页界面使用方法：</h1><ul><li><ol><li>进入原作者的 <a href="https://github.com/BlinkDL/AI-Writer">https://github.com/BlinkDL/AI-Writer</a> ，下载模型，在右边 Release（v2022-02-15 最新综合模型（N卡）），解压 pth 到 model 目录。</li></ol></li><li><ol><li>python convert_pytorch2paddle.py 转换权重。</li></ol></li><li><ol><li>运行 python server.py 开启服务。</li></ol></li><li><ol><li>打开 web-client/index.html，进行愉快的玩耍。</li></ol></li></ul><p><a href="https://github.com/JunnYu/Paddle-AI-Writer">github 地址: </a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解C调用lua脚本效率测试(转)</title>
      <link href="/2022/07/07/%E8%AF%A6%E8%A7%A3C%E8%B0%83%E7%94%A8lua%E8%84%9A%E6%9C%AC%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/07/07/%E8%AF%A6%E8%A7%A3C%E8%B0%83%E7%94%A8lua%E8%84%9A%E6%9C%AC%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="详解C调用lua脚本效率测试"><a href="#详解C调用lua脚本效率测试" class="headerlink" title="详解C调用lua脚本效率测试"></a>详解C调用lua脚本效率测试</h1><p>C调用lua脚本效率测试是本文要介绍的内容，以下代码以C语言为基准，测试了C调用Lua循环和循环调用Lua的效率。结论是不要频繁地穿越C/Lua边界.</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#include &lt;<span class="built_in">time</span>.h&gt;   </span><br><span class="line">   </span><br><span class="line">extern <span class="string">&quot;C&quot;</span>    </span><br><span class="line">&#123;    </span><br><span class="line">#include <span class="string">&quot;lua.h&quot;</span>    </span><br><span class="line">#include <span class="string">&quot;lualib.h&quot;</span>    </span><br><span class="line">#include <span class="string">&quot;lauxlib.h&quot;</span>    </span><br><span class="line">&#125;/* Lua解释器指针 */    </span><br><span class="line">   </span><br><span class="line">const <span class="built_in">char</span> LUA_SCRIPT[] =    </span><br><span class="line">    <span class="string">&quot;function loop_add(a, b)            &quot;</span>    </span><br><span class="line">    <span class="string">&quot;   local sum = 0                   &quot;</span>    </span><br><span class="line">    <span class="string">&quot;   for i = 1, 10000000 do          &quot;</span>    </span><br><span class="line">    <span class="string">&quot;       sumsum = sum + a + b           &quot;</span>    </span><br><span class="line">    <span class="string">&quot;   end                             &quot;</span>    </span><br><span class="line">    <span class="string">&quot;   return sum                      &quot;</span>    </span><br><span class="line">    <span class="string">&quot;end                                &quot;</span>    </span><br><span class="line">    <span class="string">&quot;                                   &quot;</span>    </span><br><span class="line">    <span class="string">&quot;function add(a, b)                 &quot;</span>    </span><br><span class="line">    <span class="string">&quot;   return a + b                    &quot;</span>    </span><br><span class="line">    <span class="string">&quot;end                                &quot;</span>    </span><br><span class="line">    ;    </span><br><span class="line">   </span><br><span class="line">// lua 脚本里面的函数由C调用    </span><br><span class="line">int use_lua_add(lua_State *L, const <span class="built_in">char</span> *func_name, int x, int y)    </span><br><span class="line">&#123;    </span><br><span class="line">    int sum;                        /* 通过名字得到Lua函数 */    </span><br><span class="line">    lua_getglobal(L, func_name);    /* 第一个参数 */    </span><br><span class="line">    lua_pushnumber(L, x);           /* 第二个参数 */    </span><br><span class="line">    lua_pushnumber(L, y);           /* 调用函数，告知有两个参数，一个返回值 */    </span><br><span class="line">    lua_call(L, <span class="number">2</span>, <span class="number">1</span>);              /* 得到结果 */    </span><br><span class="line">    sum = (int)lua_tointeger(L, <span class="number">-1</span>);    </span><br><span class="line">    lua_pop(L, <span class="number">1</span>);    </span><br><span class="line">    <span class="keyword">return</span> sum;    </span><br><span class="line">&#125;    </span><br><span class="line">   </span><br><span class="line">int main()    </span><br><span class="line">&#123;    </span><br><span class="line">    int i, sum = <span class="number">0</span>;    </span><br><span class="line">    clock_t tStart, tStop;    </span><br><span class="line">   </span><br><span class="line">    lua_State *L = lua_open();  /* opens Lua */    </span><br><span class="line">    luaL_openlibs(L);    </span><br><span class="line">    <span class="keyword">if</span> (luaL_dostring(L, LUA_SCRIPT))  // Run lua script    </span><br><span class="line">    &#123;    </span><br><span class="line">        printf(<span class="string">&quot;run script failed/n&quot;</span>);    </span><br><span class="line">        lua_close(L);    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    sum = <span class="number">0</span>;    </span><br><span class="line">    tStart = <span class="built_in">clock</span>();    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++)    </span><br><span class="line">    &#123;    </span><br><span class="line">        sum += <span class="number">1</span> + <span class="number">1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    tStop = <span class="built_in">clock</span>();    </span><br><span class="line">    printf(<span class="string">&quot;C++: %dms./nThe sum is %u./n&quot;</span>,    </span><br><span class="line">           (tStop - tStart) * <span class="number">1000</span> / CLOCKS_PER_SEC, sum);    </span><br><span class="line">   </span><br><span class="line">    sum = <span class="number">0</span>;    </span><br><span class="line">    tStart = <span class="built_in">clock</span>();    </span><br><span class="line">    sum = use_lua_add(L, <span class="string">&quot;loop_add&quot;</span>, <span class="number">1</span>, <span class="number">1</span>);    </span><br><span class="line">    tStop = <span class="built_in">clock</span>();    </span><br><span class="line">    printf(<span class="string">&quot;Lua loop_add: %dms./nThe sum is %u./n&quot;</span>,    </span><br><span class="line">           (tStop - tStart) * <span class="number">1000</span> / CLOCKS_PER_SEC, sum);    </span><br><span class="line">               </span><br><span class="line">    sum = <span class="number">0</span>;    </span><br><span class="line">    tStart = <span class="built_in">clock</span>();    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++)    </span><br><span class="line">    &#123;    </span><br><span class="line">        sum += use_lua_add(L, <span class="string">&quot;add&quot;</span>, <span class="number">1</span>, <span class="number">1</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">    tStop = <span class="built_in">clock</span>();    </span><br><span class="line">    printf(<span class="string">&quot;Loop lua add: %dms./nThe sum is %u./n&quot;</span>,    </span><br><span class="line">           (tStop - tStart) * <span class="number">1000</span> / CLOCKS_PER_SEC, sum);    </span><br><span class="line">    lua_close(L);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C++: 31ms.  </span><br><span class="line"></span><br><span class="line">The sum is 20000000.  </span><br><span class="line"></span><br><span class="line">Lua loop_add: 437ms.  </span><br><span class="line"></span><br><span class="line">The sum is 20000000.  </span><br><span class="line"></span><br><span class="line">Loop lua add: 2360ms.  </span><br><span class="line"></span><br><span class="line">The sum is 20000000. </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lua </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip与WSL#使用心得记录</title>
      <link href="/2022/06/04/pip%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <url>/2022/06/04/pip%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="使用pip-install-e"><a href="#使用pip-install-e" class="headerlink" title="使用pip install -e."></a>使用pip install -e.</h1><ul><li>可以git clone到本地后进入文件夹,工作路径至“setup.py”文件夹，运行,-e后面的点是命令的一部分，它表示当前目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -e.</span><br></pre></td></tr></table></figure></li><li>pip会自动将包复制到site-packages</li></ul><h1 id="pip-源设置"><a href="#pip-源设置" class="headerlink" title="pip 源设置"></a>pip 源设置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h1 id="WSL-ubantu-apt-更换数据源"><a href="#WSL-ubantu-apt-更换数据源" class="headerlink" title="WSL ubantu apt 更换数据源"></a>WSL ubantu apt 更换数据源</h1><blockquote><ul><li><ol><li>修改sources.list配置文件(注意备份源文件)：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>sources.list 添加：阿里源：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></li></ol></li><li>3.更新：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li></ul></blockquote><p><a href="">清华园</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></p><p><a href="">中科大源</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><br><a href="">网易源</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串处理</title>
      <link href="/2022/06/03/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
      <url>/2022/06/03/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Python长字符串"><a href="#Python长字符串" class="headerlink" title="Python长字符串"></a>Python长字符串</h1><p>Python 多行注释时提到使用三个引号（单引号、双引号都行）来包含多行注释内容，其实这是长字符串写法，只是由于在长字符串中可以放置任何内容，包括放置单引号、双引号都可以，如果所定义的长字符串没有赋值给任何变量，那么这个字符串就相当于被解释器忽略了，也就相当于注释掉了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> s = ```<span class="string">&quot;Let&#x27;s go fishing&quot;</span>, said Mary.</span><br><span class="line"><span class="string">&quot;OK, Let&#x27;s go&quot;</span>, said her brother.</span><br><span class="line">they walked to a lake```</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h1 id="Python-转义字符"><a href="#Python-转义字符" class="headerlink" title="Python 转义字符"></a>Python 转义字符</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">转义字符描述</span><br><span class="line">\(在行尾时)续行符</span><br><span class="line">\\反斜杠符号</span><br><span class="line">\&#x27;单引号</span><br><span class="line">\&quot;双引号</span><br><span class="line">\a响铃</span><br><span class="line">\b退格(Backspace)</span><br><span class="line">\e转义</span><br><span class="line">\000空</span><br><span class="line">\n换行</span><br><span class="line">\v纵向制表符</span><br><span class="line">\t横向制表符</span><br><span class="line">\r回车</span><br><span class="line">\f换页</span><br><span class="line">\oyy八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</span><br><span class="line">\xyy十六进制数，以 \x 开头，yy代表的字符，例如：\x0a代表换行</span><br><span class="line">\other其它的字符以普通格式输出</span><br></pre></td></tr></table></figure><h1 id="Python字符串运算符"><a href="#Python字符串运算符" class="headerlink" title="Python字符串运算符"></a>Python字符串运算符</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+字符串连接</span><br><span class="line">&gt;&gt;&gt;a + b</span><br><span class="line">&#x27;HelloPython&#x27;</span><br><span class="line">*重复输出字符串</span><br><span class="line">&gt;&gt;&gt;a * 2</span><br><span class="line">&#x27;HelloHello&#x27;</span><br><span class="line">[]通过索引获取字符串中字符</span><br><span class="line">&gt;&gt;&gt;a[1]</span><br><span class="line">&#x27;e&#x27;</span><br><span class="line">[ : ]截取字符串中的一部分</span><br><span class="line">&gt;&gt;&gt;a[1:4]</span><br><span class="line">&#x27;ell&#x27;</span><br><span class="line">in成员运算符 - 如果字符串中包含给定的字符返回 True</span><br><span class="line">&gt;&gt;&gt;&quot;H&quot; in a</span><br><span class="line">True</span><br><span class="line">not in成员运算符 - 如果字符串中不包含给定的字符返回 True</span><br><span class="line">&gt;&gt;&gt;&quot;M&quot; not in a</span><br><span class="line">True</span><br><span class="line">r/R原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母&quot;r&quot;（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</span><br><span class="line">&gt;&gt;&gt;print r&#x27;\n&#x27;</span><br><span class="line">\n</span><br><span class="line">&gt;&gt;&gt; print R&#x27;\n&#x27;</span><br><span class="line">\n</span><br><span class="line">%格式字符串请看下一章节</span><br></pre></td></tr></table></figure><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">a = &quot;Hello&quot;</span><br><span class="line">b = &quot;Python&quot;</span><br><span class="line"> </span><br><span class="line">print &quot;a + b 输出结果：&quot;, a + b </span><br><span class="line">print &quot;a * 2 输出结果：&quot;, a * 2 </span><br><span class="line">print &quot;a[1] 输出结果：&quot;, a[1] </span><br><span class="line">print &quot;a[1:4] 输出结果：&quot;, a[1:4] </span><br><span class="line"> </span><br><span class="line">if( &quot;H&quot; in a) :</span><br><span class="line">    print &quot;H 在变量 a 中&quot; </span><br><span class="line">else :</span><br><span class="line">    print &quot;H 不在变量 a 中&quot; </span><br><span class="line"> </span><br><span class="line">if( &quot;M&quot; not in a) :</span><br><span class="line">    print &quot;M 不在变量 a 中&quot; </span><br><span class="line">else :</span><br><span class="line">    print &quot;M 在变量 a 中&quot;</span><br><span class="line"> </span><br><span class="line">print r&#x27;\n&#x27;</span><br><span class="line">print R&#x27;\n&#x27;</span><br></pre></td></tr></table></figure><h1 id="Python-字符串格式化"><a href="#Python-字符串格式化" class="headerlink" title="Python 字符串格式化"></a>Python 字符串格式化</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;My name is %s and weight is %d kg!&quot; % (&#x27;Zara&#x27;, 21))</span><br><span class="line">** % 相当于c 逗号**</span><br><span class="line">print(f&#x27;My name is &#123;Zara&#x27;&#125; and weight is &#123;21&#125; kg!&#x27;)</span><br></pre></td></tr></table></figure><h2 id="python-字符串格式化符号"><a href="#python-字符串格式化符号" class="headerlink" title="python 字符串格式化符号:"></a>python 字符串格式化符号:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%c 格式化字符及其ASCII码</span><br><span class="line">%s 格式化字符串</span><br><span class="line">%d 格式化整数</span><br><span class="line">%u 格式化无符号整型</span><br><span class="line">%o 格式化无符号八进制数</span><br><span class="line">%x 格式化无符号十六进制数</span><br><span class="line">%X 格式化无符号十六进制数（大写）</span><br><span class="line">%f 格式化浮点数字，可指定小数点后的精度</span><br><span class="line">%e 用科学计数法格式化浮点数</span><br><span class="line">%E 作用同%e，用科学计数法格式化浮点数</span><br><span class="line">%g %f和%e的简写</span><br><span class="line">%G %F 和 %E 的简写</span><br><span class="line">%p 用十六进制数格式化变量的地址</span><br></pre></td></tr></table></figure><h2 id="格式化操作符辅助指令"><a href="#格式化操作符辅助指令" class="headerlink" title="格式化操作符辅助指令:"></a>格式化操作符辅助指令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*定义宽度或者小数点精度</span><br><span class="line">-用做左对齐</span><br><span class="line">+在正数前面显示加号( + )</span><br><span class="line">&lt;sp&gt;在正数前面显示空格</span><br><span class="line">#在八进制数前面显示零(&#x27;0&#x27;)，在十六进制前面显示&#x27;0x&#x27;或者&#x27;0X&#x27;(取决于用的是&#x27;x&#x27;还是&#x27;X&#x27;)</span><br><span class="line">0显示的数字前面填充&#x27;0&#x27;而不是默认的空格</span><br><span class="line">%&#x27;%%&#x27;输出一个单一的&#x27;%&#x27;</span><br><span class="line">(var)映射变量(字典参数)</span><br><span class="line">m.n.m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</span><br></pre></td></tr></table></figure><h1 id="Unicode-字符串"><a href="#Unicode-字符串" class="headerlink" title="Unicode 字符串"></a>Unicode 字符串</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u&#x27;Hello World !&#x27;</span><br></pre></td></tr></table></figure><h1 id="python的字符串内建函数"><a href="#python的字符串内建函数" class="headerlink" title="python的字符串内建函数"></a>python的字符串内建函数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法描述</span><br><span class="line">string.capitalize()  把字符串的第一个字符大写</span><br><span class="line">string.center(width)  返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</span><br><span class="line">string.count(str, beg=0, end=len(string))  返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数string.decode(encoding=&#x27;UTF-8&#x27;, errors=&#x27;strict&#x27;)   以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 &#x27;ignore&#x27; 或 者&#x27;replace&#x27;string.encode(encoding=&#x27;UTF-8&#x27;, errors=&#x27;strict&#x27;)  以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是&#x27;ignore&#x27;或者&#x27;replace&#x27;</span><br><span class="line">string.endswith(obj, beg=0, end=len(string))  检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</span><br><span class="line">string.expandtabs(tabsize=8)  把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</span><br><span class="line">string.find(str, beg=0, end=len(string))  检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</span><br><span class="line">string.format()  格式化字符串</span><br><span class="line">string.index(str, beg=0, end=len(string))  跟find()方法一样，只不过如果str不在 string中会报一个异常.</span><br><span class="line">string.isalnum()  如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</span><br><span class="line">string.isalpha()  如果 string 至少有一个字符并且所有字符都是字母则返回 True,</span><br><span class="line">否则返回 False</span><br><span class="line">string.isdecimal() 如果 string 只包含十进制数字则返回 True 否则返回 False.</span><br><span class="line">string.isdigit() 如果 string 只包含数字则返回 True 否则返回 False.</span><br><span class="line">string.islower() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</span><br><span class="line">string.isnumeric() 如果 string 中只包含数字字符，则返回 True，否则返回 False</span><br><span class="line">string.isspace() 如果 string 中只包含空格，则返回 True，否则返回 False.</span><br><span class="line">string.istitle() 如果 string 是标题化的(见 title())则返回 True，否则返回 False</span><br><span class="line">string.isupper() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</span><br><span class="line">string.join(seq) 以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</span><br><span class="line">string.ljust(width) 返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</span><br><span class="line">string.lower() 转换 string 中所有大写字符为小写.</span><br><span class="line">string.lstrip() 截掉 string 左边的空格</span><br><span class="line">string.maketrans(intab, outtab) maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</span><br><span class="line">max(str) 返回字符串 str 中最大的字母。</span><br><span class="line">min(str) 返回字符串 str 中最小的字母。</span><br><span class="line">string.partition(str)  有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 </span><br><span class="line">(string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</span><br><span class="line">string.replace(str1, str2,  num=string.count(str1))把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</span><br><span class="line">string.rfind(str, beg=0,end=len(string) ) 类似于 find() 函数，返回字符串最后一次出现的位置，如果没有匹配项则返回 -1。</span><br><span class="line">string.rindex( str, beg=0,end=len(string)) 类似于 index()，不过是返回最后一个匹配到的子字符串的索引号。</span><br><span class="line">string.rjust(width) 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</span><br><span class="line">string.rpartition(str)  类似于 partition()函数,不过是从右边开始查找</span><br><span class="line">string.rstrip()  删除 string 字符串末尾的空格.</span><br><span class="line">string.split(str=&quot;&quot;, num=string.count(str)) 以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+1 个子字符串</span><br><span class="line">string.splitlines([keepends]) 按照行(&#x27;\r&#x27;, &#x27;\r\n&#x27;, &#x27;\n&#x27;)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</span><br><span class="line">string.startswith(obj, beg=0,end=len(string)) 检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</span><br><span class="line">string.strip([obj]) 在 string 上执行 lstrip()和 rstrip()</span><br><span class="line">string.swapcase() 翻转 string 中的大小写</span><br><span class="line">string.title() 返回&quot;标题化&quot;的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</span><br><span class="line">string.translate(str, del=&quot;&quot;) 根据 str 给出的表(包含 256 个字符)转换 string 的字符,</span><br><span class="line">要过滤掉的字符放到 del 参数中</span><br><span class="line">string.upper() 转换 string 中的小写字母为大写</span><br><span class="line">string.zfill(width) 返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借用yolov5实现目标检测自动标注（转）</title>
      <link href="/2022/06/03/%E5%80%9F%E7%94%A8yolov5%E5%AE%9E%E7%8E%B0%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8/"/>
      <url>/2022/06/03/%E5%80%9F%E7%94%A8yolov5%E5%AE%9E%E7%8E%B0%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li><strong><a href="背景：目标检测中的数据标注工作量巨大，本文利用yolov5-v5.0实现自动标注功能，格式为pascal voc">官方地址</a></strong></li></ul><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ul><li>1.利用yolov5先训练小批量样本比如100pcs（yolov5的数据标注以及训练网上有很多教材），得到100pcs的.pt文件</li><li>2.将我给的auto_labelimg.py放到yolov5文件夹下面</li></ul><p><img src="https://img-blog.csdnimg.cn/20210619111744391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5Mzg0OA==,size_16,color_FFFFFF,t_70#pic_center" alt="image"></p><ul><li>3.修改176和178行的weights文件为100pcs的.pt文件，source修改为你需要自动标注的图片文件夹位置</li><li>4.运行auto_labelimg.py会在图片文件夹外面生成annotations文件夹，里面为.xml文件</li><li>5.在labelImg软件里面自行调整自动生成的新.xml文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from utils.datasets import LoadImages, LoadStreams, letterbox</span><br><span class="line">from utils.general import check_img_size, non_max_suppression, scale_coords</span><br><span class="line">from utils.torch_utils import select_device, time_synchronized</span><br><span class="line">import argparse</span><br><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line">from models.experimental import attempt_load</span><br><span class="line">import cv2</span><br><span class="line">import torch</span><br><span class="line">import torch.backends.cudnn as cudnn</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">from xml.etree import ElementTree as ET</span><br><span class="line">import warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(&#x27;ignore&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义一个创建一级分支object的函数</span><br><span class="line">def create_object(root, xi, yi, xa, ya, obj_name):  # 参数依次，树根，xmin，ymin，xmax，ymax</span><br><span class="line">    # 创建一级分支object</span><br><span class="line">    _object = ET.SubElement(root, &#x27;object&#x27;)</span><br><span class="line">    # 创建二级分支</span><br><span class="line">    name = ET.SubElement(_object, &#x27;name&#x27;)</span><br><span class="line">    # print(obj_name)</span><br><span class="line">    name.text = str(obj_name)</span><br><span class="line">    pose = ET.SubElement(_object, &#x27;pose&#x27;)</span><br><span class="line">    pose.text = &#x27;Unspecified&#x27;</span><br><span class="line">    truncated = ET.SubElement(_object, &#x27;truncated&#x27;)</span><br><span class="line">    truncated.text = &#x27;0&#x27;</span><br><span class="line">    difficult = ET.SubElement(_object, &#x27;difficult&#x27;)</span><br><span class="line">    difficult.text = &#x27;0&#x27;</span><br><span class="line">    # 创建bndbox</span><br><span class="line">    bndbox = ET.SubElement(_object, &#x27;bndbox&#x27;)</span><br><span class="line">    xmin = ET.SubElement(bndbox, &#x27;xmin&#x27;)</span><br><span class="line">    xmin.text = &#x27;%s&#x27; % xi</span><br><span class="line">    ymin = ET.SubElement(bndbox, &#x27;ymin&#x27;)</span><br><span class="line">    ymin.text = &#x27;%s&#x27; % yi</span><br><span class="line">    xmax = ET.SubElement(bndbox, &#x27;xmax&#x27;)</span><br><span class="line">    xmax.text = &#x27;%s&#x27; % xa</span><br><span class="line">    ymax = ET.SubElement(bndbox, &#x27;ymax&#x27;)</span><br><span class="line">    ymax.text = &#x27;%s&#x27; % ya</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建xml文件的函数</span><br><span class="line">def create_tree(sources, image_name, h, w):</span><br><span class="line"></span><br><span class="line">    imgdir = sources.split(&#x27;/&#x27;)[-1]</span><br><span class="line">    # 创建树根annotation</span><br><span class="line">    annotation = ET.Element(&#x27;annotation&#x27;)</span><br><span class="line">    # 创建一级分支folder</span><br><span class="line">    folder = ET.SubElement(annotation, &#x27;folder&#x27;)</span><br><span class="line">    # 添加folder标签内容</span><br><span class="line">    folder.text = (imgdir)</span><br><span class="line"></span><br><span class="line">    # 创建一级分支filename</span><br><span class="line">    filename = ET.SubElement(annotation, &#x27;filename&#x27;)</span><br><span class="line">    filename.text = image_name</span><br><span class="line"></span><br><span class="line">    # 创建一级分支path</span><br><span class="line">    path = ET.SubElement(annotation, &#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">    path.text = &#x27;&#123;&#125;/&#123;&#125;&#x27;.format(sources, image_name)  # 用于返回当前工作目录</span><br><span class="line"></span><br><span class="line">    # 创建一级分支source</span><br><span class="line">    source = ET.SubElement(annotation, &#x27;source&#x27;)</span><br><span class="line">    # 创建source下的二级分支database</span><br><span class="line">    database = ET.SubElement(source, &#x27;database&#x27;)</span><br><span class="line">    database.text = &#x27;Unknown&#x27;</span><br><span class="line"></span><br><span class="line">    # 创建一级分支size</span><br><span class="line">    size = ET.SubElement(annotation, &#x27;size&#x27;)</span><br><span class="line">    # 创建size下的二级分支图像的宽、高及depth</span><br><span class="line">    width = ET.SubElement(size, &#x27;width&#x27;)</span><br><span class="line">    width.text = str(w)</span><br><span class="line">    height = ET.SubElement(size, &#x27;height&#x27;)</span><br><span class="line">    height.text = str(h)</span><br><span class="line">    depth = ET.SubElement(size, &#x27;depth&#x27;)</span><br><span class="line">    depth.text = &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">    # 创建一级分支segmented</span><br><span class="line">    segmented = ET.SubElement(annotation, &#x27;segmented&#x27;)</span><br><span class="line">    segmented.text = &#x27;0&#x27;</span><br><span class="line">    return annotation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def detect(opt, model, img, img0):</span><br><span class="line"></span><br><span class="line">    device = select_device(opt.device)</span><br><span class="line">    half = device.type != &#x27;cpu&#x27;  # half precision only supported on CUDA</span><br><span class="line"></span><br><span class="line">    # img = img_transpose(img0, imgsz, 32)</span><br><span class="line">    img = torch.from_numpy(img).to(device)</span><br><span class="line">    img = img.half() if half else img.float()  # uint8 to fp16/32</span><br><span class="line">    img /= 255.0  # 0 - 255 to 0.0 - 1.0</span><br><span class="line">    if img.ndimension() == 3:</span><br><span class="line">        img = img.unsqueeze(0)</span><br><span class="line"></span><br><span class="line">    pred = model(img, augment=opt.augment)[0]</span><br><span class="line"></span><br><span class="line">    # Apply NMS</span><br><span class="line">    pred = non_max_suppression(</span><br><span class="line">        pred, opt.conf_thres, opt.iou_thres, classes=opt.classes, agnostic=opt.agnostic_nms)</span><br><span class="line">    # Process detections</span><br><span class="line">    for i, det in enumerate(pred):  # detections per image</span><br><span class="line">        if det is not None and len(det):</span><br><span class="line">            # Rescale boxes from img_size to im0 size</span><br><span class="line">            det[:, :4] = scale_coords(img.shape[2:], det[:, :4], img0.shape).round()</span><br><span class="line">    return det</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(opt):</span><br><span class="line"></span><br><span class="line">    source,  weights, imgsz, = opt.source, opt.weights, opt.img_size</span><br><span class="line"></span><br><span class="line">    # Initialize</span><br><span class="line">    device = select_device(opt.device)</span><br><span class="line"></span><br><span class="line">    half = device.type != &#x27;cpu&#x27;  # half precision only supported on CUDA</span><br><span class="line"></span><br><span class="line">    # Load model</span><br><span class="line">    model = attempt_load(weights, map_location=device)  # load FP32 model</span><br><span class="line">    stride = int(model.stride.max())  # model stride</span><br><span class="line">    imgsz = check_img_size(imgsz, s=stride)  # check img_size</span><br><span class="line">    if half:</span><br><span class="line">        model.half()  # to FP16</span><br><span class="line"></span><br><span class="line">    img = torch.zeros((1, 3, imgsz, imgsz), device=device)  # init img</span><br><span class="line">    # run once</span><br><span class="line">    _ = model(img.half() if half else img) if device.type != &#x27;cpu&#x27; else None</span><br><span class="line">    # Get names and colors</span><br><span class="line">    names = model.module.names if hasattr(model, &#x27;module&#x27;) else model.names</span><br><span class="line"></span><br><span class="line">    dataset = LoadImages(source, img_size=imgsz, stride=stride)</span><br><span class="line"></span><br><span class="line">    # images_list = os.listdir(source)</span><br><span class="line">    # images_style = [&#x27;.jpg&#x27;, &#x27;.png&#x27;, &#x27;.bmp&#x27;]</span><br><span class="line">    # images_list = [x for x in images_list if x[-4:] in images_style]</span><br><span class="line">    # print(images_list)</span><br><span class="line"></span><br><span class="line">    for path, img, im0s, vid_cap in dataset:</span><br><span class="line">        image_name = os.path.split(path)[-1]</span><br><span class="line">        # print(&#x27;path:&#x27;, path)</span><br><span class="line">        </span><br><span class="line">        # 检测饲料袋</span><br><span class="line">        boxes = detect(opt, model, img, im0s)</span><br><span class="line">        # print(len(boxes))</span><br><span class="line">        (h, w) = im0s.shape[:2]</span><br><span class="line">        annotation = create_tree(source, image_name, h, w)</span><br><span class="line">        # print(annotation)</span><br><span class="line"></span><br><span class="line">        for box in boxes:</span><br><span class="line">            if float(box[4]) &gt; opt.conf_thres:</span><br><span class="line">                x1, y1, x2, y2, label_id = int(box[0]), int(box[1]), int(box[2]), int(box[3]), int(box[5])</span><br><span class="line">                label = names[int(label_id)]</span><br><span class="line">                # print(x1, y1, x2, y2, label)</span><br><span class="line">                create_object(annotation, x1, y1, x2, y2, label)</span><br><span class="line"></span><br><span class="line">        tree = ET.ElementTree(annotation)</span><br><span class="line">        annotation_path_root = source.replace(source.split(&#x27;/&#x27;)[-1], &#x27;annotations&#x27;)</span><br><span class="line">        tree.write(&#x27;&#123;&#125;/&#123;&#125;.xml&#x27;.format(annotation_path_root, image_name[:-4]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(&#x27;--weights&#x27;, type=str,</span><br><span class="line">                        default=&#x27;weights/char_best.pt&#x27;, help=&#x27;model.pt path&#x27;)</span><br><span class="line">    # file/folder, 0 for webcam</span><br><span class="line">    parser.add_argument(&#x27;--source&#x27;, type=str,</span><br><span class="line">                        default=&#x27;/data/video_image_new/char_replace_voc_data/images&#x27;, help=&#x27;source&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--output&#x27;, type=str, default=&#x27;inference/output&#x27;,</span><br><span class="line">                        help=&#x27;output folder&#x27;)  # output folder</span><br><span class="line">    parser.add_argument(&#x27;--img-size&#x27;, type=int, default=1280,</span><br><span class="line">                        help=&#x27;inference size (pixels)&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--conf-thres&#x27;, type=float,</span><br><span class="line">                        default=0.4, help=&#x27;object confidence threshold&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--iou-thres&#x27;, type=float,</span><br><span class="line">                        default=0.5, help=&#x27;IOU threshold for NMS&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--device&#x27;, default=&#x27;0&#x27;,</span><br><span class="line">                        help=&#x27;cuda device, i.e. 0 or 0,1,2,3 or cpu&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--classes&#x27;, nargs=&#x27;+&#x27;, type=int,</span><br><span class="line">                         help=&#x27;filter by class&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--augment&#x27;, action=&#x27;store_true&#x27;,</span><br><span class="line">                        help=&#x27;augmented inference&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--agnostic-nms&#x27;, action=&#x27;store_true&#x27;, help=&#x27;class-agnostic NMS&#x27;)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    args.img_size = check_img_size(args.img_size)</span><br><span class="line">    print(args)</span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        main(args)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>————————————————</p><ul><li>版权声明：本文为CSDN博主「ly3848」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</li><li>原文链接：<a href="https://blog.csdn.net/ly3848/article/details/118050167">https://blog.csdn.net/ly3848/article/details/118050167</a></li></ul><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li>1<a href="https://github.com/ultralytics/yolov5">查看</a></li><li>2<a href="https://blog.csdn.net/qq_43019451/article/details/108546828">查看</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> yolov5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openwrt学习笔记31_45</title>
      <link href="/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B031_45/"/>
      <url>/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B031_45/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="三十一、EPROM烧录备份"><a href="#三十一、EPROM烧录备份" class="headerlink" title="三十一、EPROM烧录备份"></a>三十一、EPROM烧录备份</h1><p><img src="https://img-blog.csdnimg.cn/20210719002014130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>设置虚拟机网卡2桥接无线网卡<br><img src="https://img-blog.csdnimg.cn/20210719002153702.png" alt="image"></li><li>本机网卡连接到Widora-007A<br><img src="https://img-blog.csdnimg.cn/2021071900223738.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719002346117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li><li>192.168.8.1是widora出厂ip</li></ul><p><img src="https://img-blog.csdnimg.cn/20210719002434337.png" alt="image"></p><ul><li>EEPROM在factory分区，备份的对象是mtd2<br><img src="https://img-blog.csdnimg.cn/20210719002638675.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719002710697.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719002746243.png" alt="image"></li></ul><hr><h1 id="三十二、联网"><a href="#三十二、联网" class="headerlink" title="三十二、联网"></a>三十二、联网</h1><p><img src="https://img-blog.csdnimg.cn/20210719002906122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719003021610.png" alt="image"></p><ul><li>确保br-lan与上一级路由器网段不能相同。如果相同，则需要调整</li></ul><p><img src="https://img-blog.csdnimg.cn/20210719003121733.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071900314179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719003241780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>此处，假设上一级路由器网段是192.168.8.x，此处调整为192.168.10.1</li></ul><p><img src="https://img-blog.csdnimg.cn/20210719003355607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>Widora网口默认模式是LAN，需要调整为WAN模式<br><img src="https://img-blog.csdnimg.cn/20210719003444588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li></ul><p><img src="https://img-blog.csdnimg.cn/20210719003625294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>此处，WAN口默认是dhcp<br><img src="https://img-blog.csdnimg.cn/20210719003837290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719003837290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li><li>无线方式连网。<br><img src="https://img-blog.csdnimg.cn/202107190041291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li><li>vi wireless</li></ul><p><img src="https://img-blog.csdnimg.cn/20210719004327101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719004352427.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719004423405.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719004535974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="三十三、-SD卡启动盘制作"><a href="#三十三、-SD卡启动盘制作" class="headerlink" title="三十三、 SD卡启动盘制作"></a>三十三、 SD卡启动盘制作</h1><p> <img src="https://img-blog.csdnimg.cn/20210719122447162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>SD卡第一个分区：512Byte，用于存储分区表信息。即记录每个分区的大小，存储信息的描述等。<br><img src="https://img-blog.csdnimg.cn/20210719123136931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd命令：if = input file； of = output file； count 代表分区的数量。一个分区代表512字节（Byte）</span><br><span class="line"></span><br><span class="line">烧写工具刚好从第1个扇区开始烧写，zero.bin刚好跨过第一个扇区</span><br><span class="line"></span><br><span class="line">u-boot-fs4412.bin 与 zero.bin 合并在一起，刚好组成可以刷的win-u-boot-fs4412.bin，其第一个扇区为空，第二个扇区开始为uboot</span><br><span class="line"></span><br><span class="line">2048个512Byte = 1MByte，用于刷新uboot前清除sd卡。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210719123655328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719123718279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>烧写完uboot后，重启系统<br><img src="https://img-blog.csdnimg.cn/20210719123818601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li></ul><hr><h1 id="三十四、系统移植简介"><a href="#三十四、系统移植简介" class="headerlink" title="三十四、系统移植简介"></a>三十四、系统移植简介</h1><p><img src="https://img-blog.csdnimg.cn/20210719225042698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719225208385.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719225305873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719225330633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719225355840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071922542726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719225522766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071922555658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210719225646926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></h2><h1 id="三十五、环境配置"><a href="#三十五、环境配置" class="headerlink" title="三十五、环境配置"></a>三十五、环境配置</h1><p><img src="https://img-blog.csdnimg.cn/20210719225837832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719225902123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719225954421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230128122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230227671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230309563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230359171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230443251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230531850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230615807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230650151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719230800164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071923084939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231028985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231114850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="三十六、uboot"><a href="#三十六、uboot" class="headerlink" title="三十六、uboot"></a>三十六、uboot</h1><p><img src="https://img-blog.csdnimg.cn/20210719231319786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231337434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231359862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231435958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/202107192315001.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231523257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231545780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231602732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231632901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719231648325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="三十七、tftp加载Linux内核及rootfs"><a href="#三十七、tftp加载Linux内核及rootfs" class="headerlink" title="三十七、tftp加载Linux内核及rootfs"></a>三十七、tftp加载Linux内核及rootfs</h1><p><img src="https://img-blog.csdnimg.cn/20210719232222951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071923225033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232345672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232600528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232627645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/202107192327363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232755324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232832766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232857225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232916855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232939231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719232959981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233018134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233042409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233058345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="三十八、交叉编译工具链"><a href="#三十八、交叉编译工具链" class="headerlink" title="三十八、交叉编译工具链"></a>三十八、交叉编译工具链</h1><p><img src="https://img-blog.csdnimg.cn/20210719233436943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233525543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233542517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233558948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233616509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233632685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233710160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233749884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233808739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233840794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233857468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719233949379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719234023934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719234055197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719234126839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210719234148338.png" alt="image"></h2><h1 id="三十九、"><a href="#三十九、" class="headerlink" title="三十九、*"></a>三十九、<strong><strong>*</strong></strong></h1><hr><h1 id="四十、Linux内核移植"><a href="#四十、Linux内核移植" class="headerlink" title="四十、Linux内核移植"></a>四十、Linux内核移植</h1><p><img src="https://img-blog.csdnimg.cn/20210720225017569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225048613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225132780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225206481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225229964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225247736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225320475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225352254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225456149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225521830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225558580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225658390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225803112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225851491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210720225957490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210720230104822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></h2><h1 id="四十一、Linux-driver-移植"><a href="#四十一、Linux-driver-移植" class="headerlink" title="四十一、Linux driver 移植"></a>四十一、Linux driver 移植</h1><p><img src="https://img-blog.csdnimg.cn/20210721062328392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721062405212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021072106245597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721062534690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721062740301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721063126210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721063246685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721063411112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="四十二、根文件系统移植"><a href="#四十二、根文件系统移植" class="headerlink" title="四十二、根文件系统移植"></a>四十二、根文件系统移植</h1><p><img src="https://img-blog.csdnimg.cn/20210721063702114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721063744880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721063842383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721064014463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721064109786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210721064209719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="四十三、无线相关的基本概念"><a href="#四十三、无线相关的基本概念" class="headerlink" title="四十三、无线相关的基本概念"></a>四十三、无线相关的基本概念</h1><p><img src="https://img-blog.csdnimg.cn/20210723144219446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>AP: 1对多的服务<br>Client: 连接到对端，1对1的方式。 无线网卡一个状态只能工作在一个频段，无法多频率复用。如果实现一对多，就需要实现不同的时间片之间来回切换，网卡不支持。<br>包括virtual ssid，信道也需要设置在一个信道才可以，无法通过virtual ap/virtual ssid设置在不同频段。<br>如果要同时接入多个频段， 需要添置多个网卡才可实现</p><p>中继模式：repeater或wisp模式，实际上是ap模式与client模式合在一起</p><p>WDS：AP1与AP2之间两两之间可以互访，相当于bridge功能<br>Wireless Bridge：broadcom特有功能。apcli0的接口，绑定client<br>普通client无法bridge，通过wireless就可以</p><p>实现apci0通过br0桥接，还需要特殊软件。</p><p><img src="https://img-blog.csdnimg.cn/20210723144612473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>由于观测手法限制，很难直观看出802.11b/g/n/ac等的差别，最直观的是速率<br><img src="https://img-blog.csdnimg.cn/20210723151825139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li></ul><p>Wifi基于调频，OFDM。</p><p>802.11n/ac调制方式后面改变不大，只是通过增加天线数量来提高速率</p><p><img src="https://img-blog.csdnimg.cn/20210723151958381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210723152035162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>MCS在协商速率的时候会用到。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sGI：short gi</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210723152245650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li></ul><p><a href="https://zhuanlan.zhihu.com/p/149176914?from_voters_page=true">https://zhuanlan.zhihu.com/p/149176914?from_voters_page=true</a></p><p><a href="https://www.cnblogs.com/cxt-janson/p/9274259.html">https://www.cnblogs.com/cxt-janson/p/9274259.html</a> </p><p><img src="https://img-blog.csdnimg.cn/20210723152210934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>2.4G：每个channel 5MHz，需要4个channel来组成HT20</p><p>5G：每个channel 20MHz</p><p>HT40+/-是指两个HT20的组合方式，目标HT20与其之前的HT20配对，还是与其后的HT20配对</p><p><img src="https://img-blog.csdnimg.cn/2021072315363726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210723153712923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210723153823259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>40M时，只有channel3能用，8个channel</p><p>20MHz：1/6/11</p><p>802.11推荐使用5G频段，因为5G 20M/Channel</p><p>22MHz：1/6/11/14</p><p>Country Code：定义了不同地区频率的范围<br><img src="https://img-blog.csdnimg.cn/20210723155025259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>BSSID：SSID</p><p>Frame Body：放data的地方<br><img src="https://img-blog.csdnimg.cn/20210723155329164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>Station搜索周边ap的时候，就会用到beacon包，由ap周期性发出，方便station找到ap<br><img src="https://img-blog.csdnimg.cn/20210723155907390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li><li>beacon包，间隔正常为100</li></ul><p><img src="https://img-blog.csdnimg.cn/20210723160043914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>GI越短，性能越好。GI越长，抗干扰性能越好<br><img src="https://img-blog.csdnimg.cn/20210723160400879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><a href="https://download.tek.com/document/37W-29447-2_LR.pdf">https://download.tek.com/document/37W-29447-2_LR.pdf</a></li></ul><p><img src="https://img-blog.csdnimg.cn/20210723161019580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210723161117173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>Green AP：加入系统有3根天线，打开该功能，系统就会关掉两根天线，从而降低功耗</p><p>AP隔离：启动该功能后，Wireliess Client之间就无法实现互访，安全考虑</p><p>Preamble Type：long/short，GI的另一个说法</p><p>DTIM：对应beacon包里面的TIM</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210723161806863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></h2><h1 id="四十四、交叉编译工具使用"><a href="#四十四、交叉编译工具使用" class="headerlink" title="四十四、交叉编译工具使用"></a>四十四、交叉编译工具使用</h1><p><img src="https://img-blog.csdnimg.cn/20210723165034481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210723165154787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210723171038566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725170059904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>ld：产生动态库即相关的链接工作</p><p>ar：产生静态库</p><p>ranlib：库相关的命令，主要用于更新库的路径。<br><img src="https://img-blog.csdnimg.cn/20210725172038188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr2line:是一个可以将指令的地址和可执行映像转换成文件名、函数名和源代码行数的工具</span><br><span class="line"></span><br><span class="line">Gcov工具集：调试，性能优化相关</span><br><span class="line"></span><br><span class="line">gdb：调试</span><br><span class="line"></span><br><span class="line">readelf：看elf文件信息</span><br><span class="line"></span><br><span class="line">strip：裁剪使用</span><br><span class="line"></span><br><span class="line">strings：查看程序里面的字符串</span><br><span class="line"></span><br><span class="line">gprof：查看函数调用了多少次，消耗了多长时间等。</span><br><span class="line"></span><br><span class="line">size：查看程序的代码段、数据段</span><br><span class="line"></span><br><span class="line">objdump、objcopy：obj相关的命令</span><br><span class="line"></span><br><span class="line">nm：查看符号表</span><br><span class="line"></span><br><span class="line">elfedit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210725172318447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>staging_dir 主要存放交叉编译工具链，以及本机需要的一些工具</p><p>toolchain-mipsel_24kc_gcc-7.3.0_musl:交叉编译工具所在目录<br><img src="https://img-blog.csdnimg.cn/20210725172615320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>有上面ls看到的结果，主要有两大区别，有的有-musl，有的没有musl</li></ul><p><img src="https://img-blog.csdnimg.cn/2021072517281732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>通过ls -l查看，发现，二者实际上不是一个东西</p><p>青色的，没有musl的，实际上是用于编译内核，带库</p><p>绿色的，加了-musl是用于编译用户态程序，不带库</p><p>通常，编译内核与编译用户态程序，两套工具是独立的。</p><p>如何使用交叉编译工具链？<br><img src="https://img-blog.csdnimg.cn/2021072517372449.png" alt="image"></p><ul><li>通过pwd，得到当前交叉编译工具链的完整路径，然后vi ~/.bashrc，添加path环境变量</li></ul><p><img src="https://img-blog.csdnimg.cn/2021072517383138.png" alt="image"></p><blockquote><p>如果输入 mipsel-openwrt-linux-   Tab按键有输出如下完整路径，说明环境变量已经配置成功。<br><img src="https://img-blog.csdnimg.cn/20210725173913938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_eabi/bin$ pwd</span><br><span class="line">/home/openwrt/staging_dir/toolchain-arm_cortex-a7+neon-vfpv4_gcc-8.4.0_musl_eabi/bin</span><br><span class="line"> </span><br><span class="line">w@w:/home/openwrt/staging_dir/toolchain-arm_cortex-a7+neon-vfpv4_gcc-8.4.0_musl_eabi/bin$ sudo vim ~/.bashrc</span><br><span class="line">[sudo] password for w: </span><br><span class="line"> </span><br><span class="line">在末尾添加下面两句</span><br><span class="line">PATH=/home/openwrt/staging_dir/toolchain-arm_cortex-a7+neon-vfpv4_gcc-8.4.0_musl_eabi/bin:$PATH</span><br><span class="line">export STAGING_DIR=/home/openwt/staging_dir</span><br><span class="line"> </span><br><span class="line">w@w:/home/openwrt/staging_dir/toolchain-arm_cortex-a7+neon-vfpv4_gcc-8.4.0_musl_eabi/bin$ source ~/.bashrc</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">w@w:/home/openwrt/staging_dir/toolchain-arm_cortex-a7+neon-vfpv4_gcc-8.4.0_musl_eabi/bin$ ls</span><br><span class="line">arm-openwrt-linux-addr2line</span><br><span class="line">arm-openwrt-linux-ar</span><br><span class="line">arm-openwrt-linux-as</span><br><span class="line">arm-openwrt-linux-c++</span><br><span class="line">arm-openwrt-linux-c++filt</span><br><span class="line">arm-openwrt-linux-cpp</span><br><span class="line">arm-openwrt-linux-elfedit</span><br><span class="line">arm-openwrt-linux-g++</span><br><span class="line">arm-openwrt-linux-gcc</span><br><span class="line">arm-openwrt-linux-gcc-8.4.0</span><br><span class="line">arm-openwrt-linux-gcc-ar</span><br><span class="line">arm-openwrt-linux-gcc-nm</span><br><span class="line">arm-openwrt-linux-gcc-ranlib</span><br><span class="line">arm-openwrt-linux-gcov</span><br><span class="line">arm-openwrt-linux-gcov-dump</span><br><span class="line">arm-openwrt-linux-gcov-tool</span><br><span class="line">arm-openwrt-linux-gdb</span><br><span class="line">arm-openwrt-linux-gprof</span><br><span class="line">arm-openwrt-linux-ld</span><br><span class="line">arm-openwrt-linux-ld.bfd</span><br><span class="line">arm-openwrt-linux-muslgnueabi-addr2line</span><br><span class="line">arm-openwrt-linux-muslgnueabi-ar</span><br><span class="line">arm-openwrt-linux-muslgnueabi-as</span><br><span class="line">arm-openwrt-linux-muslgnueabi-c++</span><br><span class="line">arm-openwrt-linux-muslgnueabi-c++filt</span><br><span class="line">arm-openwrt-linux-muslgnueabi-cpp</span><br><span class="line">arm-openwrt-linux-muslgnueabi-elfedit</span><br><span class="line">arm-openwrt-linux-muslgnueabi-g++</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcc</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcc-8.4.0</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcc-ar</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcc-nm</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcc-ranlib</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcov</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcov-dump</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gcov-tool</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gdb</span><br><span class="line">arm-openwrt-linux-muslgnueabi-gprof</span><br><span class="line">arm-openwrt-linux-muslgnueabi-ld</span><br><span class="line">arm-openwrt-linux-muslgnueabi-ld.bfd</span><br><span class="line">arm-openwrt-linux-muslgnueabi-nm</span><br><span class="line">arm-openwrt-linux-muslgnueabi-objcopy</span><br><span class="line">arm-openwrt-linux-muslgnueabi-objdump</span><br><span class="line">arm-openwrt-linux-muslgnueabi-ranlib</span><br><span class="line">arm-openwrt-linux-muslgnueabi-readelf</span><br><span class="line">arm-openwrt-linux-muslgnueabi-size</span><br><span class="line">arm-openwrt-linux-muslgnueabi-strings</span><br><span class="line">arm-openwrt-linux-muslgnueabi-strip</span><br><span class="line">arm-openwrt-linux-nm</span><br><span class="line">arm-openwrt-linux-objcopy</span><br><span class="line">arm-openwrt-linux-objdump</span><br><span class="line">arm-openwrt-linux-ranlib</span><br><span class="line">arm-openwrt-linux-readelf</span><br><span class="line">arm-openwrt-linux-size</span><br><span class="line">arm-openwrt-linux-strings</span><br><span class="line">arm-openwrt-linux-strip</span><br><span class="line">readelf</span><br><span class="line"> </span><br><span class="line">输入arm-openwrt-linux-  Tab案件双击，就会弹出后面的一系列tool</span><br><span class="line">w@w:/home/openwrt/staging_dir/toolchain-arm_cortex-a7+neon-vfpv4_gcc-8.4.0_musl_eabi/bin$ arm-openwrt-linux-</span><br><span class="line">arm-openwrt-linux-addr2line</span><br><span class="line">arm-openwrt-linux-ar</span><br><span class="line">arm-openwrt-linux-as</span><br><span class="line">arm-openwrt-linux-c++</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> GCC使用：</span><br><span class="line">makefile </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210725181025158.png" alt="image"><br>gcc：编译出来的只能在本机使用，mipsel-openwrt-linux-gcc编译出来的东西，只能在路由器上运行。</p><p>ldd工具，可以查看应用程序依赖于哪些库。如果程序运行失败，可以方便查看是哪些库没有调用起来，等等，方便分析。<br><img src="https://img-blog.csdnimg.cn/20210725181344449.png" alt="image"><br>gcc工具自己就可以优化，编译时，一般没有必要再加-O选项自定义优化等级，出发非常了解O0，O1,O2，O3等的区别</p><p>O0一般用于调试，代码转化时，代码不会被优化，方便gdp调试，没有干扰信息。gcc -O0 xxx</p><p>gcc -S hello.c   //可以产生汇编代码<br><img src="https://img-blog.csdnimg.cn/20210725182008583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>通过mipsel-openwrt-linux-gcc -S hello.c 产生mips环境下的汇编代码（mips的汇编，与x86不同）</li></ul><p><img src="https://img-blog.csdnimg.cn/20210725182630457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc：产生中间文件、可执行文件，汇编文件</span><br><span class="line"></span><br><span class="line">.rdata: 数据段</span><br><span class="line"></span><br><span class="line">.text: 代码段</span><br><span class="line"></span><br><span class="line">li：载入立即数</span><br><span class="line"></span><br><span class="line">la：load address</span><br><span class="line"></span><br><span class="line">lw：load word</span><br></pre></td></tr></table></figure></p><ul><li>as的使用<br><img src="https://img-blog.csdnimg.cn/20210725192411845.png" alt="image"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">as:需要先产生中间文件.o，然后通过-ld工具链接生成as文件。</span><br><span class="line"></span><br><span class="line">gcc：不需要中间转换，直接生成目标文件。 很多时候需要先进行链接，再运行</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2021072519293216.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725193032625.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021072519300284.png" alt="image"><br>没有经过链接的.o程序没法执行</li></ul><p>ar 、ld的用法</p><p>ar：用于产生静态库</p><p>ld命令：产生.so文件，动态库</p><p><img src="https://img-blog.csdnimg.cn/20210725193844767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>调用动态库：通过LDFLAGS</p><p><strong>nm</strong><br><img src="https://img-blog.csdnimg.cn/20210725194223587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>第一列是地址，第二列是类型， 第三列：函数的名称</p><p>用到的时候查man手册即可</p><p>addr2line<br><img src="https://img-blog.csdnimg.cn/20210725194844433.png" alt="image"><br>dmesg查看细节，再dmesg最后一行会显示刚才执行代码的错误信息，下面，显示ip<br><img src="https://img-blog.csdnimg.cn/20210725194934652.png" alt="image"><br>使用addr2line -e div 400514 提升，代码的第5行出错。 400514位dmesg dump出来的ip值<br><img src="https://img-blog.csdnimg.cn/20210725195105886.png" alt="image"><br>注：使用add2line调试时，gcc必须打开-g选项。<br><img src="https://img-blog.csdnimg.cn/20210725195318732.png" alt="image"><br><strong> gdb</strong><br><img src="https://img-blog.csdnimg.cn/20210725200018998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725195834607.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725200106419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>gdb打断点：</li></ul><p><img src="https://img-blog.csdnimg.cn/202107252006398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725200750545.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725200811854.png" alt="image"><br>strip</p><p> 移除无用的符号表，节约空间. 如.comment字段</p><p><img src="https://img-blog.csdnimg.cn/20210725201300223.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725201241248.png" alt="image"></p><ul><li>核心代码字段并不会被压缩</li></ul><p><img src="https://img-blog.csdnimg.cn/20210725210920498.png" alt="image"><br>readelf</p><p>用于查看一个程序需要加载多少动态库<br><img src="https://img-blog.csdnimg.cn/2021072520175828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20210725201924439.png" alt="image"></p><p>上面代码执行，发现libexample.so没找到，只需要找到该文件，将其放在/lib/x86_64-linux-gnu/目录下面，代码就可以执行了。</p><p>读符号表<br><img src="https://img-blog.csdnimg.cn/20210725204837570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>elfedit</li></ul><p>用于将elf格式转为其它格式</p><ul><li>gcov</li></ul><p>代码覆盖度测试工具，代码有没有被调用，执行了多少次<br><img src="https://img-blog.csdnimg.cn/20210725202950760.png" alt="image"></p><ul><li>如果要使用gcov工具，gcc必须打开-fprofiles-arcs与-ftest-coverage两个选项。<br><img src="https://img-blog.csdnimg.cn/20210725203128576.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210725203228286.png" alt="image"></li></ul><p>需要先./test执行程序，然后gcov test.c 生成test.c.gcov<br><img src="https://img-blog.csdnimg.cn/20210725203052120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>查看test.c.gcov文件，发现该文件显示了每一行代码的执行次数<br><strong>gprof</strong></li></ul><p>如果使用gprof工具，就需要在gcc中打开-pg选项<br><img src="https://img-blog.csdnimg.cn/20210725203644527.png" alt="image"><br>使用方式：先执行二进制代码，然后调用gprof，显示热门函数的执行次数。<br><img src="https://img-blog.csdnimg.cn/20210725203903958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>objdump</p><p>反汇编,做逆向 ojbdump -S x86-hello</p><p>实际逆向，建议用windows下面的IDA工具</p><p> 读取符号表</p><p>objdump -t x86-hello<br><img src="https://img-blog.csdnimg.cn/20210725205058716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>objcopy</p><p>将elf转为bin格式，移除.comment字段<br><img src="https://img-blog.csdnimg.cn/20210725205255890.png" alt="image"><br>产生资源文件</p><p><strong>strings</strong></p><p>print 二进制相关的内容</p><p>main之前还有init，程序的入口并不是main</p><p>很多makefile，在install之前，都会进行strip动作。<br><img src="https://img-blog.csdnimg.cn/20210725210958955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="四十五、mt76x2e闭源驱动移植-上"><a href="#四十五、mt76x2e闭源驱动移植-上" class="headerlink" title="四十五、mt76x2e闭源驱动移植(上)"></a>四十五、mt76x2e闭源驱动移植(上)</h1><p>mt76x2 代表mt7602与mt7612，一个2G，一个5G驱动。</p><p>mtk共提供了三套SDK，Linux SDK，openwrt SDK，ECOS SDK</p><p>高通提供了两套SDK, QSDK就是openwrt SDK，LSDK就是Linux SDK</p><p>很多时候，厂家已经提供好基于SDK的OpenWRT，自己不需要继续移植。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make meconfig</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210726152627153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210726152753558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>有三个目录：Applications，Drivers，Liraries。 这三个目录都是MTK私有的东西。</p><p>MTK SDK的Kernel是MTK自己维护的，与传统的OpenWRT有区别。MTK代码是没问题，很多时候出错都是Makefile等配置环境的问题。<br><img src="https://img-blog.csdnimg.cn/20210726155054521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>选择Drivers下面的kmod-mt76x2e驱动<br><img src="https://img-blog.csdnimg.cn/20210726155152533.png" alt="image"><br>打开开关后，这些配置信息就会被保存在.config文件里面。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mt76xe：代表pcie</span><br><span class="line"></span><br><span class="line">mt76xu：代表usb</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210726161839603.png" alt="image"></p><ul><li>make menuconfig生成的配置信息，就存在config.in中。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w@w:/home/mtk/openwrt-sdk/package/ramips/drivers/mt76x2e$ cat Makefile </span><br><span class="line"># All rights reserved.</span><br><span class="line">#</span><br><span class="line"># This is free software, licensed under the GNU General Public License v2.</span><br><span class="line"># See /LICENSE for more information.</span><br><span class="line"> </span><br><span class="line">include $(TOPDIR)/rules.mk</span><br><span class="line">include $(INCLUDE_DIR)/kernel.mk</span><br><span class="line"> </span><br><span class="line">PKG_NAME:=mt76x2e</span><br><span class="line">P4REV:=130093</span><br><span class="line">PKG_VERSION:=3.0.4.0</span><br><span class="line"> </span><br><span class="line">PKG_SOURCE:=MT76x2e_MT7620_LinuxAP_V3.0.4.0_DPA_20150617.tar.bz2</span><br><span class="line">PKG_SOURCE_URL:=http://localhost/</span><br><span class="line">PKG_BUILD_DIR:=$(KERNEL_BUILD_DIR)/$(PKG_NAME)-$(PKG_VERSION)</span><br><span class="line"> </span><br><span class="line">PKG_KCONFIG:= \</span><br><span class="line">    RALINK_MT7612E RALINK_MT7620 RLT_AP_SUPPORT WDS_SUPPORT MBSS_SUPPORT ENHANCE_NEW_MBSSID_MODE \</span><br><span class="line">    APCLI_SUPPORT APCLI_CERT_SUPPORT DFS_SUPPORT LLTD_SUPPORT NINTENDO_AP COC_SUPPORT \</span><br><span class="line">    DELAYED_TCP_ACK_SUPPORT RT_FIRST_CARD_EEPROM \</span><br><span class="line">    RT_FIRST_IF_RF_OFFSET RT_SECOND_IF_RF_OFFSET \</span><br><span class="line">    RT_FIRST_CARD RT_SECOND_CARD SNIFFER_SUPPORT CFG80211_SUPPORT \</span><br><span class="line">    RT_FIRST_CARD_EEPROM FIRST_IF_EEPROM_PROM FIRST_IF_EEPROM_EFUSE FIRST_IF_EEPROM_FLASH \</span><br><span class="line">    SECOND_IF_EEPROM_PROM SECOND_IF_EEPROM_EFUSE SECOND_IF_EEPROM_FLASH \</span><br><span class="line">    WIFI_BASIC_FUNC WSC_INCLUDED WSC_V2_SUPPORT WSC_NFC_SUPPORT DOT11N_DRAFT3 DOT11_VHT_AC \</span><br><span class="line">    DOT11W_PMF_SUPPORT TXBF_SUPPORT LLTD_SUPPORT QOS_DLS_SUPPORT \</span><br><span class="line">    CARRIER_DETECTION_SUPPORT IGMP_SNOOP_SUPPORT BLOCK_NET_IF \</span><br><span class="line">    TXBF_SUPPORT RATE_ADAPTION NEW_RATE_ADAPT_SUPPORT AGS_SUPPORT \</span><br><span class="line">    IDS_SUPPORT WIFI_WORK_QUEUE WIFI_SKB_RECYCLE RTMP_FLASH_SUPPORT \</span><br><span class="line">    LED_CONTROL_SUPPORT HW_ANTENNA_DIVERSITY ATE_SUPPORT \</span><br><span class="line">    RT2860V2_AP_V24_DATA_STRUCTURE RT2860V2_AP_32B_DESC MEMORY_OPTIMIZATION \</span><br><span class="line">    RTMP_INTERNAL_TX_ALC RTMP_TEMPERATURE_CALIBRATION HOTSPOT \</span><br><span class="line">    SINGLE_SKU_V2 RLT_MAC RLT_BBP RLT_RF RTMP_MAC RTMP_BBP RTMP_RF \</span><br><span class="line">    RTMP_PCI_SUPPORT RTMP_USB_SUPPORT RTMP_RBUS_SUPPORT DISABLE_EDCCA MULTI_CORE_SUPPORT</span><br><span class="line"> </span><br><span class="line">PKG_CONFIG_DEPENDS:=$(foreach c, $(PKG_KCONFIG),$(if $(CONFIG_$c),CONFIG_$(c)))</span><br><span class="line"> </span><br><span class="line">include $(INCLUDE_DIR)/package.mk</span><br><span class="line"> </span><br><span class="line">TAR_CMD=$(HOST_TAR) -C $(1)/ $(TAR_OPTIONS)</span><br><span class="line"> </span><br><span class="line">define KernelPackage/mt76x2e</span><br><span class="line">  CATEGORY:=MTK Properties</span><br><span class="line">  TITLE:=MTK MT76x2e wifi AP driver</span><br><span class="line">  FILES:=$(PKG_BUILD_DIR)/rlt_wifi_ap/mt76x2e.ko</span><br><span class="line">  DEPENDS:=+kmod-cfg80211</span><br><span class="line">  SUBMENU:=Drivers</span><br><span class="line">  MENU:=1</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define KernelPackage/mt76x2e/config</span><br><span class="line">    source &quot;$(SOURCE)/config.in&quot;</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define P4/Info</span><br><span class="line">  P4URL:=//Embedded_WIFI/MP/MT76x2/MT7612e/AP/rlt_wifi/</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define P4/Release</span><br><span class="line">  make release</span><br><span class="line">  mkdir -p build</span><br><span class="line">  cp os/linux/Makefile.rlt_wifi_ap build/Makefile</span><br><span class="line">  cp os/linux/Kconfig.rlt_wifi_ap build/Kconfig</span><br><span class="line">  mv DPA src</span><br><span class="line">  tar cjf mt76x2e.tar.bz2 build src</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define Build/Compile</span><br><span class="line">    $(MAKE) -C &quot;$(LINUX_DIR)&quot; V=1 \</span><br><span class="line">        CROSS_COMPILE=&quot;$(TARGET_CROSS)&quot; \</span><br><span class="line">        ARCH=&quot;$(LINUX_KARCH)&quot; \</span><br><span class="line">        SUBDIRS=&quot;$(PKG_BUILD_DIR)/rlt_wifi_ap/&quot; \</span><br><span class="line">        $(foreach c, $(PKG_KCONFIG),$(if $(CONFIG_MT76X2E_$c),CONFIG_$(c)=$(CONFIG_MT76X2E_$c)))\</span><br><span class="line">        modules</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define KernelPackage/mt76x2e/install</span><br><span class="line">    $(INSTALL_DIR) $(1)/lib/wifi/</span><br><span class="line">    echo ------------------------------------------------------------------- $(CONFIG_RT_SECOND_CARD)</span><br><span class="line">    if [ &quot;$$(CONFIG_MT76X2E_RT_FIRST_CARD)&quot; = &quot;7602&quot; ] || [ &quot;$$(CONFIG_MT76X2E_RT_FIRST_CARD)&quot; = &quot;7602e&quot; ]; then \</span><br><span class="line">        $(INSTALL_DIR) $(1)/etc/wireless/mt7602e/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/mt7602e.sh $(1)/lib/wifi/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/mt7602e.dat $(1)/etc/wireless/mt7602e/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/mt7602e*.bin $(1)/etc/wireless/mt7602e/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/SingleSKU.dat $(1)/etc/wireless/mt7602/SingleSKU.dat ; \</span><br><span class="line">        echo p$(P4REV) &gt; $(1)/etc/wireless/mt7602e/version; \</span><br><span class="line">    fi</span><br><span class="line">    if [ &quot;$$(CONFIG_MT76X2E_RT_SECOND_CARD)&quot; = &quot;7612&quot; ] || [ &quot;$$(CONFIG_MT76X2E_RT_SECOND_CARD)&quot; = &quot;7612e&quot; ]; then \</span><br><span class="line">        $(INSTALL_DIR) $(1)/etc/wireless/mt7612e/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/mt7612e.sh $(1)/lib/wifi/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/mt7612e.dat $(1)/etc/wireless/mt7612e/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/mt7612e*.bin $(1)/etc/wireless/mt7612e/ ; \</span><br><span class="line">        $(INSTALL_BIN) ./files/SingleSKU.dat $(1)/etc/wireless/mt7612/SingleSKU.dat ; \</span><br><span class="line">        echo p$(P4REV) &gt; $(1)/etc/wireless/mt7612e/version; \</span><br><span class="line">    fi</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">$(eval $(call KernelPackage,mt76x2e))</span><br></pre></td></tr></table></figure><p>PKG_KCONFIG: OpenWRT自定义的名字。内部变量，做其它处理<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define KernelPackage/mt76x2e</span><br><span class="line">  CATEGORY:=MTK Properties</span><br><span class="line">  TITLE:=MTK MT76x2e wifi AP driver</span><br><span class="line">  FILES:=$(PKG_BUILD_DIR)/rlt_wifi_ap/mt76x2e.ko</span><br><span class="line">  DEPENDS:=+kmod-cfg80211</span><br><span class="line">  SUBMENU:=Drivers</span><br><span class="line">  MENU:=1</span><br><span class="line">endef</span><br></pre></td></tr></table></figure><br>上面定义了驱动的名字，目录，二级目录等。下面定义Kconfig文件是config.in</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define KernelPackage/mt76x2e/config</span><br><span class="line">    source &quot;$(SOURCE)/config.in&quot;</span><br><span class="line">endef</span><br></pre></td></tr></table></figure><p>配置文件放在.config文件，并没有放在kernel的.config文件。因此配置modules的时候，<br><img src="https://img-blog.csdnimg.cn/20210726191630280.png" alt="image"></p><p>上面highlight出来的那一句，就是将.config文件中的配置参数转成环境变量，传递到modules里面。</p><p> PKG_KCONFIG:里面的参数是怎么传递的？</p><p>在openwrt-sdk目录下的.config文件，</p><p><img src="https://img-blog.csdnimg.cn/2021072619301172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>这些MT76X2E的配置文件放在 openwrt-sdk下面的.config文件，并没有放在kernel下面的.config文件，此时，make modules时就需要手动的写一串遍历的函数，去把.config里面的文件传递到mudules里面。</p><p>make modules时，无法读取kernel下面的.config文件。make modules的时候只能通过环境变量的方式。</p><p><img src="https://img-blog.csdnimg.cn/20210726201628626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>openwrt主目录下的.config文件里面的各种选项，经过去掉等号，去除前面的#等处理后，可以通过cat confg |awk ‘{print $1 “ “}’ 将关键信息提出出来，该信息就是 “openwrt-sdk/package/ramips/drivers/mt76x2e” 下面的Makefile中“PKG_KCONFIG:=” 后面的内容。</p><p><img src="https://img-blog.csdnimg.cn/20210726203145777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210726202806994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>在实际移植过程中，新建src文件夹，把源代码copy到src目录下。新建config.in 与 Makefile,</p><p>以包的方式比较方便。<br><img src="https://img-blog.csdnimg.cn/20210726205337611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openwrt学习笔记11_20</title>
      <link href="/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011_20/"/>
      <url>/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011_20/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="十一、UCI"><a href="#十一、UCI" class="headerlink" title="十一、UCI"></a>十一、UCI</h1><p><a href="https://openwrt.org/docs/techref/uci">https://openwrt.org/docs/techref/uci</a></p><p><a href="https://openwrt.org/docs/guide-user/base-system/notuci.config">https://openwrt.org/docs/guide-user/base-system/notuci.config</a></p><p><a href="https://openwrt.org/docs/guide-user/base-system/uci">https://openwrt.org/docs/guide-user/base-system/uci</a><br><img src="https://img-blog.csdnimg.cn/2021071310502682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713110735399.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713110815524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713110838330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713110911292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713111526437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713110956508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>Perl/Python/Php（配置脚本语言需要解析器） </p><p>Json/xml/TP/net core</p><p>shell 石像鬼</p><p>luna： luci</p><p>uci：配置文件格式</p><p>network json/xml push 到前台</p><p>shell/c 绑定</p><h1 id="十二、OpenWRT启动过程分析"><a href="#十二、OpenWRT启动过程分析" class="headerlink" title="十二、OpenWRT启动过程分析"></a>十二、OpenWRT启动过程分析</h1><hr><p>CPU上电 — bootloader — kernel — init（openWRT）</p><p>kernel: unix,linux,bsd,ecos…</p><p>OpenWRT/LEDE: System Boot Sequence</p><p><a href="https://oldwiki.archive.openwrt.org/doc/techref/process.boot">https://oldwiki.archive.openwrt.org/doc/techref/process.boot</a></p><p><a href="https://oldwiki.archive.openwrt.org/doc/techref/init.detail.cc">https://oldwiki.archive.openwrt.org/doc/techref/init.detail.cc</a></p><p><a href="https://segmentfault.com/a/1190000002392043">https://segmentfault.com/a/1190000002392043</a></p><p><a href="https://clockworkbird9.wordpress.com/2016/09/29/openwrtlede-system-boot-sequence/">https://clockworkbird9.wordpress.com/2016/09/29/openwrtlede-system-boot-sequence/</a></p><p><a href="http://wiki.dreamrunner.org/public_html/Communication/OpenWrt/OpenWrtBootProcess-NewOpenWrt.html">http://wiki.dreamrunner.org/public_html/Communication/OpenWrt/OpenWrtBootProcess-NewOpenWrt.html</a></p><ul><li>OpenWrt Boot Process (New OpenWrt)</li><li>Table of Contents<blockquote><ul><li>一个boot log的例子:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[    2.602573] VFS: Mounted root (squashfs filesystem) readonly on device 31:2.</span><br><span class="line">[    2.610535] Freeing unused kernel memory: 224K (80428000 - 80460000)</span><br><span class="line">[    3.912151] init: Console is alive</span><br><span class="line">[    3.916056] init: - watchdog -</span><br><span class="line">[    6.994992] init: - preinit -</span><br><span class="line">Press the [f] key and hit [enter] to enter failsafe mode</span><br><span class="line">Press the [1], [2], [3] or [4] key and hit [enter] to select the debug level</span><br><span class="line">Before mount_root</span><br><span class="line">[   10.352510] jffs2: notice: (401) jffs2_build_xattr_subsystem: complete building xattr subsystem, 0 of xdatum (0 unchecked, 0 orphan) and 0 of xref (0 dead, 0 orphan) found.</span><br><span class="line">[   10.369525] mount_root: switching to jffs2 overlay</span><br><span class="line">[   10.540372] procd: - early -</span><br><span class="line">[   10.543495] procd: - watchdog -</span><br><span class="line">[   11.303217] procd: - ubus -</span><br><span class="line">[   12.307928] random: ubusd: uninitialized urandom read (4 bytes read, 53 bits of entropy available)</span><br><span class="line">[   12.439119] procd: - init -</span><br><span class="line">Please press Enter to activate this console.</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li><ol><li>Boot<ul><li>1). <strong>Bootloader 比如U-Boot, 配置底层硬件,加载Linux kernel 和 device tree blob, 最后传入kernel cmdline跳转到Linux kernel image.</strong></li><li>2). <strong>高通的Secure boot会复杂点,先PBL(Primary Boot Loader), 然后 SBL1(Second BootLoader stage 1) 初始化buses、DDR、clocks等, SBL1 移交运行控制权给QSEE。QSEE建立安全运行环境，配置xPU，支持fuse, 之后才转入APPSBL即为BootLoader, 跳转到HLOS(High LevelOperating System) 即为Linux kernel.</strong></li></ul></li></ol></li><li><ol><li>Kernel init Hareware<br>Linux Kernel 将继续初始化外围硬件.</li></ol></li><li><ol><li>Kernel -&gt; Filesystem<br>Mount the root filesystem (通过kernel cmdline中的诸如参数 root=, rootfstype=).</li></ol></li><li><ol><li>Kernel -&gt; Init Process<br>最后kernel启动 init 进程 (PID 1).</li></ol></li><li><ol><li>Run preinit<br>再procd接管前, preinit会对系统做一些前期的初始工作.</li></ol></li><li><ol><li>Run procd<br>一旦preinit完成,它将exec procd. 这将用procd取代原来pid1的init进程. watchdog的file descriptor不会被关闭, 而是传入到procd进程.</li></ol></li></ul><p>OpenWrt系统从第4步开始. 在OpenWrt系统中, 这个init初始化进程不是普通 Linux中一个初始进程, 而是专为OpenWrt写的一个shell脚本.</p><h2 id="preinit"><a href="#preinit" class="headerlink" title="preinit"></a>preinit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/preinit</span><br></pre></td></tr></table></figure><p>无论Linux什么版本, OpenWrt都会有类似如下的patch,把OpenWrt的init进程放在第一个位置:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- a/init/main.c</span><br><span class="line">+++ b/init/main.c</span><br><span class="line">@@ -963,7 +963,8 @@ static int __ref kernel_init(void *unuse</span><br><span class="line">                pr_err(&quot;Failed to execute %s (error %d).  Attempting defaults...\n&quot;,</span><br><span class="line">                        execute_command, ret);</span><br><span class="line">        &#125;</span><br><span class="line">-       if (!try_to_run_init_process(&quot;/sbin/init&quot;) ||</span><br><span class="line">+       if (!try_to_run_init_process(&quot;/etc/preinit&quot;) ||</span><br><span class="line">+           !try_to_run_init_process(&quot;/sbin/init&quot;) ||</span><br><span class="line">            !try_to_run_init_process(&quot;/etc/init&quot;) ||</span><br><span class="line">            !try_to_run_init_process(&quot;/bin/init&quot;) ||</span><br><span class="line">            !try_to_run_init_process(&quot;/bin/sh&quot;))</span><br></pre></td></tr></table></figure><p>/etc/preinit 如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># Copyright (C) 2006 OpenWrt.org</span><br><span class="line"># Copyright (C) 2010 Vertical Communications</span><br><span class="line"> </span><br><span class="line">[ -z &quot;$PREINIT&quot; ] &amp;&amp; exec /sbin/init</span><br><span class="line"> </span><br><span class="line">export PATH=/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"> </span><br><span class="line">pi_ifname=</span><br><span class="line">pi_ip=192.168.1.1</span><br><span class="line">pi_broadcast=192.168.1.255</span><br><span class="line">pi_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_ifname=</span><br><span class="line">fs_failsafe_ip=192.168.1.1</span><br><span class="line">fs_failsafe_broadcast=192.168.1.255</span><br><span class="line">fs_failsafe_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_wait_timeout=0</span><br><span class="line"> </span><br><span class="line">pi_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_path=&quot;/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">pi_init_cmd=&quot;/sbin/init&quot;</span><br><span class="line"> </span><br><span class="line">. /lib/functions.sh</span><br><span class="line">. /lib/functions/preinit.sh</span><br><span class="line">. /lib/functions/system.sh</span><br><span class="line"> </span><br><span class="line">boot_hook_init preinit_essential</span><br><span class="line">boot_hook_init preinit_main</span><br><span class="line">boot_hook_init failsafe</span><br><span class="line">boot_hook_init initramfs</span><br><span class="line">boot_hook_init preinit_mount_root</span><br><span class="line"> </span><br><span class="line">for pi_source_file in /lib/preinit/*; do</span><br><span class="line">        . $pi_source_file</span><br><span class="line">done</span><br><span class="line"> </span><br><span class="line">boot_run_hook preinit_essential</span><br><span class="line"> </span><br><span class="line">pi_mount_skip_next=false</span><br><span class="line">pi_jffs2_mount_success=false</span><br><span class="line">pi_failsafe_net_message=false</span><br><span class="line"> </span><br><span class="line">boot_run_hook preinit_main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里第一行命令是:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ -z &quot;$PREINIT&quot; ] &amp;&amp; exec /sbin/init</span><br></pre></td></tr></table></figure><br>PREINIT 还没有define, 所以执行 /sbin/init. 这个程序来自package procd.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/init</span><br></pre></td></tr></table></figure></p><ul><li>package procd中 init.c 的main函数基本流程如下:1<br><img src="https://img-blog.csdnimg.cn/img_convert/3e7863390805a93a4fdf4a7607b42d34.png" alt="image"></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. early()</span><br><span class="line">early_mounts(): mount /proc /sys/&#123;,fs/cgroup&#125; /dev/&#123;,shm,pts&#125; 等;</span><br><span class="line">early_console(): 初始化 /dev/console;</span><br><span class="line">early_env();: PATH 配置成 /bin:/sbin:/usr/bin:/usr/sbin;</span><br><span class="line">打印出最上面bootlog实例中的一个message &quot;Console is alive&quot;;</span><br><span class="line">2. cmdline(): get_cmdline_val(&quot;init_debug&quot;, line, sizeof(line)); 从 /proc/cmdline 中读取kernel boot commands,并解析出 init_debug 的值</span><br><span class="line">3. watchdog_init(1): 先从env的 WDTFD 中获取watchdog的fd,若不存在, 就尝试打开 /dev/watchdog. 并初始化watchdog, 最后打印出最上面 bootlog实例中的message &quot;- watchdog -&quot;</span><br><span class="line">4. fork 一个新的进程来让 /sbin/kmodloader 从 /etc/modules-boot.d/ 加载device drivers (注意,这里加载的是boot期间的drivers而不是 /etc/modules.d/)</span><br><span class="line">5. uloop_init() 初始化uloop (event loop implementation, 来自package libubox). 之后procd和 sh /etc/preinit 将由uloop管理;</span><br><span class="line">6. preinit()</span><br><span class="line">打印最上面的第三条信息 &quot;- preinit -&quot;</span><br><span class="line">fork一个新的进程执行 /sbin/procd -h /etc/hotplug-preinit.json, 并在完后执行一个callback function plugd_proc_cb (仅仅做了 proc-&gt;pid = 0; )</span><br><span class="line">setenv(&quot;PREINIT&quot;, &quot;1&quot;, 1);</span><br><span class="line">fork一个新的进程执行 sh /etc/preinit , 并在完后执行一个callback function spawn_procd, spawn_procd 将wdtfd设置到env中的WDTFD, 从 /tmp/debuglevel 读取的 debug level设置到env中的DBGLVL. 最后 fork一个新进程执行 /sbin/procd</span><br><span class="line">7. uloop_run(): 最后由uloop接管</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="再次执行-etc-preinit"><a href="#再次执行-etc-preinit" class="headerlink" title="再次执行 /etc/preinit"></a>再次执行 /etc/preinit</h2><p>init进程再次执行 /etc/preinit, 第一部分如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"> </span><br><span class="line">pi_ifname=</span><br><span class="line">pi_ip=192.168.1.1</span><br><span class="line">pi_broadcast=192.168.1.255</span><br><span class="line">pi_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_ifname=</span><br><span class="line">fs_failsafe_ip=192.168.1.1</span><br><span class="line">fs_failsafe_broadcast=192.168.1.255</span><br><span class="line">fs_failsafe_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_wait_timeout=0</span><br><span class="line"> </span><br><span class="line">pi_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_path=&quot;/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">pi_init_cmd=&quot;/sbin/init&quot;</span><br></pre></td></tr></table></figure><p>如上仅仅定义些变量.</p><p>从如下地方定义一些函数:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. /lib/functions.sh</span><br><span class="line">. /lib/functions/preinit.sh</span><br><span class="line">. /lib/functions/system.sh</span><br></pre></td></tr></table></figure></p><p>定义在 /lib/functions/preinit.sh 中的 boot_hook_init 被用来初始化如下hook<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boot_hook_init preinit_essential</span><br><span class="line">boot_hook_init preinit_main</span><br><span class="line">boot_hook_init failsafe</span><br><span class="line">boot_hook_init initramfs</span><br><span class="line">boot_hook_init preinit_mount_root</span><br></pre></td></tr></table></figure><br>/lib/preinit/ 下的脚本都被执行. 这些脚本主要通过 boot_hook_add 来添加各个hook函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for pi_source_file in /lib/preinit/*; do</span><br><span class="line">        . $pi_source_file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>最后分别执行 preinit_essential 和 preinit_main 中的hook函数.<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boot_run_hook preinit_essential</span><br><span class="line">boot_run_hook preinit_main</span><br></pre></td></tr></table></figure></p><h2 id="procd"><a href="#procd" class="headerlink" title="procd"></a>procd</h2><p>OpenWrt使用 procd 来启动系统,管理进程和处理部分kernel与用户层的交互.</p><p>procd 首先做一些初始化工作, setsid(); 设置自己成为进程组的所有者, uloop_init(); 为后续 uloop_run 做初始化, procd_signal(); 设置好 signals.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void procd_signal(void)</span><br><span class="line">&#123;</span><br><span class="line">        signal(SIGPIPE, SIG_IGN);</span><br><span class="line">        if (getpid() != 1)</span><br><span class="line">                return;</span><br><span class="line">        sigaction(SIGTERM, &amp;sa_shutdown, NULL);</span><br><span class="line">        sigaction(SIGINT, &amp;sa_shutdown, NULL);</span><br><span class="line">        sigaction(SIGUSR1, &amp;sa_shutdown, NULL);</span><br><span class="line">        sigaction(SIGUSR2, &amp;sa_shutdown, NULL);</span><br><span class="line">        sigaction(SIGSEGV, &amp;sa_crash, NULL);</span><br><span class="line">        sigaction(SIGBUS, &amp;sa_crash, NULL);</span><br><span class="line">        sigaction(SIGHUP, &amp;sa_dummy, NULL);</span><br><span class="line">        sigaction(SIGKILL, &amp;sa_dummy, NULL);</span><br><span class="line">        sigaction(SIGSTOP, &amp;sa_dummy, NULL);</span><br><span class="line">        reboot(RB_DISABLE_CAD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>procd 共有6个状态, STATE_EARLY, STATE_UBUS, STATE_INIT, STATE_RUNNING, STATE_SHUTDOWN 和 STATE_HALT, procd 的状态从第一个直到最后一个.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void state_enter(void)</span><br><span class="line">&#123;</span><br><span class="line">        char ubus_cmd[] = &quot;/sbin/ubusd&quot;;</span><br><span class="line"> </span><br><span class="line">        switch (state) &#123;</span><br><span class="line">        case STATE_EARLY:</span><br><span class="line">                LOG(&quot;- early -\n&quot;);</span><br><span class="line">                watchdog_init(0);</span><br><span class="line">                hotplug(&quot;/etc/hotplug.json&quot;);</span><br><span class="line">                procd_coldplug();</span><br><span class="line">                break;</span><br><span class="line"> </span><br><span class="line">        case STATE_UBUS:</span><br><span class="line">                // try to reopen incase the wdt was not available before coldplug</span><br><span class="line">                watchdog_init(0);</span><br><span class="line">                set_stdio(&quot;console&quot;);</span><br><span class="line">                LOG(&quot;- ubus -\n&quot;);</span><br><span class="line">                procd_connect_ubus();</span><br><span class="line">                service_init();</span><br><span class="line">                service_start_early(&quot;ubus&quot;, ubus_cmd);</span><br><span class="line">                break;</span><br><span class="line"> </span><br><span class="line">        case STATE_INIT:</span><br><span class="line">                LOG(&quot;- init -\n&quot;);</span><br><span class="line">                procd_inittab();</span><br><span class="line">                procd_inittab_run(&quot;respawn&quot;);</span><br><span class="line">                procd_inittab_run(&quot;askconsole&quot;);</span><br><span class="line">                procd_inittab_run(&quot;askfirst&quot;);</span><br><span class="line">                procd_inittab_run(&quot;sysinit&quot;);</span><br><span class="line"> </span><br><span class="line">                // switch to syslog log channel</span><br><span class="line">                ulog_open(ULOG_SYSLOG, LOG_DAEMON, &quot;procd&quot;);</span><br><span class="line">                break;</span><br><span class="line"> </span><br><span class="line">        case STATE_RUNNING:</span><br><span class="line">                LOG(&quot;- init complete -\n&quot;);</span><br><span class="line">                break;</span><br><span class="line"> </span><br><span class="line">        case STATE_SHUTDOWN:</span><br><span class="line">                /* Redirect output to the console for the users&#x27; benefit */</span><br><span class="line">                set_console();</span><br><span class="line">                LOG(&quot;- shutdown -\n&quot;);</span><br><span class="line">                procd_inittab_run(&quot;shutdown&quot;);</span><br><span class="line">                sync();</span><br><span class="line">                break;</span><br><span class="line"> </span><br><span class="line">        case STATE_HALT:</span><br><span class="line">                // To prevent killed processes from interrupting the sleep</span><br><span class="line">                signal(SIGCHLD, SIG_IGN);</span><br><span class="line">                LOG(&quot;- SIGTERM processes -\n&quot;);</span><br><span class="line">                kill(-1, SIGTERM);</span><br><span class="line">                sync();</span><br><span class="line">                sleep(1);</span><br><span class="line">                LOG(&quot;- SIGKILL processes -\n&quot;);</span><br><span class="line">                kill(-1, SIGKILL);</span><br><span class="line">                sync();</span><br><span class="line">                sleep(1);</span><br><span class="line">                if (reboot_event == RB_POWER_OFF)</span><br><span class="line">                        LOG(&quot;- power down -\n&quot;);</span><br><span class="line">                else</span><br><span class="line">                        LOG(&quot;- reboot -\n&quot;);</span><br><span class="line"> </span><br><span class="line">                /* Allow time for last message to reach serial console, etc */</span><br><span class="line">                sleep(1);</span><br><span class="line"> </span><br><span class="line">                /* We have to fork here, since the kernel calls do_exit(EXIT_SUCCESS)</span><br><span class="line">                 * in linux/kernel/sys.c, which can cause the machine to panic when</span><br><span class="line">                 * the init process exits... */</span><br><span class="line">                if (!vfork( )) &#123; /* child */</span><br><span class="line">                        reboot(reboot_event);</span><br><span class="line">                        _exit(EXIT_SUCCESS);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                while (1)</span><br><span class="line">                        sleep(1);</span><br><span class="line">                break;</span><br><span class="line"> </span><br><span class="line">        default:</span><br><span class="line">                ERROR(&quot;Unhandled state %d\n&quot;, state);</span><br><span class="line">                return;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STATE-EARLY"><a href="#STATE-EARLY" class="headerlink" title="STATE_EARLY"></a>STATE_EARLY</h2><ul><li>watchdog_init(0); 初始化watchdog;</li><li>hotplug(“/etc/hotplug.json”); 将根据 /etc/hotplug.json 中定义的规则来监视hotplug event;</li><li>procd_coldplug(); 重新mount /dev , fork新进程来运行 * udevtrigger, 它将产生coldplug events来让hotplug监视;</li><li>当 =udevtrigger 完成, callback函数 udevtrigger_complete 中最后将调用 procd_state_next() 来使得状态从 STATE_EARLY 到 STATE_UBUS.;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void coldplug_complete(struct uloop_timeout *t)</span><br><span class="line">&#123;</span><br><span class="line">        DEBUG(4, &quot;Coldplug complete\n&quot;);</span><br><span class="line">        hotplug_last_event(NULL);</span><br><span class="line">        procd_state_next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STATE-UBUS"><a href="#STATE-UBUS" class="headerlink" title="STATE_UBUS"></a>STATE_UBUS</h2></li></ul><ol><li>watchdog_init(0); 再次初始化watchdog, 防止在coldplug之前watchdog不可用;</li><li>set_stdio(“console”); 设置stdin/out/err 到 /dev/console;</li><li>procd_connect_ubus(); 定义一个定时器不断去connect ubusd 即使这里 ubusd 还没创建好. 当 procd 之后连上 ubusd, 它将注册services, main_objec, system_object 和 watch_event .;</li><li>ubus_connect(ubus_socket); 这里用的是 /var/run/ubus.sock（UBUS_UNIX_SOCKET), 连上ubus后, procd_state_ubus_connect() 进入 STATE_INIT;</li><li>service_init(); 为之后services和validators的管理初始化ALV tree;</li><li>service_start_early(“ubus”, ubus_cmd); 开始 ubusd 后台服务;</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">ubus_connect_cb(struct uloop_timeout *timeout)</span><br><span class="line">&#123;</span><br><span class="line">        ctx = ubus_connect(ubus_socket);</span><br><span class="line"> </span><br><span class="line">        if (!ctx) &#123;</span><br><span class="line">                DEBUG(4, &quot;Connection to ubus failed\n&quot;);</span><br><span class="line">                uloop_timeout_set(&amp;ubus_timer, 1000);</span><br><span class="line">                return;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ctx-&gt;connection_lost = ubus_disconnect_cb;</span><br><span class="line">        ubus_init_service(ctx);</span><br><span class="line">        ubus_init_system(ctx);</span><br><span class="line">        watch_ubus(ctx);</span><br><span class="line"> </span><br><span class="line">        DEBUG(2, &quot;Connected to ubus, id=%08x\n&quot;, ctx-&gt;local_id);</span><br><span class="line">        ubus_add_uloop(ctx);</span><br><span class="line">        procd_state_ubus_connect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STATE-INIT"><a href="#STATE-INIT" class="headerlink" title="STATE_INIT"></a>STATE_INIT</h2><ul><li>根据 handlers[] 中定义, procd在inittab中支持5个命令:<ul><li>respawn - this works just like you expect it. It starts a process and will respawn it once it has completed.</li><li>respawnlate - this works like the respawn but will start the process only when the procd init is completed.</li><li>askfirst - this works just like respawn but will print the line “Please press Enter to activate this console.” before starting the process</li><li>askconsole - this works like askfirst but, instead of running on the tty passed as a parameter, it will look for the tty defined in the kernel command line using “console=”</li><li>askconsolelate - this works like the askconsole but will start the process only when the procd init is completed.</li><li>sysinit - this will trigger procd to run the command, given as a parameter, only once. This is usually used to trigger execution of /etc/rc.d/</li><li>procd_inittab(); 读取 /etc/inittab , 初始化actions表</li><li>procd_inittab_run 依次run<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">procd_inittab_run(&quot;respawn&quot;);</span><br><span class="line">procd_inittab_run(&quot;askconsole&quot;);</span><br><span class="line">procd_inittab_run(&quot;askfirst&quot;);</span><br><span class="line">procd_inittab_run(&quot;sysinit&quot;)</span><br></pre></td></tr></table></figure></li><li>procd_inittab_run 会与 /etc/inittab 创建的actions表对比, 只运行其中定义的<ul><li>askconsole –&gt; askfirst() 和 sysinit –&gt; runrc()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/etc/inittab</span><br><span class="line">::sysinit:/etc/init.d/rcS S boot</span><br><span class="line">::shutdown:/etc/init.d/rcS K shutdown</span><br><span class="line">::askconsole:/bin/ash --login</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static struct init_handler handlers[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                .name = &quot;sysinit&quot;,</span><br><span class="line">                .cb = runrc,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;shutdown&quot;,</span><br><span class="line">                .cb = runrc,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;askfirst&quot;,</span><br><span class="line">                .cb = askfirst,</span><br><span class="line">                .multi = 1,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;askconsole&quot;,</span><br><span class="line">                .cb = askconsole,</span><br><span class="line">                .multi = 1,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;respawn&quot;,</span><br><span class="line">                .cb = rcrespawn,</span><br><span class="line">                .multi = 1,</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static char *ask = &quot;/sbin/askfirst&quot;;</span><br><span class="line"> </span><br><span class="line">static void askconsole(struct init_action *a)</span><br><span class="line">&#123;</span><br><span class="line">        char line[256], *tty, *split;</span><br><span class="line">        int i;</span><br><span class="line"> </span><br><span class="line">        tty = get_cmdline_val(&quot;console&quot;, line, sizeof(line));</span><br><span class="line">        if (tty != NULL) &#123;</span><br><span class="line">                split = strchr(tty, &#x27;,&#x27;);</span><br><span class="line">                if (split != NULL)</span><br><span class="line">                        *split = &#x27;\0&#x27;;</span><br><span class="line"> </span><br><span class="line">                if (!dev_exist(tty)) &#123;</span><br><span class="line">                        DEBUG(4, &quot;skipping %s\n&quot;, tty);</span><br><span class="line">                        return;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                console = strdup(tty);</span><br><span class="line">                a-&gt;id = strdup(tty);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">                console = NULL;</span><br><span class="line">                a-&gt;id = NULL;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        a-&gt;tout.cb = respawn;</span><br><span class="line">        for (i = MAX_ARGS - 1; i &gt;= 1; i--)</span><br><span class="line">                a-&gt;argv[i] = a-&gt;argv[i - 1];</span><br><span class="line">        a-&gt;argv[0] = ask;</span><br><span class="line">        a-&gt;respawn = 500;</span><br><span class="line"> </span><br><span class="line">        a-&gt;proc.cb = child_exit;</span><br><span class="line">        fork_worker(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void runrc(struct init_action *a)</span><br><span class="line">&#123;</span><br><span class="line">        if (!a-&gt;argv[1] || !a-&gt;argv[2]) &#123;</span><br><span class="line">                ERROR(&quot;valid format is rcS &lt;S|K&gt; &lt;param&gt;\n&quot;);</span><br><span class="line">                return;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        /* proceed even if no init or shutdown scripts run */</span><br><span class="line">        if (rcS(a-&gt;argv[1], a-&gt;argv[2], rcdone))</span><br><span class="line">                rcdone(NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="STATE-RUNNING"><a href="#STATE-RUNNING" class="headerlink" title="STATE_RUNNING"></a>STATE_RUNNING</h2><p>基本的系统起来了, procd在 uloop_run() 中执行, 开始管理daemons和 services.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">procd/initd/init.c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int</span><br><span class="line">main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">        pid_t pid;</span><br><span class="line"> </span><br><span class="line">        ulog_open(ULOG_KMSG, LOG_DAEMON, &quot;init&quot;);</span><br><span class="line"> </span><br><span class="line">        sigaction(SIGTERM, &amp;sa_shutdown, NULL);</span><br><span class="line">        sigaction(SIGUSR1, &amp;sa_shutdown, NULL);</span><br><span class="line">        sigaction(SIGUSR2, &amp;sa_shutdown, NULL);</span><br><span class="line"> </span><br><span class="line">        early();</span><br><span class="line">        cmdline();</span><br><span class="line">        watchdog_init(1);</span><br><span class="line"> </span><br><span class="line">        pid = fork();</span><br><span class="line">        if (!pid) &#123;</span><br><span class="line">                char *kmod[] = &#123; &quot;/sbin/kmodloader&quot;, &quot;/etc/modules-boot.d/&quot;, NULL &#125;;</span><br><span class="line"> </span><br><span class="line">                if (debug &lt; 3) &#123;</span><br><span class="line">                        int fd = open(&quot;/dev/null&quot;, O_RDWR);</span><br><span class="line"> </span><br><span class="line">                        if (fd &gt; -1) &#123;</span><br><span class="line">                                dup2(fd, STDIN_FILENO);</span><br><span class="line">                                dup2(fd, STDOUT_FILENO);</span><br><span class="line">                                dup2(fd, STDERR_FILENO);</span><br><span class="line">                                if (fd &gt; STDERR_FILENO)</span><br><span class="line">                                        close(fd);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                execvp(kmod[0], kmod);</span><br><span class="line">                ERROR(&quot;Failed to start kmodloader\n&quot;);</span><br><span class="line">                exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">        if (pid &lt;= 0) &#123;</span><br><span class="line">                ERROR(&quot;Failed to start kmodloader instance\n&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">                int i;</span><br><span class="line">                for (i = 0; i &lt; 120; i++) &#123;</span><br><span class="line">                        if (waitpid(pid, NULL, WNOHANG) &gt; 0)</span><br><span class="line">                                break;</span><br><span class="line">                        sleep(1);</span><br><span class="line">                        watchdog_ping();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        uloop_init();</span><br><span class="line">        preinit();</span><br><span class="line">        uloop_run();</span><br><span class="line"> </span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>struct init_handler handlers[]<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static struct init_handler handlers[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">                .name = &quot;sysinit&quot;,</span><br><span class="line">                .cb = runrc,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;shutdown&quot;,</span><br><span class="line">                .cb = runrc,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;askfirst&quot;,</span><br><span class="line">                .cb = askfirst,</span><br><span class="line">                .multi = 1,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;askconsole&quot;,</span><br><span class="line">                .cb = askconsole,</span><br><span class="line">                .multi = 1,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">                .name = &quot;respawn&quot;,</span><br><span class="line">                .cb = rcrespawn,</span><br><span class="line">                .multi = 1,</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int rcS(char *pattern, char *param, void (*q_empty)(struct runqueue *))</span><br><span class="line">&#123;</span><br><span class="line">        runqueue_init(&amp;q);</span><br><span class="line">        q.empty_cb = q_empty;</span><br><span class="line">        q.max_running_tasks = 1;</span><br><span class="line"> </span><br><span class="line">        return _rc(&amp;q, &quot;/etc/rc.d&quot;, pattern, &quot;*&quot;, param);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static int _rc(struct runqueue *q, char *path, const char *file, char *pattern, char *param)</span><br><span class="line">&#123;</span><br><span class="line">        char *dir = alloca(2 + strlen(path) + strlen(file) + strlen(pattern));</span><br><span class="line">        glob_t gl;</span><br><span class="line">        int j;</span><br><span class="line"> </span><br><span class="line">        if (!dir) &#123;</span><br><span class="line">                ERROR(&quot;Out of memory in %s.\n&quot;, file);</span><br><span class="line">                return -1;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        DEBUG(2, &quot;running %s/%s%s %s\n&quot;, path, file, pattern, param);</span><br><span class="line">        sprintf(dir, &quot;%s/%s%s&quot;, path, file, pattern);</span><br><span class="line">        if (glob(dir, GLOB_NOESCAPE | GLOB_MARK, NULL, &amp;gl)) &#123;</span><br><span class="line">                DEBUG(2, &quot;glob failed on %s\n&quot;, dir);</span><br><span class="line">                return -1;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        for (j = 0; j &lt; gl.gl_pathc; j++)</span><br><span class="line">                add_initd(q, gl.gl_pathv[j], param);</span><br><span class="line">        globfree(&amp;gl);</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void rcdone(struct runqueue *q)</span><br><span class="line">&#123;</span><br><span class="line">        procd_state_next();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul><h2 id="OpenWRT-LEDE-System-Boot-Sequence"><a href="#OpenWRT-LEDE-System-Boot-Sequence" class="headerlink" title="OpenWRT/LEDE: System Boot Sequence"></a>OpenWRT/LEDE: System Boot Sequence</h2><p>Posted on 2016-09-29 by ClockworkBird</p><p>In this article I will try to summary and analyze the boot sequnece of OpenWRT system in details.</p><p>Hardware</p><p>ci40</p><p>Software</p><p>OpenWRT for ci40</p><p>You may find difference amound different OpenWRT version and LEDE. But I believe that it won’t affect the understanding.</p><p>Example boot log from ci40<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 2.824545] VFS: Mounted root (ext4 filesystem) readonly on device 179:1.</span><br><span class="line">[ 2.833446] Freeing unused kernel memory: 244K (84733000 - 84770000)</span><br><span class="line">[ 3.006884] init: Console is alive</span><br><span class="line">[ 3.011436] init: - watchdog -</span><br><span class="line">[ 3.329383] init: - preinit -</span><br><span class="line">[ 6.570976] mount_root: mounting /dev/root</span><br><span class="line">[ 6.579281] EXT4-fs (mmcblk0p1): re-mounted. Opts: (null)</span><br><span class="line">[ 6.596450] procd: - early -</span><br><span class="line">[ 6.599817] procd: - watchdog -</span><br><span class="line">[ 7.301153] procd: - ubus -</span><br><span class="line">[ 7.362047] procd: - init -</span><br></pre></td></tr></table></figure></p><h2 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h2><p>The whole system boot process is firstly shown in a nutshell:</p><ul><li>Bootloader e.g., U-Boot:<br>It configures low level hardwares, loads Linux kernel imag and device tree blob, finally jumps to Linux kernel image in the RAM with a kernel cmdline;</li><li><p>Kernel –&gt; Hareware:<br>The Linux kernel will init hardwares for everything built ‘static’ in the kernel;</p></li><li><p>Kernel –&gt; Filesystem:<br>The root filesystem (via root=, rootfstype= etc parameters in the kernel cmdline) will be mounted;</p></li><li><p>Kernel –&gt; Init Process<br>At last kernel will start init process (PID 1);</p></li><li><p>OpenWRT –&gt; Preinit:<br>Before the real procd runs, a small init process is started. This process has the job of early system init.</p></li><li><p>OpenWRT –&gt; Procd:<br>Once preinit is complete the init process is done and will do an exec on the real procd. This will replace init as pid1 with an instance of procd running as the new pid 1. The watchdog file descriptor is not closed. Instead it is handed over to the new procd process. The debug_level will also be handed over to the new procd instance if it was set via command line or during preinit.</p></li></ul><p>OpenWRT system starts actually from step 4. In OpenWRT system this init process is not a normal process of Linux but a shell scripts desinaged for OpenWRT. Additionally this init process is also the first part of preinit of OpenWRT. Therefore this article will start analysis of this speciall init process.</p><h2 id="2-Preinit"><a href="#2-Preinit" class="headerlink" title="2. Preinit"></a>2. Preinit</h2><h3 id="2-1-etc-preinit"><a href="#2-1-etc-preinit" class="headerlink" title="2.1 /etc/preinit"></a>2.1 /etc/preinit</h3><p> OpenWRT has many patches for different kinds of hardwares and unique applications which do not exist in the mainline kernel. From such patches, which are generic patches for certain Linux kernel version and shared amount all the routers, are located in openwrt/target/linux/generic/patches-/. No matter which version of Linux you choose, you can always find a patch called 921-use_preinit_as_init.patch which injects the OpenWRT init process at the first place of init processes list. This patch is shown below:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- a/init/main.c</span><br><span class="line">+++ b/init/main.c</span><br><span class="line">@@ -960,7 +960,8 @@ static int __ref kernel_init(void *unuse</span><br><span class="line">panic(&quot;Requested init %s failed (error %d).&quot;,</span><br><span class="line">execute_command, ret);</span><br><span class="line">&#125;</span><br><span class="line">- if (!try_to_run_init_process(&quot;/sbin/init&quot;) ||</span><br><span class="line">+ if (!try_to_run_init_process(&quot;/etc/preinit&quot;) ||</span><br><span class="line">+ !try_to_run_init_process(&quot;/sbin/init&quot;) ||</span><br><span class="line">!try_to_run_init_process(&quot;/etc/init&quot;) ||</span><br><span class="line">!try_to_run_init_process(&quot;/bin/init&quot;) ||</span><br><span class="line">!try_to_run_init_process(&quot;/bin/sh&quot;))</span><br></pre></td></tr></table></figure></p><p>It is obviously that the init process is located at /etc/ in the deivce filesystem or openwrt/package/base-files/files/etc/ of source tree. Next I will analyze this scripts in detail. As usual the source code of this preinit is firstly shown</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># Copyright (C) 2006-2016 OpenWrt.org</span><br><span class="line"># Copyright (C) 2010 Vertical Communications</span><br><span class="line"> </span><br><span class="line">[ -z &quot;$PREINIT&quot; ] &amp;&amp; exec /sbin/init</span><br><span class="line"> </span><br><span class="line">export PATH=&quot;%PATH%&quot;</span><br><span class="line"> </span><br><span class="line">pi_ifname=</span><br><span class="line">pi_ip=192.168.1.1</span><br><span class="line">pi_broadcast=192.168.1.255</span><br><span class="line">pi_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_ifname=</span><br><span class="line">fs_failsafe_ip=192.168.1.1</span><br><span class="line">fs_failsafe_broadcast=192.168.1.255</span><br><span class="line">fs_failsafe_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_wait_timeout=2</span><br><span class="line"> </span><br><span class="line">pi_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_path=&quot;%PATH%&quot;</span><br><span class="line">pi_init_cmd=&quot;/sbin/init&quot;</span><br><span class="line"> </span><br><span class="line">. /lib/functions.sh</span><br><span class="line">. /lib/functions/preinit.sh</span><br><span class="line">. /lib/functions/system.sh</span><br><span class="line"> </span><br><span class="line">boot_hook_init preinit_essential</span><br><span class="line">boot_hook_init preinit_main</span><br><span class="line">boot_hook_init failsafe</span><br><span class="line">boot_hook_init initramfs</span><br><span class="line">boot_hook_init preinit_mount_root</span><br><span class="line"> </span><br><span class="line">for pi_source_file in /lib/preinit/*; do</span><br><span class="line">. $pi_source_file</span><br><span class="line">done</span><br><span class="line"> </span><br><span class="line">boot_run_hook preinit_essential</span><br><span class="line"> </span><br><span class="line">pi_mount_skip_next=false</span><br><span class="line">pi_jffs2_mount_success=false</span><br><span class="line">pi_failsafe_net_message=false</span><br><span class="line"> </span><br><span class="line">boot_run_hook preinit_main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this script, the first command is:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ -z &quot;$PREINIT&quot; ] &amp;&amp; exec /sbin/init</span><br></pre></td></tr></table></figure><br>According to the process from kernel to this script, the environment parameter PREINIT is NOT defined, thus /sbin/init will be excuted. The /sbin/init is actually the first init process of OpenWRT system. This program is one of programs from procd package. Another well-known program is procd that will be introduced later.</p><h3 id="2-3-sbin-init"><a href="#2-3-sbin-init" class="headerlink" title="2.3 /sbin/init"></a>2.3 /sbin/init</h3><p>We don’t need to analze the whole souce code of /sbin/init. At first the main function could give us a good overview. The main function of /sbin/init is located at procd/initd/init.c file. We don’t need to analze the whole souce code to understand. In the following, a diagram will be demonstrated to show the execution order.<br><img src="https://img-blog.csdnimg.cn/img_convert/099962b03d6f6459f8d5ffb9904914b1.png" alt="image"></p><ul><li><ol><li>early() is the first function in init. It has four main tasks:<ul><li><ol><li>early_mounts(): mount /proc, /sysfs, /dev, /tmp;</li></ol></li><li><ol><li>early_env(): set PATH parameter with /usr/sbin:/sbin:/usr/bin:/bin;</li></ol></li><li><ol><li>initializes /dev/console;</li></ol></li><li><ol><li>print the first message: “Console is a alive” from init as shown above;</li></ol></li></ul></li></ol></li><li><ol><li>cmdline() is the second function which reads the kernel boot command line from /proc/cmdline and parses init_debug parameter;</li></ol></li><li><ol><li>watchdog_init() initializes watchdog (/dev/watchdog) and print the second message “- watchdog -” as shown above;</li></ol></li><li><ol><li>fork() a new thread to let /sbin/kmodloader load device drivers regarding /etc/modules-boot.d/;</li></ol></li><li><ol><li>uloop_init() initializes the uloop which is an event loop implementation. Later procd and sh /etc/preinit will be managed by uloop;</li></ol></li><li><ol><li>preinit() has four main tasks:<ul><li><ol><li>prints the third message: “- preinit -” as shown above;</li></ol></li><li><ol><li>fork() a new thread to excute sh /etc/preinit. This will be the second time to excute this init script. A callback function called spawn_procd() will be excuted after sh /etc/preinit is finished.<br>Note: spawn_procd() will read system debug level from /tmp/debuglevel and set it to env DBGLVL. It also sets watchdog fd to env WDTFD. At last it will fork the real /sbin/procd as deamon.</li></ol></li><li><ol><li>set env variable PREINIT with setenv(“PREINIT”, “1”, 1);</li></ol></li><li><ol><li>fork() a new thread to excute /sbin/procd program with parameter -h /etc/hotplug-preinit.json.<br>Note: This new thread will be added into uloop by uloop_process_add() together with a callbakc function as</li></ol></li></ul></li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugd_proc.cb = plugd_proc_cb;</span><br></pre></td></tr></table></figure><p>When /sbin/procd – h is finished, the callback function plugd_proc_cb()<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void</span><br><span class="line">plugd_proc_cb(struct uloop_process *proc, int ret)</span><br><span class="line">&#123;</span><br><span class="line">proc-&gt;pid = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>will be excuted. It is clear that it will set the pid with 0 to show that /sbin/procd – h is finished.</p><h3 id="2-2-etc-preinit-again"><a href="#2-2-etc-preinit-again" class="headerlink" title="2.2 /etc/preinit again"></a>2.2 /etc/preinit again</h3><p>Now the init process comes to /etc/preinit again. The first part of this script is shown below:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;%PATH%&quot;</span><br><span class="line"> </span><br><span class="line">pi_ifname=</span><br><span class="line">pi_ip=192.168.1.1</span><br><span class="line">pi_broadcast=192.168.1.255</span><br><span class="line">pi_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_ifname=</span><br><span class="line">fs_failsafe_ip=192.168.1.1</span><br><span class="line">fs_failsafe_broadcast=192.168.1.255</span><br><span class="line">fs_failsafe_netmask=255.255.255.0</span><br><span class="line"> </span><br><span class="line">fs_failsafe_wait_timeout=2</span><br><span class="line"> </span><br><span class="line">pi_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_suppress_stderr=&quot;y&quot;</span><br><span class="line">pi_init_path=&quot;%PATH%&quot;</span><br><span class="line">pi_init_cmd=&quot;/sbin/init&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><ul><li>These statements are simply variables definition.</li><li>Then it defined functions from following locations<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. /lib/functions.sh</span><br><span class="line">. /lib/functions/preinit.sh</span><br><span class="line">. /lib/functions/system.sh</span><br></pre></td></tr></table></figure></li></ul><p>boot_hook_init is defined in /lib/functions/preinit.sh and used as<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boot_hook_init preinit_essential</span><br><span class="line">boot_hook_init preinit_main</span><br><span class="line">boot_hook_init failsafe</span><br><span class="line">boot_hook_init initramfs</span><br><span class="line">boot_hook_init preinit_mount_root</span><br></pre></td></tr></table></figure><br>to defined 5 hook nodes. In the following loop<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for pi_source_file in /lib/preinit/*; do</span><br><span class="line">. $pi_source_file</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><blockquote><p>scripts located in /lib/preinit/ will be excuted. These scripts have defined functions which will be added to coresponding hook nodes by boot_hook_add.</p><h2 id="At-last-etc-preinit-will-excute-boot-run-hook-to-find-and-excute-functions-hooked-at-certain-node-In-current-system-it-will-start-from-boot-run-hook-preinit-main"><a href="#At-last-etc-preinit-will-excute-boot-run-hook-to-find-and-excute-functions-hooked-at-certain-node-In-current-system-it-will-start-from-boot-run-hook-preinit-main" class="headerlink" title="At last /etc/preinit will excute boot_run_hook to find and excute functions hooked at certain node. In current system it will start from boot_run_hook preinit_main."></a>At last /etc/preinit will excute boot_run_hook to find and excute functions hooked at certain node. In current system it will start from boot_run_hook preinit_main.</h2><h3 id="3-Watchdog"><a href="#3-Watchdog" class="headerlink" title="3. Watchdog"></a>3. Watchdog</h3><h2 id="If-the-watchdog-dev-dev-watchdog-exists-setting-watchdog-timeout-as-30-second-If-the-Linux-kernel-doese-not-receive-any-data-the-system-will-be-rebooted-The-process-use-uloop-to-write-some-data-into-Linux-kernel-periodly-5s-which-indicates-that-the-process-is-woring-well"><a href="#If-the-watchdog-dev-dev-watchdog-exists-setting-watchdog-timeout-as-30-second-If-the-Linux-kernel-doese-not-receive-any-data-the-system-will-be-rebooted-The-process-use-uloop-to-write-some-data-into-Linux-kernel-periodly-5s-which-indicates-that-the-process-is-woring-well" class="headerlink" title="If the watchdog dev /dev/watchdog exists, setting watchdog timeout as 30 second. If the Linux kernel doese not receive any data, the system will be rebooted. The process use uloop to write some data into Linux kernel periodly (5s), which indicates that the process is woring well."></a>If the watchdog dev /dev/watchdog exists, setting watchdog timeout as 30 second. If the Linux kernel doese not receive any data, the system will be rebooted. The process use uloop to write some data into Linux kernel periodly (5s), which indicates that the process is woring well.</h2><h3 id="4-procd"><a href="#4-procd" class="headerlink" title="4. procd"></a>4. procd</h3><p>LEDE uses procd for booting the system, managing processes and handling parts of the kernel/userland interaction. It can be considered similar to systemd on full blown distributions. Here is a list of tasks that procd will do for us</p><p>Procd will first do some basic process init such as setting itself to be owner of its own process group and setting up signals. We are now ready to bring up the userland in the following order</p></blockquote><ul><li>find out if a watchdog file descriptor was passed by the init process and start up the watchdog;</li><li>setup /dev/console to be our stdin/out/err;</li><li>start the coldplug process using the full rule set (/etc/hotplug.json). This is done by manually triggering all events that have already happened using udevtrigger;</li><li>start ubus, register it as a service and connect to it.<br>The basic system bringup is now complete, procd is up and running and can start handling daemons and services.<blockquote><p>procd has 6 states, STATE_EARLY, STATE_UBUS, STATE_INIT,STATE_RUNNING,STATE_SHUTDOWN, STATE_HALT. the procd state is changed from the first one until the last one. Current state is located in global variable state. The state can be changed by calling procd_state_next()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void state_enter(void)</span><br><span class="line">&#123;</span><br><span class="line">char ubus_cmd[] = &quot;/sbin/ubusd&quot;;</span><br><span class="line"> </span><br><span class="line">switch (state) &#123;</span><br><span class="line">case STATE_EARLY:</span><br><span class="line">LOG(&quot;- early -\n&quot;);</span><br><span class="line">watchdog_init(0);</span><br><span class="line">hotplug(&quot;/etc/hotplug.json&quot;);</span><br><span class="line">procd_coldplug();</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">case STATE_UBUS:</span><br><span class="line">// try to reopen incase the wdt was not available before coldplug</span><br><span class="line">watchdog_init(0);</span><br><span class="line">set_stdio(&quot;console&quot;);</span><br><span class="line">LOG(&quot;- ubus -\n&quot;);</span><br><span class="line">procd_connect_ubus();</span><br><span class="line">service_start_early(&quot;ubus&quot;, ubus_cmd);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">case STATE_INIT:</span><br><span class="line">LOG(&quot;- init -\n&quot;);</span><br><span class="line">procd_inittab();</span><br><span class="line">procd_inittab_run(&quot;respawn&quot;);</span><br><span class="line">procd_inittab_run(&quot;askconsole&quot;);</span><br><span class="line">procd_inittab_run(&quot;askfirst&quot;);</span><br><span class="line">procd_inittab_run(&quot;sysinit&quot;);</span><br><span class="line"> </span><br><span class="line">// switch to syslog log channel</span><br><span class="line">ulog_open(ULOG_SYSLOG, LOG_DAEMON, &quot;procd&quot;);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">case STATE_RUNNING:</span><br><span class="line">LOG(&quot;- init complete -\n&quot;);</span><br><span class="line">procd_inittab_run(&quot;respawnlate&quot;);</span><br><span class="line">procd_inittab_run(&quot;askconsolelate&quot;);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">case STATE_SHUTDOWN:</span><br><span class="line">/* Redirect output to the console for the users&#x27; benefit */</span><br><span class="line">set_console();</span><br><span class="line">LOG(&quot;- shutdown -\n&quot;);</span><br><span class="line">procd_inittab_run(&quot;shutdown&quot;);</span><br><span class="line">sync();</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">case STATE_HALT:</span><br><span class="line">// To prevent killed processes from interrupting the sleep</span><br><span class="line">signal(SIGCHLD, SIG_IGN);</span><br><span class="line">LOG(&quot;- SIGTERM processes -\n&quot;);</span><br><span class="line">kill(-1, SIGTERM);</span><br><span class="line">sync();</span><br><span class="line">sleep(1);</span><br><span class="line">LOG(&quot;- SIGKILL processes -\n&quot;);</span><br><span class="line">kill(-1, SIGKILL);</span><br><span class="line">sync();</span><br><span class="line">sleep(1);</span><br><span class="line">#ifndef DISABLE_INIT</span><br><span class="line">if (reboot_event == RB_POWER_OFF)</span><br><span class="line">LOG(&quot;- power down -\n&quot;);</span><br><span class="line">else</span><br><span class="line">LOG(&quot;- reboot -\n&quot;);</span><br><span class="line"> </span><br><span class="line">/* Allow time for last message to reach serial console, etc */</span><br><span class="line">sleep(1);</span><br><span class="line"> </span><br><span class="line">/* We have to fork here, since the kernel calls do_exit(EXIT_SUCCESS)</span><br><span class="line">* in linux/kernel/sys.c, which can cause the machine to panic when</span><br><span class="line">* the init process exits... */</span><br><span class="line">if (!vfork( )) &#123; /* child */</span><br><span class="line">reboot(reboot_event);</span><br><span class="line">_exit(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line">while (1)</span><br><span class="line">sleep(1);</span><br><span class="line">#else</span><br><span class="line">exit(0);</span><br><span class="line">#endif</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">default:</span><br><span class="line">ERROR(&quot;Unhandled state %d\n&quot;, state);</span><br><span class="line">return;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-STATE-EARLY"><a href="#4-1-STATE-EARLY" class="headerlink" title="4.1 STATE_EARLY"></a>4.1 STATE_EARLY</h3><p>In this state some preparartion work will be done before init.</p></blockquote></li><li>init watchdog. Timeout is 30s;</li><li>hotplug(“/etc/hotplug.json”); will enable monitoring hotplug event according to the rules defined in /etc/hotplug.json;</li><li>in procd_coldplug function, /dev is mouted. udevtrigger will generate coldplug events for hotplug monitoring;</li><li>When udevstrigger is finished, its callback function procd_state_next() will change the state from STATE_EARLY to STATE_UBUS;</li></ul><h3 id="4-2-STATE-UBUS"><a href="#4-2-STATE-UBUS" class="headerlink" title="4.2 STATE_UBUS"></a>4.2 STATE_UBUS</h3><ul><li>watchdog_init(0); Init watchdoa again;</li><li>set_stdio(“console”); Setup standar IO device to console;</li><li>procd_connect_ubus(void); A timer is set to reconnect periodly with ubusd even ubusd may not exist yet. uloop_run() will run after init work finished. After procd connects ubusd, it will register service main_object, system_object and watch_object;<ul><li>in ubus_connect_cb, /var/run/ubus.sock（UBUS_UNIX_SOCKET) will be used to commnunicate with ubus. The state will be changed to STATE_INIT after the connection is successully builded.</li></ul></li><li>service_init(); Init AVL tree for services and validators;</li><li>service_start_early(“ubus”, ubus_cmd); Start ubusd service deamon;</li></ul><h3 id="4-3-STATE-INIT"><a href="#4-3-STATE-INIT" class="headerlink" title="4.3 STATE_INIT"></a>4.3 STATE_INIT</h3><p>in this state the real init work will be done</p><ul><li>Add global link table actions from /etc/inittab;</li><li>Sequential loading respawn, askconsole, askfirst and sysinit commands;</li><li>procd_inittab_run() Callback functions of <em>respawn*</em>, askconsole, askfirst and sysinit will be excuted. Regarding /etc/inittab, callback functions of sysinit and askfirst will be runned.<ul><li><strong>askfirst</strong> –&gt; askfirst(): Start /sbin/askfirst to show Please press Enter to activate this console and then /bin/ash –login will be excuted.</li><li><strong>sysinit</strong> –&gt; runrc(): It wll call all the startup scripts which are located on /etc/rc.d. Actually it calls add_initd() to fork a process for every scripts, repectively, whichi is handled by struct runqueue. After that the callback function will call rcdone() to change the state from STATE_INIT to STATE_RUNNING.</li></ul></li></ul><h3 id="4-4-STATE-RUNNING"><a href="#4-4-STATE-RUNNING" class="headerlink" title="4.4 STATE_RUNNING"></a>4.4 STATE_RUNNING</h3><p>In this state the procd will in the uloop_run() loop.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a><strong>References</strong></h2><p><a href="https://wiki.openwrt.org/doc/techref/preinit_mount">https://wiki.openwrt.org/doc/techref/preinit_mount</a><br><a href="https://wiki.openwrt.org/doc/techref/requirements.boot.process">https://wiki.openwrt.org/doc/techref/requirements.boot.process</a><br><a href="http://trac.gateworks.com/wiki/OpenWrt/init">http://trac.gateworks.com/wiki/OpenWrt/init</a><br><a href="https://www.lede-project.org/docs/procd.html">https://www.lede-project.org/docs/procd.html</a><br><a href="http://ask.wrtnode.cc/question/43">http://ask.wrtnode.cc/question/43</a><br><a href="https://wiki.microduino.cc/index.php/%E7%AC%AC%E4%B8%80%E8%AF%BE–MicroWRT_%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B#.E5.86.85.E6.A0.B8.E8.A1.A5.E4.B8.81">https://wiki.microduino.cc/index.php/%E7%AC%AC%E4%B8%80%E8%AF%BE–MicroWRT_%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B#.E5.86.85.E6.A0.B8.E8.A1.A5.E4.B8.81</a><br><a href="http://lirobo.blogspot.de/2014/07/openwrt-boot.html">http://lirobo.blogspot.de/2014/07/openwrt-boot.html</a><br><a href="http://www.cnblogs.com/rohens-hbg/p/5049085.html">http://www.cnblogs.com/rohens-hbg/p/5049085.html</a><br><a href="http://blog.leanote.com/post/shaokunyang@163.com/openwrt-cc-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B">http://blog.leanote.com/post/shaokunyang@163.com/openwrt-cc-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B</a><br><a href="http://www.mamicode.com/info-detail-107649.html">http://www.mamicode.com/info-detail-107649.html</a><br><a href="http://blog.csdn.net/wwx0715/article/details/41725917">http://blog.csdn.net/wwx0715/article/details/41725917</a><br><a href="http://lirobo.blogspot.de/search/label/OpenWrt">http://lirobo.blogspot.de/search/label/OpenWrt</a><br><a href="https://wiki.microduino.cn/index.php/MicroWRT_(OpenWRT%E5%85%BC%E5%AE%B9%E6%9D%BF%EF%BC%89%E6%95%99%E7%A8%8B">https://wiki.microduino.cn/index.php/MicroWRT_(OpenWRT%E5%85%BC%E5%AE%B9%E6%9D%BF%EF%BC%89%E6%95%99%E7%A8%8B</a><br><a href="http://see.sl088.com/wiki/Openwrt_%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B">http://see.sl088.com/wiki/Openwrt_%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B</a><br><a href="https://segmentfault.com/a/1190000002392043">https://segmentfault.com/a/1190000002392043</a><br><a href="http://blog.chinaunix.net/uid-26598889-id-3060545.html">http://blog.chinaunix.net/uid-26598889-id-3060545.html</a><br><a href="http://www.51hei.com/bbs/dpj-46073-1.html">http://www.51hei.com/bbs/dpj-46073-1.html</a><br><a href="http://www.programdevelop.com/4531245/">http://www.programdevelop.com/4531245/</a></p><h1 id="十三、ubus"><a href="#十三、ubus" class="headerlink" title="十三、ubus"></a>十三、ubus</h1><blockquote><p>ubus是openwrt下的进程间通讯协议，可以用来获取OpenWrt核心组件的信息，比如iwinfo、uci、service。ubus底层采用的是unix socket，通讯采用的数据结构是json。shell、c、lua都可以使用ubus来实现进程间通讯。ubus采用的是托管方式，后端的消息传递是由ubusd程序来实现的。OpenWrt中很多项目是基于ubus的，比如netifd、ubus-scriptd。</p></blockquote><p><a href="https://openwrt.org/docs/guide-developer/ubus">https://openwrt.org/docs/guide-developer/ubus</a></p><blockquote><p>netifd/uci 交给ubus托管</p></blockquote><p><a href="https://openwrt.org/docs/techref/ubus">https://openwrt.org/docs/techref/ubus</a><br><img src="https://img-blog.csdnimg.cn/20210713221414601.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713221614298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210713221714180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h1 id="十四、hotplug机制"><a href="#十四、hotplug机制" class="headerlink" title="十四、hotplug机制"></a>十四、hotplug机制</h1><p><strong>ubus是用户态</strong></p><blockquote><p>hotplug机制是linux内核提供的一种消息通知机制，主要用来实现内核态事件向用户态传递。OpenWrt下的ubus也类似，一个是用户态的，而hotplug是内核态的，其功能都是用来消息传递。linux早期的hotplug机制并没有现在这么复杂，在2.4内核的时候只是针对usb、pci子系统，只是简单的hotplug调用进程，后面才使用netlink机制来实现通知机制。当时我主要用hotplug机制来实现usb 3g网卡的模式转换（配合usbmodswitch），现在hotplug有更广泛的使用场景。</p><p>OpenWrt中hotplug机制基本上和传统Linux下的实现类似，只是hotplug事件监听是procd（注：早期OpenWrt采用的是hotplug2），其他系统可能是由hotplug2或其他。OpenWrt常见的按键检测、驱动加载都是基于hotplug机制来实现的。</p></blockquote><p><a href="http://linux-hotplug.sourceforge.net/kernel/kernel.html">http://linux-hotplug.sourceforge.net/kernel/kernel.html</a></p><h1 id="十五、opkg-包管理机制"><a href="#十五、opkg-包管理机制" class="headerlink" title="十五、opkg 包管理机制"></a>十五、opkg 包管理机制</h1><p>opkg是OpenWrt的包管理系统，opkg源自于optware项目。包管理主要包含几大部分：安装脚本、卸载脚本、程序和库、配置文件、程序依赖关系、版本信息。</p><blockquote><ol><li>Redhat: rpm</li><li>Debain: deb</li><li>Openwrt: ipk</li></ol></blockquote><h1 id="十六、创建OpenWrt-Package"><a href="#十六、创建OpenWrt-Package" class="headerlink" title="十六、创建OpenWrt Package"></a>十六、创建OpenWrt Package</h1><p><a href="https://openwrt.org/docs/guide-developer/packages">https://openwrt.org/docs/guide-developer/packages</a></p><p>最好现在本机测试没问题之后，才烧到路由器上去调试</p><p>在系统里面,为新项目新建一个项目文件夹，将需要的代码copy到这个文件夹。不要动openwrt build成功的golden源码。</p><p>将src的代码调试到没问题之后，才编译到package</p><p>w@w:/home/openwrt/package/example/src$ ls<br>Makefile  myapp.c<br>w@w:/home/openwrt/package/example/src$ make<br>cc  -o myapp myapp.c -Wall<br>w@w:/home/openwrt/package/example/src$ ls<br>Makefile  myapp  myapp.c<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## myapp.c, 位于/home/openwrt/package/example/src 目录下面</span><br><span class="line">/*</span><br><span class="line"> * otrx</span><br><span class="line"> *</span><br><span class="line"> * Copyright (C) 2015-2017 Rafał Miłecki &lt;zajec5@gmail.com&gt;</span><br><span class="line"> *</span><br><span class="line"> * This program is free software; you can redistribute it and/or modify it</span><br><span class="line"> * under the terms of the GNU General Public License as published by the Free</span><br><span class="line"> * Software Foundation; either version 2 of the License, or (at your option)</span><br><span class="line"> * any later version.</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">#include &lt;byteswap.h&gt;</span><br><span class="line">#include &lt;endian.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"> </span><br><span class="line">#if !defined(__BYTE_ORDER)</span><br><span class="line">#error &quot;Unknown byte order&quot;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">#if __BYTE_ORDER == __BIG_ENDIAN</span><br><span class="line">#define cpu_to_le32(x)  bswap_32(x)</span><br><span class="line">#define le32_to_cpu(x)  bswap_32(x)</span><br><span class="line">#elif __BYTE_ORDER == __LITTLE_ENDIAN</span><br><span class="line">#define cpu_to_le32(x)  (x)</span><br><span class="line">#define le32_to_cpu(x)  (x)</span><br><span class="line">#else</span><br><span class="line">#error &quot;Unsupported endianness&quot;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">#define TRX_MAGIC           0x30524448</span><br><span class="line">#define TRX_FLAGS_OFFSET        12</span><br><span class="line">#define TRX_MAX_PARTS           3</span><br><span class="line"> </span><br><span class="line">struct trx_header &#123;</span><br><span class="line">    uint32_t magic;</span><br><span class="line">    uint32_t length;</span><br><span class="line">    uint32_t crc32;</span><br><span class="line">    uint16_t flags;</span><br><span class="line">    uint16_t version;</span><br><span class="line">    uint32_t offset[3];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">char *trx_path;</span><br><span class="line">size_t trx_offset = 0;</span><br><span class="line">char *partition[TRX_MAX_PARTS] = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">static inline size_t otrx_min(size_t x, size_t y) &#123;</span><br><span class="line">    return x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**************************************************</span><br><span class="line"> * CRC32</span><br><span class="line"> **************************************************/</span><br><span class="line"> </span><br><span class="line">static const uint32_t crc32_tbl[] = &#123;</span><br><span class="line">    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba,</span><br><span class="line">    0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,</span><br><span class="line">    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,</span><br><span class="line">    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,</span><br><span class="line">    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,</span><br><span class="line">    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,</span><br><span class="line">    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,</span><br><span class="line">    0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,</span><br><span class="line">    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,</span><br><span class="line">    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,</span><br><span class="line">    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940,</span><br><span class="line">    0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,</span><br><span class="line">    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116,</span><br><span class="line">    0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,</span><br><span class="line">    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,</span><br><span class="line">    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,</span><br><span class="line">    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a,</span><br><span class="line">    0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,</span><br><span class="line">    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818,</span><br><span class="line">    0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,</span><br><span class="line">    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,</span><br><span class="line">    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,</span><br><span class="line">    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c,</span><br><span class="line">    0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,</span><br><span class="line">    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,</span><br><span class="line">    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,</span><br><span class="line">    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,</span><br><span class="line">    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,</span><br><span class="line">    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086,</span><br><span class="line">    0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,</span><br><span class="line">    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4,</span><br><span class="line">    0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,</span><br><span class="line">    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,</span><br><span class="line">    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,</span><br><span class="line">    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,</span><br><span class="line">    0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,</span><br><span class="line">    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe,</span><br><span class="line">    0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,</span><br><span class="line">    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,</span><br><span class="line">    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,</span><br><span class="line">    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252,</span><br><span class="line">    0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,</span><br><span class="line">    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60,</span><br><span class="line">    0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,</span><br><span class="line">    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,</span><br><span class="line">    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,</span><br><span class="line">    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04,</span><br><span class="line">    0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,</span><br><span class="line">    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a,</span><br><span class="line">    0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,</span><br><span class="line">    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,</span><br><span class="line">    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,</span><br><span class="line">    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e,</span><br><span class="line">    0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,</span><br><span class="line">    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,</span><br><span class="line">    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,</span><br><span class="line">    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,</span><br><span class="line">    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,</span><br><span class="line">    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0,</span><br><span class="line">    0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,</span><br><span class="line">    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6,</span><br><span class="line">    0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,</span><br><span class="line">    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,</span><br><span class="line">    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">uint32_t otrx_crc32(uint32_t crc, uint8_t *buf, size_t len) &#123;</span><br><span class="line">    while (len) &#123;</span><br><span class="line">        crc = crc32_tbl[(crc ^ *buf) &amp; 0xff] ^ (crc &gt;&gt; 8);</span><br><span class="line">        buf++;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return crc;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**************************************************</span><br><span class="line"> * Check</span><br><span class="line"> **************************************************/</span><br><span class="line"> </span><br><span class="line">static void otrx_check_parse_options(int argc, char **argv) &#123;</span><br><span class="line">    int c;</span><br><span class="line"> </span><br><span class="line">    while ((c = getopt(argc, argv, &quot;o:&quot;)) != -1) &#123;</span><br><span class="line">        switch (c) &#123;</span><br><span class="line">        case &#x27;o&#x27;:</span><br><span class="line">            trx_offset = atoi(optarg);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static int otrx_check(int argc, char **argv) &#123;</span><br><span class="line">    FILE *trx;</span><br><span class="line">    struct trx_header hdr;</span><br><span class="line">    size_t bytes, length;</span><br><span class="line">    uint8_t buf[1024];</span><br><span class="line">    uint32_t crc32;</span><br><span class="line">    int err = 0;</span><br><span class="line"> </span><br><span class="line">    if (argc &lt; 3) &#123;</span><br><span class="line">        fprintf(stderr, &quot;No TRX file passed\n&quot;);</span><br><span class="line">        err = -EINVAL;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line">    trx_path = argv[2];</span><br><span class="line"> </span><br><span class="line">    optind = 3;</span><br><span class="line">    otrx_check_parse_options(argc, argv);</span><br><span class="line"> </span><br><span class="line">    trx = fopen(trx_path, &quot;r&quot;);</span><br><span class="line">    if (!trx) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t open %s\n&quot;, trx_path);</span><br><span class="line">        err = -EACCES;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    fseek(trx, trx_offset, SEEK_SET);</span><br><span class="line">    bytes = fread(&amp;hdr, 1, sizeof(hdr), trx);</span><br><span class="line">    if (bytes != sizeof(hdr)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t read %s header\n&quot;, trx_path);</span><br><span class="line">        err =  -EIO;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (le32_to_cpu(hdr.magic) != TRX_MAGIC) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Invalid TRX magic: 0x%08x\n&quot;, le32_to_cpu(hdr.magic));</span><br><span class="line">        err =  -EINVAL;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    length = le32_to_cpu(hdr.length);</span><br><span class="line">    if (length &lt; sizeof(hdr)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Length read from TRX too low (%zu B)\n&quot;, length);</span><br><span class="line">        err = -EINVAL;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    crc32 = 0xffffffff;</span><br><span class="line">    fseek(trx, trx_offset + TRX_FLAGS_OFFSET, SEEK_SET);</span><br><span class="line">    length -= TRX_FLAGS_OFFSET;</span><br><span class="line">    while ((bytes = fread(buf, 1, otrx_min(sizeof(buf), length), trx)) &gt; 0) &#123;</span><br><span class="line">        crc32 = otrx_crc32(crc32, buf, bytes);</span><br><span class="line">        length -= bytes;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (length) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t read last %zd B of data from %s\n&quot;, length, trx_path);</span><br><span class="line">        err = -EIO;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (crc32 != le32_to_cpu(hdr.crc32)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Invalid data crc32: 0x%08x instead of 0x%08x\n&quot;, crc32, le32_to_cpu(hdr.crc32));</span><br><span class="line">        err =  -EINVAL;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    printf(&quot;Found a valid TRX version %d\n&quot;, le32_to_cpu(hdr.version));</span><br><span class="line"> </span><br><span class="line">err_close:</span><br><span class="line">    fclose(trx);</span><br><span class="line">out:</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**************************************************</span><br><span class="line"> * Create</span><br><span class="line"> **************************************************/</span><br><span class="line"> </span><br><span class="line">static ssize_t otrx_create_append_file(FILE *trx, const char *in_path) &#123;</span><br><span class="line">    FILE *in;</span><br><span class="line">    size_t bytes;</span><br><span class="line">    ssize_t length = 0;</span><br><span class="line">    uint8_t buf[1024];</span><br><span class="line"> </span><br><span class="line">    in = fopen(in_path, &quot;r&quot;);</span><br><span class="line">    if (!in) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t open %s\n&quot;, in_path);</span><br><span class="line">        return -EACCES;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    while ((bytes = fread(buf, 1, sizeof(buf), in)) &gt; 0) &#123;</span><br><span class="line">        if (fwrite(buf, 1, bytes, trx) != bytes) &#123;</span><br><span class="line">            fprintf(stderr, &quot;Couldn&#x27;t write %zu B to %s\n&quot;, bytes, trx_path);</span><br><span class="line">            length = -EIO;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        length += bytes;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    fclose(in);</span><br><span class="line"> </span><br><span class="line">    return length;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static ssize_t otrx_create_append_zeros(FILE *trx, size_t length) &#123;</span><br><span class="line">    uint8_t *buf;</span><br><span class="line"> </span><br><span class="line">    buf = malloc(length);</span><br><span class="line">    if (!buf)</span><br><span class="line">        return -ENOMEM;</span><br><span class="line">    memset(buf, 0, length);</span><br><span class="line"> </span><br><span class="line">    if (fwrite(buf, 1, length, trx) != length) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t write %zu B to %s\n&quot;, length, trx_path);</span><br><span class="line">        free(buf);</span><br><span class="line">        return -EIO;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    free(buf);</span><br><span class="line"> </span><br><span class="line">    return length;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static ssize_t otrx_create_align(FILE *trx, size_t curr_offset, size_t alignment) &#123;</span><br><span class="line">    if (curr_offset &amp; (alignment - 1)) &#123;</span><br><span class="line">        size_t length = alignment - (curr_offset % alignment);</span><br><span class="line">        return otrx_create_append_zeros(trx, length);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static int otrx_create_write_hdr(FILE *trx, struct trx_header *hdr) &#123;</span><br><span class="line">    size_t bytes, length;</span><br><span class="line">    uint8_t buf[1024];</span><br><span class="line">    uint32_t crc32;</span><br><span class="line"> </span><br><span class="line">    hdr-&gt;magic = cpu_to_le32(TRX_MAGIC);</span><br><span class="line">    hdr-&gt;version = 1;</span><br><span class="line"> </span><br><span class="line">    fseek(trx, 0, SEEK_SET);</span><br><span class="line">    bytes = fwrite(hdr, 1, sizeof(struct trx_header), trx);</span><br><span class="line">    if (bytes != sizeof(struct trx_header)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t write TRX header to %s\n&quot;, trx_path);</span><br><span class="line">        return -EIO;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    length = le32_to_cpu(hdr-&gt;length);</span><br><span class="line"> </span><br><span class="line">    crc32 = 0xffffffff;</span><br><span class="line">    fseek(trx, TRX_FLAGS_OFFSET, SEEK_SET);</span><br><span class="line">    length -= TRX_FLAGS_OFFSET;</span><br><span class="line">    while ((bytes = fread(buf, 1, otrx_min(sizeof(buf), length), trx)) &gt; 0) &#123;</span><br><span class="line">        crc32 = otrx_crc32(crc32, buf, bytes);</span><br><span class="line">        length -= bytes;</span><br><span class="line">    &#125;</span><br><span class="line">    hdr-&gt;crc32 = cpu_to_le32(crc32);</span><br><span class="line"> </span><br><span class="line">    fseek(trx, 0, SEEK_SET);</span><br><span class="line">    bytes = fwrite(hdr, 1, sizeof(struct trx_header), trx);</span><br><span class="line">    if (bytes != sizeof(struct trx_header)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t write TRX header to %s\n&quot;, trx_path);</span><br><span class="line">        return -EIO;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static int otrx_create(int argc, char **argv) &#123;</span><br><span class="line">    FILE *trx;</span><br><span class="line">    struct trx_header hdr = &#123;&#125;;</span><br><span class="line">    ssize_t sbytes;</span><br><span class="line">    size_t curr_idx = 0;</span><br><span class="line">    size_t curr_offset = sizeof(hdr);</span><br><span class="line">    int c;</span><br><span class="line">    int err = 0;</span><br><span class="line"> </span><br><span class="line">    if (argc &lt; 3) &#123;</span><br><span class="line">        fprintf(stderr, &quot;No TRX file passed\n&quot;);</span><br><span class="line">        err = -EINVAL;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line">    trx_path = argv[2];</span><br><span class="line"> </span><br><span class="line">    trx = fopen(trx_path, &quot;w+&quot;);</span><br><span class="line">    if (!trx) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t open %s\n&quot;, trx_path);</span><br><span class="line">        err = -EACCES;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line">    fseek(trx, curr_offset, SEEK_SET);</span><br><span class="line"> </span><br><span class="line">    optind = 3;</span><br><span class="line">    while ((c = getopt(argc, argv, &quot;f:A:a:b:&quot;)) != -1) &#123;</span><br><span class="line">        switch (c) &#123;</span><br><span class="line">        case &#x27;f&#x27;:</span><br><span class="line">            if (curr_idx &gt;= TRX_MAX_PARTS) &#123;</span><br><span class="line">                err = -ENOSPC;</span><br><span class="line">                fprintf(stderr, &quot;Reached TRX partitions limit, no place for %s\n&quot;, optarg);</span><br><span class="line">                goto err_close;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            sbytes = otrx_create_append_file(trx, optarg);</span><br><span class="line">            if (sbytes &lt; 0) &#123;</span><br><span class="line">                fprintf(stderr, &quot;Failed to append file %s\n&quot;, optarg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                hdr.offset[curr_idx++] = curr_offset;</span><br><span class="line">                curr_offset += sbytes;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            sbytes = otrx_create_align(trx, curr_offset, 4);</span><br><span class="line">            if (sbytes &lt; 0)</span><br><span class="line">                fprintf(stderr, &quot;Failed to append zeros\n&quot;);</span><br><span class="line">            else</span><br><span class="line">                curr_offset += sbytes;</span><br><span class="line"> </span><br><span class="line">            break;</span><br><span class="line">        case &#x27;A&#x27;:</span><br><span class="line">            sbytes = otrx_create_append_file(trx, optarg);</span><br><span class="line">            if (sbytes &lt; 0) &#123;</span><br><span class="line">                fprintf(stderr, &quot;Failed to append file %s\n&quot;, optarg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                curr_offset += sbytes;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            sbytes = otrx_create_align(trx, curr_offset, 4);</span><br><span class="line">            if (sbytes &lt; 0)</span><br><span class="line">                fprintf(stderr, &quot;Failed to append zeros\n&quot;);</span><br><span class="line">            else</span><br><span class="line">                curr_offset += sbytes;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;a&#x27;:</span><br><span class="line">            sbytes = otrx_create_align(trx, curr_offset, strtol(optarg, NULL, 0));</span><br><span class="line">            if (sbytes &lt; 0)</span><br><span class="line">                fprintf(stderr, &quot;Failed to append zeros\n&quot;);</span><br><span class="line">            else</span><br><span class="line">                curr_offset += sbytes;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;b&#x27;:</span><br><span class="line">            sbytes = strtol(optarg, NULL, 0) - curr_offset;</span><br><span class="line">            if (sbytes &lt; 0) &#123;</span><br><span class="line">                fprintf(stderr, &quot;Current TRX length is 0x%zx, can&#x27;t pad it with zeros to 0x%lx\n&quot;, curr_offset, strtol(optarg, NULL, 0));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                sbytes = otrx_create_append_zeros(trx, sbytes);</span><br><span class="line">                if (sbytes &lt; 0)</span><br><span class="line">                    fprintf(stderr, &quot;Failed to append zeros\n&quot;);</span><br><span class="line">                else</span><br><span class="line">                    curr_offset += sbytes;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        if (err)</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    sbytes = otrx_create_align(trx, curr_offset, 0x1000);</span><br><span class="line">    if (sbytes &lt; 0)</span><br><span class="line">        fprintf(stderr, &quot;Failed to append zeros\n&quot;);</span><br><span class="line">    else</span><br><span class="line">        curr_offset += sbytes;</span><br><span class="line"> </span><br><span class="line">    hdr.length = curr_offset;</span><br><span class="line">    otrx_create_write_hdr(trx, &amp;hdr);</span><br><span class="line">err_close:</span><br><span class="line">    fclose(trx);</span><br><span class="line">out:</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**************************************************</span><br><span class="line"> * Extract</span><br><span class="line"> **************************************************/</span><br><span class="line"> </span><br><span class="line">static void otrx_extract_parse_options(int argc, char **argv) &#123;</span><br><span class="line">    int c;</span><br><span class="line"> </span><br><span class="line">    while ((c = getopt(argc, argv, &quot;c:e:o:1:2:3:&quot;)) != -1) &#123;</span><br><span class="line">        switch (c) &#123;</span><br><span class="line">        case &#x27;o&#x27;:</span><br><span class="line">            trx_offset = atoi(optarg);</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;1&#x27;:</span><br><span class="line">            partition[0] = optarg;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;2&#x27;:</span><br><span class="line">            partition[1] = optarg;</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;3&#x27;:</span><br><span class="line">            partition[2] = optarg;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static int otrx_extract_copy(FILE *trx, size_t offset, size_t length, char *out_path) &#123;</span><br><span class="line">    FILE *out;</span><br><span class="line">    size_t bytes;</span><br><span class="line">    uint8_t *buf;</span><br><span class="line">    int err = 0;</span><br><span class="line"> </span><br><span class="line">    out = fopen(out_path, &quot;w&quot;);</span><br><span class="line">    if (!out) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t open %s\n&quot;, out_path);</span><br><span class="line">        err = -EACCES;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    buf = malloc(length);</span><br><span class="line">    if (!buf) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t alloc %zu B buffer\n&quot;, length);</span><br><span class="line">        err =  -ENOMEM;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    fseek(trx, offset, SEEK_SET);</span><br><span class="line">    bytes = fread(buf, 1, length, trx);</span><br><span class="line">    if (bytes != length) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t read %zu B of data from %s\n&quot;, length, trx_path);</span><br><span class="line">        err =  -ENOMEM;</span><br><span class="line">        goto err_free_buf;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    bytes = fwrite(buf, 1, length, out);</span><br><span class="line">    if (bytes != length) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t write %zu B to %s\n&quot;, length, out_path);</span><br><span class="line">        err =  -ENOMEM;</span><br><span class="line">        goto err_free_buf;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    printf(&quot;Extracted 0x%zx bytes into %s\n&quot;, length, out_path);</span><br><span class="line"> </span><br><span class="line">err_free_buf:</span><br><span class="line">    free(buf);</span><br><span class="line">err_close:</span><br><span class="line">    fclose(out);</span><br><span class="line">out:</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static int otrx_extract(int argc, char **argv) &#123;</span><br><span class="line">    FILE *trx;</span><br><span class="line">    struct trx_header hdr;</span><br><span class="line">    size_t bytes;</span><br><span class="line">    int i;</span><br><span class="line">    int err = 0;</span><br><span class="line"> </span><br><span class="line">    if (argc &lt; 3) &#123;</span><br><span class="line">        fprintf(stderr, &quot;No TRX file passed\n&quot;);</span><br><span class="line">        err = -EINVAL;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line">    trx_path = argv[2];</span><br><span class="line"> </span><br><span class="line">    optind = 3;</span><br><span class="line">    otrx_extract_parse_options(argc, argv);</span><br><span class="line"> </span><br><span class="line">    trx = fopen(trx_path, &quot;r&quot;);</span><br><span class="line">    if (!trx) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t open %s\n&quot;, trx_path);</span><br><span class="line">        err = -EACCES;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    fseek(trx, trx_offset, SEEK_SET);</span><br><span class="line">    bytes = fread(&amp;hdr, 1, sizeof(hdr), trx);</span><br><span class="line">    if (bytes != sizeof(hdr)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Couldn&#x27;t read %s header\n&quot;, trx_path);</span><br><span class="line">        err =  -EIO;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (le32_to_cpu(hdr.magic) != TRX_MAGIC) &#123;</span><br><span class="line">        fprintf(stderr, &quot;Invalid TRX magic: 0x%08x\n&quot;, le32_to_cpu(hdr.magic));</span><br><span class="line">        err =  -EINVAL;</span><br><span class="line">        goto err_close;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    for (i = 0; i &lt; TRX_MAX_PARTS; i++) &#123;</span><br><span class="line">        size_t length;</span><br><span class="line"> </span><br><span class="line">        if (!partition[i])</span><br><span class="line">            continue;</span><br><span class="line">        if (!hdr.offset[i]) &#123;</span><br><span class="line">            printf(&quot;TRX doesn&#x27;t contain partition %d, can&#x27;t extract %s\n&quot;, i + 1, partition[i]);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        if (i + 1 &gt;= TRX_MAX_PARTS || !hdr.offset[i + 1])</span><br><span class="line">            length = le32_to_cpu(hdr.length) - le32_to_cpu(hdr.offset[i]);</span><br><span class="line">        else</span><br><span class="line">            length = le32_to_cpu(hdr.offset[i + 1]) - le32_to_cpu(hdr.offset[i]);</span><br><span class="line"> </span><br><span class="line">        otrx_extract_copy(trx, trx_offset + le32_to_cpu(hdr.offset[i]), length, partition[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">err_close:</span><br><span class="line">    fclose(trx);</span><br><span class="line">out:</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**************************************************</span><br><span class="line"> * Start</span><br><span class="line"> **************************************************/</span><br><span class="line"> </span><br><span class="line">static void usage() &#123;</span><br><span class="line">    printf(&quot;Usage:\n&quot;);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    printf(&quot;Checking TRX file:\n&quot;);</span><br><span class="line">    printf(&quot;\totrx check &lt;file&gt; [options]\tcheck if file is a valid TRX\n&quot;);</span><br><span class="line">    printf(&quot;\t-o offset\t\t\toffset of TRX data in file (default: 0)\n&quot;);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    printf(&quot;Creating new TRX file:\n&quot;);</span><br><span class="line">    printf(&quot;\totrx create &lt;file&gt; [options] [partitions]\n&quot;);</span><br><span class="line">    printf(&quot;\t-f file\t\t\t\t[partition] start new partition with content copied from file\n&quot;);</span><br><span class="line">    printf(&quot;\t-A file\t\t\t\t[partition] append current partition with content copied from file\n&quot;);</span><br><span class="line">    printf(&quot;\t-a alignment\t\t\t[partition] align current partition\n&quot;);</span><br><span class="line">    printf(&quot;\t-b offset\t\t\t[partition] append zeros to partition till reaching absolute offset\n&quot;);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    printf(&quot;Extracting from TRX file:\n&quot;);</span><br><span class="line">    printf(&quot;\totrx extract &lt;file&gt; [options]\textract partitions from TRX file\n&quot;);</span><br><span class="line">    printf(&quot;\t-o offset\t\t\toffset of TRX data in file (default: 0)\n&quot;);</span><br><span class="line">    printf(&quot;\t-1 file\t\t\t\tfile to extract 1st partition to (optional)\n&quot;);</span><br><span class="line">    printf(&quot;\t-2 file\t\t\t\tfile to extract 2nd partition to (optional)\n&quot;);</span><br><span class="line">    printf(&quot;\t-3 file\t\t\t\tfile to extract 3rd partition to (optional)\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">    if (argc &gt; 1) &#123;</span><br><span class="line">        if (!strcmp(argv[1], &quot;check&quot;))</span><br><span class="line">            return otrx_check(argc, argv);</span><br><span class="line">        else if (!strcmp(argv[1], &quot;create&quot;))</span><br><span class="line">            return otrx_create(argc, argv);</span><br><span class="line">        else if (!strcmp(argv[1], &quot;extract&quot;))</span><br><span class="line">            return otrx_extract(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    usage();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Makefile （位于/home/openwrt/package/example/src 目录下面）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all: myapp</span><br><span class="line"> </span><br><span class="line">myapp:</span><br><span class="line">    $(CC) $(CFLAGS) -o $@ myapp.c -Wall</span><br><span class="line"> </span><br><span class="line">clean:</span><br><span class="line">    rm -f myapp</span><br></pre></td></tr></table></figure><blockquote><p>Makefile（位于/home/openwrt/package/example/ 目录下面）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is free software, licensed under the GNU General Public License v2.</span><br><span class="line"># See /LICENSE for more information.</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line">include $(TOPDIR)/rules.mk</span><br><span class="line"> </span><br><span class="line">PKG_NAME:=myapp</span><br><span class="line">PKG_RELEASE:=1</span><br><span class="line"> </span><br><span class="line">PKG_FLAGS:=nonshared</span><br><span class="line"> </span><br><span class="line">include $(INCLUDE_DIR)/package.mk</span><br><span class="line"> </span><br><span class="line">define Package/myapp</span><br><span class="line">  SECTION:=utils</span><br><span class="line">  CATEGORY:=Base system</span><br><span class="line">  TITLE:=This is my first app</span><br><span class="line">  MAINTAINER:=LuMingFeng &lt;forgotfun@qq.com&gt;</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define Package/myapp/description</span><br><span class="line"> This package is my first package.</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define Build/Compile</span><br><span class="line">    $(MAKE) -C $(PKG_BUILD_DIR) \</span><br><span class="line">        CC=&quot;$(TARGET_CC)&quot; \</span><br><span class="line">        CFLAGS=&quot;$(TARGET_CFLAGS) -Wall&quot;</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define Package/myapp/install</span><br><span class="line">    $(CP) ./files/* $(1)/</span><br><span class="line">    $(INSTALL_DIR) $(1)/usr/bin</span><br><span class="line">    $(INSTALL_BIN) $(PKG_BUILD_DIR)/myapp $(1)/usr/bin/</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">$(eval $(call BuildPackage,myapp))</span><br></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w@w:/home/openwrt/package/example$ ls</span><br><span class="line">Makefile  src</span><br><span class="line">w@w:/home/openwrt/package/example/src$ ls</span><br><span class="line">Makefile  myapp.c</span><br></pre></td></tr></table></figure><h1 id="十七、固件的结构分析，逆向解包"><a href="#十七、固件的结构分析，逆向解包" class="headerlink" title="十七、固件的结构分析，逆向解包"></a>十七、固件的结构分析，逆向解包</h1><h2 id="gt-固件是由三部分组成：固件头、kernel、rootfs。我们可以通过mkimage工具分析固件头，用binwalk来解包固件分析kernel和rootfs，通常rootfs一般是squashfs格式的。下面我来一步步给大家剖析，每个部分的细节。"><a href="#gt-固件是由三部分组成：固件头、kernel、rootfs。我们可以通过mkimage工具分析固件头，用binwalk来解包固件分析kernel和rootfs，通常rootfs一般是squashfs格式的。下面我来一步步给大家剖析，每个部分的细节。" class="headerlink" title="&gt; 固件是由三部分组成：固件头、kernel、rootfs。我们可以通过mkimage工具分析固件头，用binwalk来解包固件分析kernel和rootfs，通常rootfs一般是squashfs格式的。下面我来一步步给大家剖析，每个部分的细节。"></a>&gt; 固件是由三部分组成：固件头、kernel、rootfs。我们可以通过mkimage工具分析固件头，用binwalk来解包固件分析kernel和rootfs，通常rootfs一般是squashfs格式的。下面我来一步步给大家剖析，每个部分的细节。</h2><ul><li><p>1- 固件头，用于让uboot可以识别固件，解压等非常关键的信息。</p></li><li><p>2- kernel</p></li><li><p>3- rootfs</p></li><li><p>4- 填充区（为了取整）</p></li></ul><p>BroadCom(博通)trx固件头定义（HDR0）<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct trx_header &#123;</span><br><span class="line">    uint32_t magic;            /* &quot;HDR0&quot; */</span><br><span class="line">    uint32_t len;            /* Length of file including header */</span><br><span class="line">    uint32_t crc32;            /* 32-bit CRC from flag_version to end of file */</span><br><span class="line">    uint32_t flag_version;    /* 0:15 flags, 16:31 version */</span><br><span class="line">    uint32_t offsets[4];    /* Offsets of partitions from start of header */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>MediaTek(联发科)、QualCom(高通 )u-boot固件头定义<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define IH_MAGIC    0x27051956  /* Image Magic Number       */</span><br><span class="line">#define IH_NMLEN        32  /* Image Name Length        */</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line"> * Legacy format image header,</span><br><span class="line"> * all data in network byte order (aka natural aka bigendian).</span><br><span class="line"> */</span><br><span class="line">typedef struct image_header &#123;</span><br><span class="line">    uint32_t    ih_magic;   /* Image Header Magic Number    */</span><br><span class="line">    uint32_t    ih_hcrc;    /* Image Header CRC Checksum    */</span><br><span class="line">    uint32_t    ih_time;    /* Image Creation Timestamp */</span><br><span class="line">    uint32_t    ih_size;    /* Image Data Size      */</span><br><span class="line">    uint32_t    ih_load;    /* Data  Load  Address      */</span><br><span class="line">    uint32_t    ih_ep;      /* Entry Point Address      */</span><br><span class="line">    uint32_t    ih_dcrc;    /* Image Data CRC Checksum  */</span><br><span class="line">    uint8_t     ih_os;      /* Operating System     */</span><br><span class="line">    uint8_t     ih_arch;    /* CPU architecture     */</span><br><span class="line">    uint8_t     ih_type;    /* Image Type           */</span><br><span class="line">    uint8_t     ih_comp;    /* Compression Type     */</span><br><span class="line">    uint8_t     ih_name[IH_NMLEN];  /* Image Name       */</span><br><span class="line">&#125; image_header_t;</span><br></pre></td></tr></table></figure></p><p>其它固件头：TPLINK，NETGEAR等，防止固件版本误刷。</p><p>binwalk地址：<a href="https://github.com/ForgotFun/binwalk">https://github.com/ForgotFun/binwalk</a> </p><p>Uboot固件头：0x27051956</p><p><img src="https://img-blog.csdnimg.cn/20210715222457917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210715222804896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20210715223247456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210715223428455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210715223553624.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210715223706119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210715223755190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210715223900905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>如何用mksquashfs mkinage 将解压的image打包回去？</p><h1 id="十八、Cron定时任务"><a href="#十八、Cron定时任务" class="headerlink" title="十八、Cron定时任务"></a>十八、Cron定时任务</h1><blockquote><p>定时任务，比如：设定每天0点重启路由器，晚上11：00~早8：00关闭LED灯和Wifi，周一到周五关闭wifi等。 </p><p>OpenWrt计划任务服务默认是关闭的，启用cron需要启用cron服务。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/cron enable</span><br><span class="line">/etc/init.d/cron start</span><br></pre></td></tr></table></figure><ul><li>cron时间规则格式如何下：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># ┌───────────── minute (0 - 59)</span><br><span class="line"># │ ┌───────────── hour (0 - 23)</span><br><span class="line"># │ │ ┌───────────── day of month (1 - 31)</span><br><span class="line"># │ │ │ ┌───────────── month (1 - 12)</span><br><span class="line"># │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday;7 is also Sunday on some systems)</span><br><span class="line"># │ │ │ │ │                                       </span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># │ │ │ │ │</span><br><span class="line"># * * * * *  command to execute</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>*/5</th><th>*</th><th>*</th><th>*</th><th>*</th><th>every 5 minutes</th></tr></thead><tbody><tr><td>12</td><td>*/3</td><td>*</td><td>*</td><td>*</td><td>every 3 hours at 12 minutes</td></tr><tr><td>57</td><td>11</td><td>15</td><td>1,6,12</td><td>*</td><td>At 11:57 Hrs  on 15th of Jan, June &amp; Dec.</td></tr><tr><td>25</td><td>6</td><td>*</td><td>*</td><td>1-5</td><td>At 6:25 AM every weekday (Mon-Fri)</td></tr><tr><td>0</td><td>0</td><td>4,12,26</td><td>*</td><td>*</td><td>At midnight on 4th, 12th and 26th of every month</td></tr><tr><td>5,10</td><td>9,14</td><td>10</td><td>*</td><td>0,4</td><td>At 9:05AM, 9:10AM, 2:05PM and 2:10PM every Sunday and Thursday</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 表示 所有</span><br><span class="line"></span><br><span class="line">- 表示 区间</span><br><span class="line"></span><br><span class="line">, 表示 或者</span><br><span class="line"></span><br><span class="line">/ 表示 步进</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*  表示任意</span><br><span class="line">-  表示范围</span><br><span class="line">,  表示枚举多个值</span><br><span class="line">/  表示每隔</span><br><span class="line"></span><br><span class="line">比如 0 0 * * * reboot 表示 0:0 重启路由器。</span><br><span class="line"></span><br><span class="line">0： 分钟</span><br><span class="line"></span><br><span class="line">0：小时</span><br><span class="line"></span><br><span class="line">* ： 日</span><br><span class="line"></span><br><span class="line">*： 月</span><br><span class="line"></span><br><span class="line">* ： 周几</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>reboot： 执行的命令。</p><p>周1~5 wifi down， 周六周日wifi up。 有的6/7表示周六周日，有点6/0表示周六周日 </p><p><img src="https://img-blog.csdnimg.cn/20210715152103573.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210715153747761.png" alt="image"></p><p>参考资料：</p><p><a href="https://openwrt.org/docs/guide-user/base-system/cron">https://openwrt.org/docs/guide-user/base-system/cron</a></p><p><a href="https://en.wikipedia.org/wiki/Cron">https://en.wikipedia.org/wiki/Cron</a></p><hr><h1 id="十九、开机自启动服务"><a href="#十九、开机自启动服务" class="headerlink" title="十九、开机自启动服务"></a>十九、开机自启动服务</h1><p>OpenWRT开机自启动服务通过procd来管理，ubuntu通过systemd管理</p><p>OpenWrt开机启动服务实现和普通Linux发行版并无明显差异，基本上就是/etc/init.d和/etc/rc.d两个目录在起关键作用。/etc/init.d目录存放的是所有的开机启动脚本（包含启动和未启用的服务），/etc/rc.d存放的是启用的（Enabled）开机启动脚本。只有enabled的service才可以通过软连接放到/etc/rc.d.</p><p>服务的启用和禁用可以通过service enable/disable命令来实现。</p><p>虽然通过/etc/rc.local脚本也可以实现创建开机启动脚本，但并不推荐。首先开机启动的顺序不可控、管理混乱、其次违背了openwrt service的规则。通常作为service通常需要具备start、stop、restart、enable、disable几大操作，rc.local仅仅提供了start的操作。假如我们把/etc/rc.local打包到package的话会导致管理混乱，rc.local是全局性的开机启动脚本并不属于某个package。 /etc/rc.local是最后被执行的，隶属于S95done。rc.local不适合放用户层面的文件<br><img src="https://img-blog.csdnimg.cn/20210716142958690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>发现，在/etc/init.d与/etc/rc.d下面有相同的gpid_switch文件。<br><img src="https://img-blog.csdnimg.cn/20210716143347586.png" alt="image"></li></ul><p>用md5sum命令查看，发现这三个文件内容完全相同。<br><img src="https://img-blog.csdnimg.cn/2021071614344978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>用ls -al查看，发现K10gpio_switch 与 S94gpio_switch均通过软连接只想同一个 ../init.d/gpio_switch文件。 </p><p>软连命令 ln -s<br><img src="https://img-blog.csdnimg.cn/20210716143751482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>查看K10gpio_switch文件，发现文件开头有START=94，STOP=10，其中START=94<br><img src="https://img-blog.csdnimg.cn/20210716143920597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>查看S96led这个文件，发现只有START=96<br><img src="https://img-blog.csdnimg.cn/20210716144037703.png" alt="image"><br>每个服务都应该支持start，stop，restart(stop + sleep + start)，reload，enabe，disable等几个功能。</p><p><img src="https://img-blog.csdnimg.cn/20210716144311582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>disable /etc/init.d/gpio_switch服务，发现/etc/rc.d里面的S94gpio_switch与K10gpio_switch这两个服务已经不存在。</p><p><img src="https://img-blog.csdnimg.cn/20210716144534436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>enable /etc/init.d/gpio_switch服务，发现/etc/rc.d里面的S94gpio_switch与K10gpio_switch这两个服务再次出现。<br><img src="https://img-blog.csdnimg.cn/20210716144650268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/20210716144758236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>案例：某T1E1卡设置iperf 对打，rc.local设置。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip link add link eth6 name eth6.102 type vlan id 102</span><br><span class="line">ip link add link eth6 name eth6.202 type vlan id 202</span><br><span class="line">ip link add link eth6 name eth6.302 type vlan id 302</span><br><span class="line">ip link add link eth6 name eth6.402 type vlan id 402</span><br><span class="line">ip link set eth6.102 address 00:a0:c9:00:00:01</span><br><span class="line">ip link set eth6.202 address 00:a0:c9:00:00:02</span><br><span class="line">ip link set eth6.302 address 00:a0:c9:00:00:03</span><br><span class="line">ip link set eth6.402 address 00:a0:c9:00:00:04</span><br><span class="line">ifconfig eth0 17.0.0.1 up</span><br><span class="line">ifconfig eth6 192.168.40.123 up</span><br><span class="line">ifconfig eth6.102 10.10.10.1 up</span><br><span class="line">ifconfig eth6.202 11.10.10.1 up</span><br><span class="line">ifconfig eth6.302 12.10.10.1 up</span><br><span class="line">ifconfig eth6.402 13.10.10.1 up</span><br><span class="line">route add -net 14.0.0.0 netmask 255.0.0.0 gw 13.10.10.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>对方平台<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip link add link eth6 name eth6.102 type vlan id 102</span><br><span class="line">ip link add link eth6 name eth6.202 type vlan id 202</span><br><span class="line">ip link add link eth6 name eth6.302 type vlan id 302</span><br><span class="line">ip link add link eth6 name eth6.402 type vlan id 402</span><br><span class="line">ip link set eth6.102 address 00:a0:c9:00:00:05</span><br><span class="line">ip link set eth6.202 address 00:a0:c9:00:00:06</span><br><span class="line">ip link set eth6.302 address 00:a0:c9:00:00:07</span><br><span class="line">ip link set eth6.402 address 00:a0:c9:00:00:08</span><br><span class="line">ifconfig eth0 14.0.0.1 up</span><br><span class="line">ifconfig eth6 192.168.40.122 up</span><br><span class="line">ifconfig eth6.102 10.10.10.2 up</span><br><span class="line">ifconfig eth6.202 11.10.10.2 up</span><br><span class="line">ifconfig eth6.302 12.10.10.2 up</span><br><span class="line">ifconfig eth6.402 13.10.10.2 up</span><br><span class="line">route add -net 17.0.0.0 netmask 255.0.0.0 gw 13.10.10.2</span><br></pre></td></tr></table></figure></p><hr><h1 id="二十、opkg特性应用实例-升级时保留配置文件、opkg-install-remove-时保留配置文件"><a href="#二十、opkg特性应用实例-升级时保留配置文件、opkg-install-remove-时保留配置文件" class="headerlink" title="二十、opkg特性应用实例(升级时保留配置文件、opkg install remove 时保留配置文件)"></a>二十、opkg特性应用实例(升级时保留配置文件、opkg install remove 时保留配置文件)</h1><p>preinstall/postnstall 安装app时，保留上一次的文件</p><p>如果升级后要保留config文件，一定要用sysupgrade升级</p><p>在uboot/cfe下升级，配置文件不会被保留</p><p>升级时保留配置文件由sysupgrade实现</p><p>opkg安装：会将前面的配置覆盖。 升级时备份之前的配置，升级后，恢复原来的配置，从而实现升级后保留之前的配置文件。</p><p>make package/example/compile V=99</p><p>多级makefile如何实现？</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openwrt学习笔记1_10</title>
      <link href="/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01_10/"/>
      <url>/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01_10/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="一、安装OPENWRT"><a href="#一、安装OPENWRT" class="headerlink" title="一、安装OPENWRT"></a>一、安装OPENWRT</h1><ul><li><ol><li>安装虚拟机，Virtualbox</li></ol></li><li><ol><li>安装Ubuntu 18.04 64位系统</li></ol></li><li><ol><li>安装开发环境，执行 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils libncurses5-dev ncurses-term zlib1g-dev gawk asciidoc libz-dev git-core uuid-dev libacl1-dev liblzo2-dev pkg-config libc6-dev curl libxml-parser-perl ocaml-nox</span><br><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>下载OpenWrt源码，执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://git.lede-project.org/source.git lede</span><br><span class="line">git clone https://github.com/openwrt/openwrt.git</span><br><span class="line">git clone https://git.openwrt.org/openwrt/openwrt.git</span><br></pre></td></tr></table></figure><a href="https://openwrt.org/docs/guide-developer/source-code/start">官方介绍</a></li></ol></li></ul><p><a href="https://wesley.blog.csdn.net/article/details/118633847">参考</a></p><ul><li><ol><li>下载好源代码后，更新源并添加（feeds是非官方的包）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure></li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@w:/home/openwrt/lede# ls</span><br><span class="line">BSDmakefile  COPYING             include   package    scripts      tmp</span><br><span class="line">config       feeds               LICENSES  README.md  staging_dir  toolchain</span><br><span class="line">Config.in    feeds.conf.default  Makefile  rules.mk   target       tools</span><br><span class="line">root@w:/home/openwrt/lede# cd scripts/</span><br><span class="line">root@w:/home/openwrt/lede/scripts# ls</span><br><span class="line">arm-magic.sh              ext-toolchain.sh             pad_image</span><br><span class="line">brcmImage.pl              feeds                        patch-kernel.sh</span><br><span class="line">bundle-libraries.sh       fixup-makefile.pl            patch-specs.sh</span><br><span class="line">cfe-bin-header.py         flashing                     portable_date.sh</span><br><span class="line">cfe-partition-tag.py      functions.sh                 qemustart</span><br><span class="line">cfe-wfi-tag.py            gen-dependencies.sh          redboot-script.pl</span><br><span class="line">checkpatch.pl             gen_image_generic.sh         relink-lib.sh</span><br><span class="line">cleanfile                 get_source_date_epoch.sh     remote-gdb</span><br><span class="line">clean-package.sh          getver.sh                    rstrip.sh</span><br><span class="line">cleanpatch                ipkg-build                   sercomm-crypto.py</span><br><span class="line">combined-ext-image.sh     ipkg-make-index.sh           sercomm-partition-tag.py</span><br><span class="line">combined-image.sh         ipkg-remove                  sercomm-payload.py</span><br><span class="line">config                    json_add_image_info.py       sign_images.sh</span><br><span class="line">config.guess              json_overview_image_info.py  size_compare.sh</span><br><span class="line">config.rpath              kconfig.pl                   slugimage.pl</span><br><span class="line">config.sub                linksys-image.sh             spelling.txt</span><br><span class="line">const_structs.checkpatch  make-ipkg-dir.sh             srecimage.pl</span><br><span class="line">deptest.sh                md5sum                       strip-kmod.sh</span><br><span class="line">diffconfig.sh             metadata.pm                  symlink-tree.sh</span><br><span class="line">dl_cleanup.py             mkhash.c                     sysupgrade-tar.sh</span><br><span class="line">dl_github_archive.py      mkits-qsdk-ipq-image.sh      target-metadata.pl</span><br><span class="line">download.pl               mkits.sh                     time.pl</span><br><span class="line">dump-target-info.pl       om-fwupgradecfg-gen.sh       timestamp.pl</span><br><span class="line">env                       package-metadata.pl          ubinize-image.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@w:/home/openwrt/lede/scripts# ./feeds --help</span><br><span class="line">Usage: ./feeds &lt;command&gt; [options]</span><br><span class="line"> </span><br><span class="line">Commands:</span><br><span class="line">    list [options]: List feeds, their content and revisions (if installed)</span><br><span class="line">    Options:</span><br><span class="line">        -n :            List of feed names.</span><br><span class="line">        -s :            List of feed names and their URL.</span><br><span class="line">        -r &lt;feedname&gt;:  List packages of specified feed.</span><br><span class="line">        -d &lt;delimiter&gt;: Use specified delimiter to distinguish rows (default: spaces)</span><br><span class="line">        -f :            List feeds in feeds.conf compatible format (when using -s).</span><br><span class="line"> </span><br><span class="line">    install [options] &lt;package&gt;: Install a package</span><br><span class="line">    Options:</span><br><span class="line">        -a :           Install all packages from all feeds or from the specified feed using the -p option.</span><br><span class="line">        -p &lt;feedname&gt;: Prefer this feed when installing packages.</span><br><span class="line">        -d &lt;y|m|n&gt;:    Set default for newly installed packages.</span><br><span class="line">        -f :           Install will be forced even if the package exists in core OpenWrt (override)</span><br><span class="line"> </span><br><span class="line">    search [options] &lt;substring&gt;: Search for a package</span><br><span class="line">    Options:</span><br><span class="line">        -r &lt;feedname&gt;: Only search in this feed</span><br><span class="line"> </span><br><span class="line">    uninstall -a|&lt;package&gt;: Uninstall a package</span><br><span class="line">    Options:</span><br><span class="line">        -a :           Uninstalls all packages.</span><br><span class="line"> </span><br><span class="line">    update -a|&lt;feedname(s)&gt;: Update packages and lists of feeds in feeds.conf .</span><br><span class="line">    Options:</span><br><span class="line">        -a :           Update all feeds listed within feeds.conf. Otherwise the specified feeds will be updated.</span><br><span class="line">        -i :           Recreate the index only. No feed update from repository is performed.</span><br><span class="line">        -f :           Force updating feeds even if there are changed, uncommitted files.</span><br><span class="line"> </span><br><span class="line">    clean:             Remove downloaded/generated files.</span><br></pre></td></tr></table></figure><blockquote><ul><li><ol><li>查看源代码是否下载成功 make menuconfig</li></ol></li></ul></blockquote><pre><code>- 1). 选择 CPU 型号 Target System -&gt; Ralink RT288x/RT3xxx- 2). 选择 CPU 子型号 Subtarget -&gt; RT3x5x/RT5350 based boards- 3). 选择具体路由器型号 Target profile -&gt; HAME-MPR-A2 </code></pre><blockquote><ul><li><ol><li>编译系统 make V=99</li></ol></li></ul></blockquote><pre><code>- 1、lzo安装        1)、 wget http://www.oberhumer.com/opensource/lzo/download/lzo-2.06.tar.gz        2)、 tar xzvf lzo-2.06.tar.gz         3)、 cd lzo-2.06                ./configure CPPFLAGS=&quot;$CPPFLAGS -std=c90 -fPIC&quot;                make                make install- 2、lzop安装：        1)、wget &#39;http://www.lzop.org/download/lzop-1.03.tar.gz&#39;        2)、tar xzvf lzop-1.03.tar.gz         3)、cd lzop-1.03                ./configure CPPFLAGS=&quot;$CPPFLAGS -std=c90 -fPIC&quot;                make                make install -3   make -j1 V=s</code></pre><ul><li>替换成中科大源<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@w:/home/openwrt/lede# vim /etc/apt/sources.list</span><br><span class="line">root@w:/home/openwrt/lede# cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">root@w:/home/openwrt/lede# vim /etc/apt/sources.list</span><br><span class="line">root@w:/home/openwrt/lede# cat /etc/apt/sources.list</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##中科大源</span><br><span class="line"> </span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><h1 id="二、Uboot下升级FW（MTK）"><a href="#二、Uboot下升级FW（MTK）" class="headerlink" title="二、Uboot下升级FW（MTK）"></a>二、Uboot下升级FW（MTK）</h1>常用芯片：bcm(CFE),qca + MTK(uboot).</li></ul><p>QCA的uboot分为kernel 与 rootfs，分别升级</p><p>MTK：只有一个打包好的独立的bin文件</p><ul><li>• 在路由器主板上焊接TTL引脚，准备USB-TTL数据线一条（使用时，一般把红色的电源线剪掉，避免将板子烧坏）</li><li>• 安装串口、 tftpd 工具<ul><li><ul><li>• ubuntu下采用minicom、tftpd - hpa</li></ul></li><li><ul><li>• win下可以使用putty、tftpd32/64</li></ul></li></ul></li><li>• 虚拟机的设置<ul><li><ul><li>• 虚拟机 USB 共享（串口）</li></ul></li><li><ul><li>• 调整虚拟机的网卡设置，增加网卡然后设置为桥接</li></ul></li></ul></li><li>• lsusb<br><img src="https://img-blog.csdnimg.cn/20210711084735345.png" alt="image"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install minicom</span><br></pre></td></tr></table></figure><strong>minicom -s 设定minicom，串口波特率</strong><br><img src="https://img-blog.csdnimg.cn/20210711090845832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><a href="https://help.ubuntu.com/community/TFTP">TFTP</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftpd-hpa</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w@w:~$ sudo cp /etc/default/tftpd-hpa /etc/default/tftpd-hpa.ORIGINAL</span><br><span class="line">w@w:~$ sudo vi /etc/default/tftpd-hpa</span><br><span class="line">w@w:~$ sudo cat /etc/default/tftpd-hpa</span><br><span class="line"># /etc/default/tftpd-hpa</span><br><span class="line"> </span><br><span class="line">TFTP_USERNAME=&quot;tftp&quot;</span><br><span class="line">#TFTP_DIRECTORY=&quot;/var/lib/tftpboot&quot;</span><br><span class="line">TFTP_DIRECTORY=&quot;/tftpboot&quot;</span><br><span class="line">TFTP_ADDRESS=&quot;:69&quot;</span><br><span class="line">TFTP_OPTIONS=&quot;--secure --create&quot;</span><br><span class="line">#w@w:~$ sudo chown -R tftp /var/lib/tftpboot</span><br><span class="line">w@w:~$ sudo mkdir /tftpboot</span><br><span class="line">w@w:~$ sudo chown -R tftp /tftpboot</span><br><span class="line">w@w:~$ sudo service tftpd-hpa restart</span><br><span class="line">#w@w:~$ sudo chmod -R 777 /var/lib/tftpboot</span><br><span class="line">w@w:~$ sudo chmod -R 777 /tftpboot</span><br><span class="line">#w@w:~$ cd /var/lib/tftpboot</span><br><span class="line">#w@w:/var/lib/tftpboot$ ls</span><br><span class="line">#w@w:/var/lib/tftpboot$ touch abc</span><br><span class="line">#w@w:/var/lib/tftpboot$ ls</span><br><span class="line">#abc</span><br><span class="line">w@w:~$ cd /tftpboot</span><br><span class="line">w@w:/tftpboot$ ls</span><br><span class="line">w@w:/tftpboot$ touch abc</span><br><span class="line">w@w:/tftpboot$ ls</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><ul><li>验证tftp文件下载 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w@w:~$ sudo apt-get install tftp</span><br><span class="line">w@w:~/Downloads$ tftp</span><br><span class="line">tftp&gt; connect 127.0.0.1</span><br><span class="line">tftp&gt; binary</span><br><span class="line">tftp&gt; timeout 1000</span><br><span class="line">tftp&gt; get abc</span><br><span class="line">tftp&gt; quit</span><br><span class="line">w@w:~/Downloads$ ls</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210711094646518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w@w:~$ ifconfig</span><br><span class="line">enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255</span><br><span class="line">        inet6 fe80::3d0d:2671:dc77:f7d2  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:24:17:2c  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1353  bytes 1536902 (1.5 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 546  bytes 49231 (49.2 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"> </span><br><span class="line">enp0s8: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::2b70:85ef:ab5f:311c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:f5:fe:b9  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 107  bytes 18564 (18.5 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"> </span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 156  bytes 13373 (13.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 156  bytes 13373 (13.3 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">w@w:~$ ifconfig enp0s38 10.10.10.3</span><br></pre></td></tr></table></figure><ul><li>启动，进入uboot<br><img src="https://img-blog.csdnimg.cn/20210711095523135.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071110021746.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071110010884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210711100519973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></li></ul><h1 id="三、编译环境目录结构分析"><a href="#三、编译环境目录结构分析" class="headerlink" title="三、编译环境目录结构分析"></a>三、编译环境目录结构分析</h1><p>OpenWrt基于Buld Root,</p><p>OpenWrt代码：脚本+文件，只有make编译的时候才会下载代码</p><ol><li><p>tool chain</p></li><li><p>build程序 kernel + rootfs文件（程序）</p></li><li><p>创建rootfs（库+程序）glibc，openssl</p></li><li><p>创建image（kernel+rootfs《squashfs，ramfs》）</p></li></ol><p><img src="https://img-blog.csdnimg.cn/2021071110422022.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>make的时候产生的目录</p><p>dl：下载的code</p><p>staging_dir 交叉编译工具链</p><p>feeds ：第三方package</p><p>build_dir:文件系统rootfs，程序，kernel等</p><p>bin：fw，package/target</p><p>先产生先下载tool dl，然后交叉编译工具链staging_dir，然后产生build_dir，再产生bin</p><h1 id="四、路由器启动过程分析"><a href="#四、路由器启动过程分析" class="headerlink" title="四、路由器启动过程分析"></a>四、路由器启动过程分析</h1><ol><li><p>硬件上电，CPU进行复位（CPU内部硬件复位非软件/系统层面的配置）—&gt; 选择启动介质，SPI Flash/NAND Flash（bootstrap，一般有电阻，设定从SPI启动还是NAND启动，硬件实现）</p></li><li><p>Bootloader启动，选择从SPI/NAND中的某个image启动（4-8M SPI</p><p>Bootloader, NAND 128M bootloader+image）,比如SPI中刷DD-WRT，NAND中刷梅林</p></li></ol><p>一般，有单独SPI，单独NAND，SPI+NAND ，Dual image四种</p><ol><li>系统启动OpenWRT/DD-WRT/Tomato</li></ol><hr><ol><li><p>上的，CPU简单初始化</p></li><li><p>Boot-loader阶段，CPU在此次init初始化，外设（串口，网口Phy，Switch,USB，Memory…），</p></li><li><p>系统运行，CPU再次init，外设。。。，PCIe总线，无线网卡</p></li></ol><h1 id="五、make-meconfig菜单分析"><a href="#五、make-meconfig菜单分析" class="headerlink" title="五、make meconfig菜单分析"></a>五、make meconfig菜单分析</h1><p><img src="https://img-blog.csdnimg.cn/2021071113011526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h1 id="六、目录结构分析"><a href="#六、目录结构分析" class="headerlink" title="六、目录结构分析"></a>六、目录结构分析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w@w:/home/openwrt$ ls</span><br><span class="line">BSDmakefile  COPYING             include   README.md    target</span><br><span class="line">build_dir    dl                  LICENSES  rules.mk     tmp</span><br><span class="line">config       feeds               Makefile  scripts      toolchain</span><br><span class="line">Config.in    feeds.conf.default  package   staging_dir  tools</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>1)find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 </p></li><li><p>2)grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</p></li></ul></blockquote><ul><li>　<strong>一.find命令</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　　　基本格式：find  path expression</span><br><span class="line"></span><br><span class="line">　　　　1.按照文件名查找</span><br><span class="line"></span><br><span class="line">　　　　(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找</span><br><span class="line">　　　　(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf</span><br><span class="line">　　　　(3)find /etc -name &#x27;*srm*&#x27;　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件</span><br><span class="line">　　　　(4)find . -name &#x27;srm*&#x27; 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件</span><br><span class="line"></span><br><span class="line">　　　　2.按照文件特征查找 　　　　</span><br><span class="line"></span><br><span class="line">　　　　(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)</span><br><span class="line">　　　　(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件</span><br><span class="line">　　　　(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹</span><br><span class="line">　　　　(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件</span><br><span class="line">　　　　(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)</span><br><span class="line">　　　　(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件</span><br><span class="line">　　　　(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件</span><br><span class="line">　　　　(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)</span><br><span class="line">　　　　(9)find / -size -1000k 　　#查找出小于1000KB的文件</span><br><span class="line"></span><br><span class="line">　　　　3.使用混合查找方式查找文件</span><br><span class="line"></span><br><span class="line">　　　　参数有： ！，-and(-a)，-or(-o)。</span><br><span class="line"></span><br><span class="line">(1)find /tmp -size +10000c -and -mtime +2 　　#在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</span><br><span class="line">(2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件</span><br><span class="line">(3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件</span><br><span class="line">    　　  </span><br></pre></td></tr></table></figure></li><li><strong>二、grep命令</strong></li></ul><p>　　　  基本格式：find  expression</p><p> 　　　 1.主要参数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　　　[options]主要参数：</span><br><span class="line">　　　　－c：只输出匹配行的计数。</span><br><span class="line">　　　　－i：不区分大小写</span><br><span class="line">　　　　－h：查询多文件时不显示文件名。</span><br><span class="line">　　　　－l：查询多文件时只输出包含匹配字符的文件名。</span><br><span class="line">　　　　－n：显示匹配行及行号。</span><br><span class="line">　　　　－s：不显示不存在或无匹配文本的错误信息。</span><br><span class="line">　　　　－v：显示不包含匹配文本的所有行。</span><br><span class="line"></span><br><span class="line">　　　　pattern正则表达式主要参数：</span><br><span class="line">　　　　\： 忽略正则表达式中特殊字符的原有含义。</span><br><span class="line">　　　　^：匹配正则表达式的开始行。</span><br><span class="line">　　　　$: 匹配正则表达式的结束行。</span><br><span class="line">　　　　\&lt;：从匹配正则表达 式的行开始。</span><br><span class="line">　　　　\&gt;：到匹配正则表达式的行结束。</span><br><span class="line">　　　　[ ]：单个字符，如[A]即A符合要求 。</span><br><span class="line">　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</span><br><span class="line">　　　　.：所有的单个字符。</span><br><span class="line">　　　　* ：有字符，长度可以为0。</span><br></pre></td></tr></table></figure></p><ul><li>2.实例　 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* (1)grep &#x27;test&#x27; d*　　     #显示所有以d开头的文件中包含 test的行</span><br><span class="line">* (2)grep ‘test’ aa bb cc #显示在aa，bb，cc文件中包含test的行</span><br><span class="line">* (3)grep ‘[a-z]\&#123;5\&#125;’ aa #显示所有包含每行字符串至少有5个连续小写字符的字符串的行</span><br><span class="line">* (4)grep magic /usr/src　  #显示/usr/src目录下的文件(不含子目录)包含magic的行</span><br><span class="line">* (5)grep -r magic /usr/src #显示/usr/src目录下的文件(包含子目录)包含magic的行</span><br><span class="line">* (6)grep -w pattern files  #只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，</span><br></pre></td></tr></table></figure></li></ul><p><a href="http://www.cnblogs.com/end/archive/2012/02/21/2360965.html">详细使用参见</a></p><p><a href="https://www.cnblogs.com/EasonJim/p/8425840.html">OpenWrt包管理软件opkg的使用（极路由）</a></p><ul><li>说明：</li></ul><blockquote><p>1、OpenWrt本身系统没什么问题，关键点是一些路由器尝试的限制，比如一些厂商设置成内存分区为只读，那么这个安装软件就变得没什么意义了。</p><p>2、opkg的操作有点反人类，正常步骤是查询，安装；而opkg在一些厂商的限制下需要update，然后download，最后install；且有时会安装在tmp区，重启会没有。</p></blockquote><ul><li><p>常用安装步骤：</p><p>如果想要安装一个软件，但是不知道什么具体的名字，可以用命令获取到软件包的名字(opkg list | grep 软件名)，然后安装，比如想要安装tftp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># opkg list | grep tftpd</span><br><span class="line">atftpd - 0.7-1 - TFTP server</span><br><span class="line">iputils-tftpd - 20101006-1 - Program tftpd from iputils Trivial File Transfer Protocol server.</span><br><span class="line">tftpd-hpa - 0.48-3 - An enhanced version of the BSD TFTP server</span><br><span class="line">通过上面的命令我找到我想要的tftp服务器的名字为tftpd-hpa，这样就可以先用</span><br><span class="line"></span><br><span class="line"># opkg download tftpd-hpa</span><br><span class="line">下载软件包，然后用</span><br><span class="line"></span><br><span class="line"># opkg install tftpd-hpa</span><br><span class="line">来安装。也可以直接用 </span><br><span class="line"></span><br><span class="line"># opkg install tftpd-hpa</span><br><span class="line">会直接先下载再自动安装。</span><br></pre></td></tr></table></figure><p>参考：</p></li></ul><p><a href="http://wiki.openwrt.org/zh-cn/doc/techref/opkg">1</a><br><a href="http://www.openwrtdl.com/wordpress/openwrt-install-software">2</a></p><h1 id="七、LAN-WAN-Bridge-VLAN基本概念"><a href="#七、LAN-WAN-Bridge-VLAN基本概念" class="headerlink" title="七、LAN/WAN/Bridge/VLAN基本概念"></a>七、LAN/WAN/Bridge/VLAN基本概念</h1><p><img src="https://img-blog.csdnimg.cn/20210712154205742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210712154954911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210712160958685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h1 id="八、OpenWRT常用命令"><a href="#八、OpenWRT常用命令" class="headerlink" title="八、OpenWRT常用命令"></a>八、OpenWRT常用命令</h1><ul><li><p>1.文件类、目录类命令：cd cat rm touch mkdir ls mv grep</p></li><li><p>2.文本编辑器命令: vi</p></li><li><p>3.权限类命令: chmod</p></li><li><p>4.模块命令:rmmod insmod modprobe lsmod</p></li><li><p>5.进程管理命令:ps top kill killall</p></li><li><p>6.文件下载上传工具: scp wget tftp</p></li><li><p>7.系统命令:mount dmesg reboot chpasswd data time du df</p></li><li><p>8.网络类命令:ifconfig arp route iptables netstat</p></li><li><p>9.OpenWrt专用命令:sysupgrade opkg</p></li></ul><h1 id="九、交叉编译工具链"><a href="#九、交叉编译工具链" class="headerlink" title="九、交叉编译工具链"></a>九、交叉编译工具链</h1><p><img src="https://img-blog.csdnimg.cn/20210712205751521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><blockquote><p><strong>打开~/.bashrc文件最末添加命令</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210713111901984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><blockquote><p><strong>Makefile的功能：configure/compile/install/clean</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* main.c */ </span><br><span class="line"> </span><br><span class="line">#include &quot;mytool1.h&quot;  </span><br><span class="line">#include &quot;mytool2.h&quot; </span><br><span class="line"> </span><br><span class="line">int main(int argc，char **argv) </span><br><span class="line">&#123; </span><br><span class="line"> mytool1_print(&quot;hello&quot;)； </span><br><span class="line"> mytool2_print(&quot;hello&quot;)； </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* mytool1.h */ </span><br><span class="line"> </span><br><span class="line">#ifndef _MYTOOL_1_H </span><br><span class="line">#define _MYTOOL_1_H </span><br><span class="line"> </span><br><span class="line">void mytool1_print(char *print_str)； </span><br><span class="line">#endif </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/* mytool1.c */ </span><br><span class="line"> </span><br><span class="line">#include &quot;mytool1.h&quot; </span><br><span class="line"> </span><br><span class="line">void mytool1_print(char *print_str) </span><br><span class="line"> &#123; </span><br><span class="line"> printf(&quot;This is mytool1 print %s &quot;，print_str)； </span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">/* mytool2.h */ </span><br><span class="line">  </span><br><span class="line">#ifndef _MYTOOL_2_H </span><br><span class="line">#define _MYTOOL_2_H </span><br><span class="line">  </span><br><span class="line">void mytool2_print(char *print_str)； </span><br><span class="line"> </span><br><span class="line">#endif </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">/* mytool2.c */ </span><br><span class="line"> #include &quot;mytool2.h&quot; </span><br><span class="line"> </span><br><span class="line"> void mytool2_print(char *print_str) </span><br><span class="line"> &#123; </span><br><span class="line"> printf(&quot;This is mytool2 print %s &quot;，print_str)； </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c main.c </span><br><span class="line">gcc -c mytool1.c</span><br><span class="line">gcc -c mytool2.c </span><br><span class="line">gcc -o main main.o mytool1.o mytool2.o</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main：main.o mytool1.o mytool2.o </span><br><span class="line">gcc -o main main.o mytool1.o mytool2.o </span><br><span class="line"> </span><br><span class="line">main.o：main.c mytool1.h mytool2.h </span><br><span class="line">gcc -c main.c </span><br><span class="line">  </span><br><span class="line">mytool1.o：mytool1.c mytool1.h </span><br><span class="line">gcc -c mytool1.c </span><br><span class="line">  </span><br><span class="line">mytool2.o：mytool2.c mytool2.h </span><br><span class="line">gcc -c mytool2.c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有了这个Makefile文件，不论我们什么时候修改了源程序当中的什么文件，我们只要执行make命令，我们的编译器都只会去编译和我们修改的文件有关的文件，其它的文件它连理都不想去理的。 </span><br><span class="line"> </span><br><span class="line">下面我们学习Makefile是如何编写的。 </span><br><span class="line"> </span><br><span class="line">在Makefile中也#开始的行都是注释行.Makefile中最重要的是描述文件的依赖关系的说明。一般的格式是： </span><br><span class="line">target：components </span><br><span class="line">TAB rule </span><br><span class="line"> </span><br><span class="line">第一行表示的是依赖关系。第二行是规则。 </span><br><span class="line"> </span><br><span class="line">比如说我们上面的那个Makefile文件的第二行。 </span><br><span class="line">main：main.o mytool1.o mytool2.o </span><br><span class="line"> </span><br><span class="line">表示我们的目标(target)main的依赖对象(components)是main.o mytool1.omytool2.o 当倚赖的对象在目标修改后修改的话，就要去执行规则一行所指定的命令。就象我们的上面那个Makefile第三行所说的一样要执行 gcc-o main main.o mytool1.o mytool2.o 注意规则一行中的TAB表示那里是一个TAB键 </span><br><span class="line"> </span><br><span class="line">Makefile有三个非常有用的变量。分别是$@，$^，$&lt;代表的意义分别是： </span><br><span class="line"> </span><br><span class="line">$@--目标文件，$^--所有的依赖文件，$&lt;--第一个依赖文件。 </span><br><span class="line"> </span><br><span class="line">如果我们使用上面三个变量，那么我们可以简化我们的Makefile文件为： </span><br><span class="line"> </span><br><span class="line"># 这是简化后的Makefile </span><br><span class="line"> </span><br><span class="line">main：main.o mytool1.o mytool2.o </span><br><span class="line"> </span><br><span class="line">gcc -o $@ $^        //此处$@代表main，$^ 代表所有的依赖 main.o mytool1.o mytool2.o </span><br><span class="line"> </span><br><span class="line">main.o：main.c mytool1.h mytool2.h </span><br><span class="line"> </span><br><span class="line">gcc -c $&lt; </span><br><span class="line"> </span><br><span class="line">mytool1.o：mytool1.c mytool1.h </span><br><span class="line"> </span><br><span class="line">gcc -c $&lt; </span><br><span class="line"> </span><br><span class="line">mytool2.o：mytool2.c mytool2.h </span><br><span class="line"> </span><br><span class="line">gcc -c $&lt; </span><br><span class="line"> </span><br><span class="line">经过简化后,我们的Makefile是简单了一点，不过人们有时候还想简单一点。这里我们学习一个Makefile的缺省规则 </span><br><span class="line"> </span><br><span class="line">.c.o： </span><br><span class="line"> </span><br><span class="line">gcc -c $&lt; </span><br><span class="line"> </span><br><span class="line">这个规则表示所有的 .o文件都是依赖与相应的.c文件的。例如mytool.o依赖于mytool.c这样Makefile还可以变为： </span><br><span class="line"> </span><br><span class="line"># 这是再一次简化后的Makefile </span><br><span class="line"> </span><br><span class="line">main：main.o mytool1.o mytool2.o </span><br><span class="line"> </span><br><span class="line">gcc -o $@ $^ </span><br><span class="line"> </span><br><span class="line">.c.o： </span><br><span class="line"> </span><br><span class="line">gcc -c $&lt; </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210713211541124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h1 id="十、Flash布局"><a href="#十、Flash布局" class="headerlink" title="十、Flash布局"></a>十、Flash布局</h1><blockquote><p><strong>常见文件系统，ext3/ext4 磁盘文件系统，tmp</strong><br><img src="https://img-blog.csdnimg.cn/20210712212123306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>Flash布局:最下面是uboot/CFE，再往上是固件（sys upgrade.bin, 一般是通过mk image工具生成的），在jffs2一般就是overlay分区</p></blockquote><p>Overlay的系统，一般都是只读分区，加一个可写的jffs2分区构成。</p><p>固件的大小变化，会导致jffs2分区不停的左右移动，格式化。</p><p>固件有固件头，上面是kernel，再向上是只读的rootfs/squashfs。 squashfs是压缩的，只读。一般写/删除文件都是在jffs2分区操作。为了尽量降低flash写的消耗，采用overlay机制。</p><p>Jffs2是可写的分区，一般是overlay的，比如叠加在制度的squashfs上面。<br><img src="https://img-blog.csdnimg.cn/20210712212712138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>squashfs挂载到/rom目录</p><p>jffs2分区挂载到/overlay目录</p><p>通过overlayfs让overlay目录成为根目录/</p><p>tempfs 用于存放临时文件，放置到内存中。如果不限制log大小，进行定时存储，容易丢失log</p><p> ext2/3 用于给硬盘使用。openwrt使用该文件系统，意外断电会导致ext文件系统奔溃，因为意外断电会丢掉inode</p><p>flash设备有坏块的概念，采用overlay的概念保护存储介质<br><img src="https://img-blog.csdnimg.cn/20210712213428554.png" alt="image"><br>固件，就是固件头+内核+rootfs 合在一起，通过mk image工具合在一起</p><p> rootfs是一个squash文件，root.squashfs, 通过file命令查看squash文件的细节<br> <img src="https://img-blog.csdnimg.cn/20210712212946140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br> 固件是标准的格式，这也是为什么有些android固件被解包，下面是用ghex打开root.squashfs看到的头信息，该文件没有终止符<br> <img src="https://img-blog.csdnimg.cn/20210712213157360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li><p>下面是用ghex打开打包好的.bin的固件，发现有终止符DEADC0DE</p><p><img src="https://img-blog.csdnimg.cn/20210712213223547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210712213402351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p></li></ul><p>终止符DEADC0DE</p><p>以上用ghex工具进行打开</p><p>apt-get install ghex</p><p>通过终止符判断固件的大小</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openwrt学习笔记21_30</title>
      <link href="/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B021_30/"/>
      <url>/2021/08/18/Openwrt%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B021_30/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="二十一、OpenWrt-基于GPIO、Hotplug、DTS-的按键实验"><a href="#二十一、OpenWrt-基于GPIO、Hotplug、DTS-的按键实验" class="headerlink" title="二十一、OpenWrt 基于GPIO、Hotplug、DTS 的按键实验"></a>二十一、OpenWrt 基于GPIO、Hotplug、DTS 的按键实验</h1><p><a href="https://openwrt.org/docs/guide-user/hardware/hardware.button?s[]=button">https://openwrt.org/docs/guide-user/hardware/hardware.button?s[]=button</a></p><p><a href="https://openwrt.org/docs/techref/hardware/port.gpio">https://openwrt.org/docs/techref/hardware/port.gpio</a></p><p><a href="https://openwrt.org/docs/guide-user/hardware/pwm">https://openwrt.org/docs/guide-user/hardware/pwm</a></p><p><a href="https://openwrt.org/docs/guide-user/hardware/mmc_over_gpio">https://openwrt.org/docs/guide-user/hardware/mmc_over_gpio</a></p><p><a href="http://www.forgotfun.org/2016/09/%20MediaTech%28MTK%29%20MT7628%20MT7688%20Linux%20%E4%B8%8B%E4%BD%BF%E7%94%A8mmap%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E6%80%81%20GPIO%20%E9%A9%B1%E5%8A%A8%20.html">http://www.forgotfun.org/2016/09/%20MediaTech%28MTK%29%20MT7628%20MT7688%20Linux%20%E4%B8%8B%E4%BD%BF%E7%94%A8mmap%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E6%80%81%20GPIO%20%E9%A9%B1%E5%8A%A8%20.html</a></p><blockquote><p>GPIO 是 General Purpose Input Output的缩写，是一种输入、输出的接口，但是不支持输入和输出。路由器部分LED灯、复位键、wps键都是基于GPIO实现的。GPIO除了实现按键和LED控制，还可以模拟各种时序比如：SD、PWM、SPI、I2C等。在很多智能家居的应用中，gpio用来实现控制继电器的通断。</p><p>GPIO的控制方式一般有三种：sysfs、ioctl、mmap。三种方式各有优缺点…</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210718073215480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>GPIO引脚，默认拉高，接 VCC<br><img src="https://img-blog.csdnimg.cn/20210718073448821.png" alt="image"></li><li><p>驱动编完生成bin文件，将该bin文件copy到开发板<br><img src="https://img-blog.csdnimg.cn/20210718073626567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p></li><li><p>在开发板中升级FW<br><img src="https://img-blog.csdnimg.cn/20210718074339409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>sysfs- 文件</p></li></ul><p>ioctl- 系统调用</p><p>mmap- 内存</p><p>sysfs文件：不需要用c，可用lua，python写。缺点是文件速度慢</p><p>ioctl需要用c、c++混编，.so,速度快</p><p>mmap用c语言，速度非常快</p><p><img src="https://img-blog.csdnimg.cn/20210718074826743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718074943243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p><a href="https://openwrt.org/docs/techref/hardware/port.gpio">https://openwrt.org/docs/techref/hardware/port.gpio</a><br><img src="https://img-blog.csdnimg.cn/20210718075334474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;42&quot; &gt; export 目录中新增了gpio42这个文件夹</span><br><span class="line"></span><br><span class="line">echo “out” &gt; direction 将gpio的方向设置为输出</span><br><span class="line"></span><br><span class="line">echo “1” &gt; value 输出为高</span><br><span class="line"></span><br><span class="line">echo “0” &gt; value 输出为低</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二十二、基于DTS适配RAM、Flash、复位键、波特率、端口布局实验"><a href="#二十二、基于DTS适配RAM、Flash、复位键、波特率、端口布局实验" class="headerlink" title="二十二、基于DTS适配RAM、Flash、复位键、波特率、端口布局实验"></a>二十二、基于DTS适配RAM、Flash、复位键、波特率、端口布局实验</h1><p><img src="https://img-blog.csdnimg.cn/20210718085317964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/202107180853405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>CPU里面，与实际的物理端口port mapping布局</li></ul><p><img src="https://img-blog.csdnimg.cn/2021071808583058.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718085938511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w@w:/home/openwrt/target/linux/ramips/dts$ cat rt5350_zyxel_keenetic-lite-b.dts </span><br><span class="line">// SPDX-License-Identifier: GPL-2.0-or-later</span><br><span class="line">#include &quot;rt5350.dtsi&quot;</span><br><span class="line">#include &lt;dt-bindings/gpio/gpio.h&gt;</span><br><span class="line">#include &lt;dt-bindings/input/input.h&gt;</span><br><span class="line"> </span><br><span class="line">/ &#123;</span><br><span class="line">    compatible = &quot;zyxel,keenetic-lite-b&quot;, &quot;ralink,rt5350-soc&quot;;</span><br><span class="line">    model = &quot;ZyXEL Keenetic Lite Rev.B&quot;;</span><br><span class="line"> </span><br><span class="line">    aliases &#123;</span><br><span class="line">        led-boot = &amp;led_power;</span><br><span class="line">        led-failsafe = &amp;led_power;</span><br><span class="line">        led-running = &amp;led_power;</span><br><span class="line">        led-upgrade = &amp;led_power;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    leds &#123;</span><br><span class="line">        compatible = &quot;gpio-leds&quot;;</span><br><span class="line"> </span><br><span class="line">        led_power: power &#123;</span><br><span class="line">            label = &quot;green:power&quot;;</span><br><span class="line">            gpios = &lt;&amp;gpio0 9 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        wps &#123;</span><br><span class="line">            label = &quot;green:wps&quot;;</span><br><span class="line">            gpios = &lt;&amp;gpio0 14 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    keys &#123;</span><br><span class="line">        compatible = &quot;gpio-keys&quot;;</span><br><span class="line"> </span><br><span class="line">        wps &#123;</span><br><span class="line">            label = &quot;wps&quot;;</span><br><span class="line">            gpios = &lt;&amp;gpio0 0 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">            linux,code = &lt;KEY_WPS_BUTTON&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        reset &#123;</span><br><span class="line">            label = &quot;reset&quot;;</span><br><span class="line">            gpios = &lt;&amp;gpio0 10 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">            linux,code = &lt;KEY_RESTART&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">&amp;spi0 &#123;</span><br><span class="line">    status = &quot;okay&quot;;</span><br><span class="line"> </span><br><span class="line">    flash@0 &#123;</span><br><span class="line">        compatible = &quot;jedec,spi-nor&quot;;</span><br><span class="line">        reg = &lt;0&gt;;</span><br><span class="line">        spi-max-frequency = &lt;60000000&gt;;</span><br><span class="line"> </span><br><span class="line">        partitions &#123;</span><br><span class="line">            compatible = &quot;fixed-partitions&quot;;</span><br><span class="line">            #address-cells = &lt;1&gt;;</span><br><span class="line">            #size-cells = &lt;1&gt;;</span><br><span class="line"> </span><br><span class="line">            partition@0 &#123;</span><br><span class="line">                label = &quot;u-boot&quot;;</span><br><span class="line">                reg = &lt;0x0 0x30000&gt;;</span><br><span class="line">                read-only;</span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            partition@30000 &#123;</span><br><span class="line">                label = &quot;u-boot-env&quot;;</span><br><span class="line">                reg = &lt;0x30000 0x10000&gt;;</span><br><span class="line">                read-only;</span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            factory: partition@40000 &#123;</span><br><span class="line">                label = &quot;factory&quot;;</span><br><span class="line">                reg = &lt;0x40000 0x10000&gt;;</span><br><span class="line">                read-only;</span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            partition@50000 &#123;</span><br><span class="line">                compatible = &quot;denx,uimage&quot;;</span><br><span class="line">                label = &quot;firmware&quot;;</span><br><span class="line">                reg = &lt;0x50000 0x7b0000&gt;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">&amp;state_default &#123;</span><br><span class="line">    gpio &#123;</span><br><span class="line">        groups = &quot;uartf&quot;;</span><br><span class="line">        function = &quot;gpio&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">&amp;ethernet &#123;</span><br><span class="line">    mtd-mac-address = &lt;&amp;factory 0x28&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">&amp;esw &#123;</span><br><span class="line">    mediatek,portmap = &lt;0x2f&gt;;</span><br><span class="line">    mediatek,led_polarity = &lt;0x17&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">&amp;wmac &#123;</span><br><span class="line">    ralink,led-polarity = &lt;1&gt;;</span><br><span class="line">    ralink,mtd-eeprom = &lt;&amp;factory 0x0&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="二十三、MTD-技术简析和工具使用"><a href="#二十三、MTD-技术简析和工具使用" class="headerlink" title="二十三、MTD 技术简析和工具使用"></a>二十三、MTD 技术简析和工具使用</h1><p><img src="https://img-blog.csdnimg.cn/2021071809455310.png" alt="image"></p><ul><li>size：分区大小</li><li>erazesize：0x1000 = 4096 = 4Kbit，相当于磁盘分区的大小。<br><img src="https://img-blog.csdnimg.cn/20210718094923380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg = &lt;起始地址 size&gt;；</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210718095110863.png" alt="image"></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/mtdblocks6: 时overlay，可写的文件系统</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021071809523833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071809523833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>dmesg中看到的各个分区的大小：起始地址 - 结束地址</p><p>firmware里面包括kernel,rootfs,rootfs_data三部分。</p><p>rootfs_data属于可写的，overlay那一层<br><img src="https://img-blog.csdnimg.cn/20210718095531213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>mtd0.bin 与 mtdblock0.bin 内容是一样的，只是mtd0基于底层api，mtdblock0基于POSIX api<br><img src="https://img-blog.csdnimg.cn/20210718095717467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>备份恢复：经mtd6.bin 回写到/dev/mtd6,/dev/mtdblock6。</p><p><img src="https://img-blog.csdnimg.cn/20210718095951242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718100042455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>mtd write 命令将 /tmp/mtd6.bin 写入 rootfs_data, 也就是/dev/mtd6</p><p>rootfs_data 是/dev/mtd6 的别名<br><img src="https://img-blog.csdnimg.cn/2021071810031437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718115453492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>用户态升级，只是将数据写入firmware起始地址 + 固件大小 得到的偏移地址开始的新的rootfs_data空间里面。</p><p> firmware：包括kernel分区1，rootfs分区2，rootfs_data分区3 三部分</p><p><img src="https://img-blog.csdnimg.cn/202107181200009.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>kernel/rootfs/rootfs_data三个分区的大小不可以调整，QC平台可以。<br><img src="https://img-blog.csdnimg.cn/20210718121153665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718121222153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718121425872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="二十四、补丁"><a href="#二十四、补丁" class="headerlink" title="二十四、补丁"></a>二十四、补丁</h1><p>OpenWrt官方推荐使用的是补丁工具是quilt， 用于target开发</p><p>一般开发者对开源社区：diff + patch的方式</p><p><a href="https://openwrt.org/docs/guide-developer/helloworld/start">https://openwrt.org/docs/guide-developer/helloworld/start</a></p><p> <a href="https://openwrt.org/submitting-patches">https://openwrt.org/submitting-patches</a><br><img src="https://img-blog.csdnimg.cn/20210718103614877.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718103647421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718103716187.png" alt="image"></p><hr><h1 id="二十五、杂记"><a href="#二十五、杂记" class="headerlink" title="二十五、杂记"></a>二十五、杂记</h1><p>路由器wifi性能优化：硬件 升级RAM，从DDR3 - DDR4? </p><p>软件：OS约占40%，app 60%，关掉不必要的app<br><img src="https://img-blog.csdnimg.cn/20210718114219806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718114350664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071811450886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718114543157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718114620769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20210718114649229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></h2><h1 id="二十六、wifidog移植"><a href="#二十六、wifidog移植" class="headerlink" title="二十六、wifidog移植"></a>二十六、wifidog移植</h1><p> <a href="https://gitee.com/wifidog/wifidog">https://gitee.com/wifidog/wifidog</a><br> <img src="https://img-blog.csdnimg.cn/20210718214056267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br> 本机编译一次，config + make</p><p>a- 确保代码没问题</p><p>b- 查看代码lib的依赖关系，需要那些库，方便写dep的脚本</p><p>c- 了解程序和lib的位置、目录，方便写install的脚本</p><p>d- 使用一次，了解方法，init.d/，</p><p>package的makefile<br><img src="https://img-blog.csdnimg.cn/20210718214532247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>依赖关系、库</p><p>config的参数</p><p>make的参数</p><p>install的脚步 cp xx xx<br><img src="https://img-blog.csdnimg.cn/20210718214638455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>指定库的位置 </p><p>一些功能的开关 enable xxx</p><p>生产一些make工具相关的杂项<br><img src="https://img-blog.csdnimg.cn/20210718214751751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br>make clean</p><p>make disclean</p><p>make install<br><img src="https://img-blog.csdnimg.cn/20210718214936993.png" alt="image"></p><p>先下载wifidog代码<a href="https://gitee.com/wifidog/wifidog">https://gitee.com/wifidog/wifidog</a></p><p>autoconfig生成config文件。代码中没有config文件，只有configure.in,因此需要autoconf<br><img src="https://img-blog.csdnimg.cn/20210718215116322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210718215228780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readelf 查看动态依赖库</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021071821544218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718215514798.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071821554842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>在lede/package/examples目录下新建wificat文件夹，将wifidog的源码copy到该目录下的src目录（lede/package/examples/wificat/src）中</p><p>编写lede/package/examples/wificat目录下的makefile</p><p>Makefile<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is free software, licensed under the GNU General Public License v2.</span><br><span class="line"># See /LICENSE for more information.</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line">include $(TOPDIR)/rules.mk</span><br><span class="line"> </span><br><span class="line">PKG_NAME:=wificat</span><br><span class="line">PKG_RELEASE:=2</span><br><span class="line"> </span><br><span class="line">PKG_FLAGS:=nonshared</span><br><span class="line"> </span><br><span class="line">include $(INCLUDE_DIR)/package.mk</span><br><span class="line"> </span><br><span class="line">define Package/wificat</span><br><span class="line">  SECTION:=utils</span><br><span class="line">  CATEGORY:=Base system</span><br><span class="line">  TITLE:=This is wificat</span><br><span class="line">  MAINTAINER:=LuMingFeng &lt;forgotfun@qq.com&gt;</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define Package/wificat/description</span><br><span class="line"> This package is wificat package.</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define Build/Compile</span><br><span class="line">    $(MAKE) -C $(PKG_BUILD_DIR) \</span><br><span class="line">        CC=&quot;$(TARGET_CC)&quot; \</span><br><span class="line">        CFLAGS=&quot;$(TARGET_CFLAGS) -Wall&quot;</span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">define Package/wificat/install</span><br><span class="line">    $(INSTALL_DIR) $(1)/usr/bin</span><br><span class="line">    $(INSTALL_BIN) $(PKG_BUILD_DIR)/src/.libs/wifidog $(1)/usr/bin/</span><br><span class="line">    $(INSTALL_DIR) $(1)/usr/lib</span><br><span class="line">    $(INSTALL_BIN) $(PKG_BUILD_DIR)/libhttpd/.libs/libhttpd.* $(1)/usr/lib/ </span><br><span class="line">endef</span><br><span class="line"> </span><br><span class="line">$(eval $(call BuildPackage,wificat))</span><br></pre></td></tr></table></figure></p><p>外部依赖 = depends ，创建文件夹，放入文件中</p><p>make menuconfig 选择wificat这一个包</p><p><img src="https://img-blog.csdnimg.cn/2021071822013730.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718220217570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><h2 id="底层依赖等，搞清楚以后，再写Makefile"><a href="#底层依赖等，搞清楚以后，再写Makefile" class="headerlink" title="底层依赖等，搞清楚以后，再写Makefile"></a>底层依赖等，搞清楚以后，再写Makefile    </h2><h1 id="二十七、动态库，静态库"><a href="#二十七、动态库，静态库" class="headerlink" title="二十七、动态库，静态库"></a>二十七、动态库，静态库</h1><p><img src="https://img-blog.csdnimg.cn/20210718225354419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718225436577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li><p>example.c</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">void hello(void)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210718225631913.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718225705655.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/2021071822575192.png" alt="image"></p></li><li><p>用Makefile实现<br><img src="https://img-blog.csdnimg.cn/20210718225847436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p></li><li><p>继续优化<br><img src="https://img-blog.csdnimg.cn/20210718225916749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$@--目标文件，$^--所有的依赖文件，$&lt;--第一个依赖文件。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210718230534744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>main.c</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    hello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210718230400588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p><img src="https://img-blog.csdnimg.cn/2021071823050969.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718230610311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>Makefile</li></ul><hr><p><img src="https://img-blog.csdnimg.cn/20210718230908426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>rm -rf 之前的@是用于取消回显。在执行make clean的时候，不显示执行的命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">CFLAGS = -Os -Wall -fPIC</span><br><span class="line">CFLAGS += -I. </span><br><span class="line"> </span><br><span class="line">LDFLAGS =</span><br><span class="line"> </span><br><span class="line">OBJS = example.o</span><br><span class="line"> </span><br><span class="line">all: libexample.so libexample.a</span><br><span class="line"> </span><br><span class="line">libexample.so: $(OBJS)</span><br><span class="line">    @$(LD) $(LDFLAGS) -shared -o $@ $^</span><br><span class="line"> </span><br><span class="line">libexample.a: $(OBJS)</span><br><span class="line">    @rm -f $@</span><br><span class="line">    @$(AR) cruv $@ $^</span><br><span class="line"> </span><br><span class="line">clean:</span><br><span class="line">    rm -f *.o *.so *.a .*.depend</span><br><span class="line"> </span><br><span class="line">%.o: %.c .%.depend</span><br><span class="line">    @$(CC) $(CFLAGS) -o $@ -c $&lt;</span><br><span class="line"> </span><br><span class="line">.depend: $(OBJS:%.o=%.c)</span><br><span class="line">    @$(CC) $(CFLAGS) -M $^ &gt; .depend</span><br><span class="line"> </span><br><span class="line">.%.depend: %.c</span><br><span class="line">    @$(CC) $(CFLAGS) -M $&lt; &gt; $@</span><br><span class="line"> </span><br><span class="line">-include $(OBJS:%.o=.%.depend)</span><br></pre></td></tr></table></figure><hr><h1 id="二十八、开发环境搭建"><a href="#二十八、开发环境搭建" class="headerlink" title="二十八、开发环境搭建"></a>二十八、开发环境搭建</h1><blockquote><ol><li>虚拟机<br><img src="https://img-blog.csdnimg.cn/2021071823193777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718232103747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718232359210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718232513521.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718233153114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718233153114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718233308668.png" alt="image"></li></ol></blockquote><ul><li>建议新建project目录，源代码下载到project目录下面。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210718233519112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718233554811.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718233632109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718233820118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718233926741.png" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make V=99</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021071823415675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><hr><h1 id="二十九、编译Uboot"><a href="#二十九、编译Uboot" class="headerlink" title="二十九、编译Uboot"></a>二十九、编译Uboot</h1><p><img src="https://img-blog.csdnimg.cn/20210718234609704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718234817475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718235018944.png" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718234919973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li>将程序解压到opt目录<br><img src="https://img-blog.csdnimg.cn/20210718235216381.png" alt="image"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/20210718235607125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>*make报错，发现是320bit系统兼容性的问题。64位系统默认没有安装32位兼容环境</p><p><img src="https://img-blog.csdnimg.cn/20210718235735376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210718235903941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><p>此时，接着make，就没有报错<br><img src="https://img-blog.csdnimg.cn/20210719000018682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719000058863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719000205107.png" alt="image"></p><h1 id="三十、烧录FW、UBOOT"><a href="#三十、烧录FW、UBOOT" class="headerlink" title="三十、烧录FW、UBOOT"></a>三十、烧录FW、UBOOT</h1><p>将开发板网络、串口与虚拟机连好，安装minicom，进入upgrade模式。</p><p>虚拟机网卡设置为桥接模式</p><p><img src="https://img-blog.csdnimg.cn/20210719000945511.png" alt="image"><br>虚拟机新加插入的串口</p><p>重启开发板，按下WPS button进入upgrade模式。按下2秒到7秒之间<br><img src="https://img-blog.csdnimg.cn/20210719000802729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p><ul><li><p>进入upgrade 模式后，自动打开自己的http服务器192.168.1.111，其中虚拟机桥接网卡的IP 192.168.1.10，同一网段<br><img src="https://img-blog.csdnimg.cn/20210719001200751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p></li><li><p>浏览器打开http服务，更新uboot，FW，ART（EEPROM）<br><img src="https://img-blog.csdnimg.cn/20210719001256943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719001454566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719001519698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"><br><img src="https://img-blog.csdnimg.cn/20210719001707150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2YyMTU3MTIw,size_16,color_FFFFFF,t_70" alt="image"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Objection使用学习笔记</title>
      <link href="/2021/08/13/Objection%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/13/Objection%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="Objection使用学习笔记"><a href="#Objection使用学习笔记" class="headerlink" title="Objection使用学习笔记"></a>Objection使用学习笔记</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -d -g com.tanwan.mobile.rxhjgwzy explore</span><br></pre></td></tr></table></figure><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -d -g com.tanwan.mobile.rxhjgwzy explore -P &#x27;C:\Users\Administrator\.objection\pluguns&#x27;</span><br></pre></td></tr></table></figure><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="内存堆搜索实例"><a href="#内存堆搜索实例" class="headerlink" title="* 内存堆搜索实例"></a>* 内存堆搜索实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android heap search instances com.tanwan.mobile.rxhjgwzy</span><br></pre></td></tr></table></figure><h3 id="实例ID-实例方法"><a href="#实例ID-实例方法" class="headerlink" title="* 实例ID 实例方法"></a>* 实例ID 实例方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android heap execute </span><br></pre></td></tr></table></figure><h3 id="查看当前可用的activity或者service"><a href="#查看当前可用的activity或者service" class="headerlink" title="* 查看当前可用的activity或者service"></a>* 查看当前可用的activity或者service</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking list activities/services</span><br></pre></td></tr></table></figure><h3 id="直接启动activity或者服务"><a href="#直接启动activity或者服务" class="headerlink" title="* 直接启动activity或者服务"></a>* 直接启动activity或者服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android intent launch_activity com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure><h3 id="列出内存中所有的类"><a href="#列出内存中所有的类" class="headerlink" title="* 列出内存中所有的类"></a>* 列出内存中所有的类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><h3 id="在内存中所有已加载的类中搜索包含特定关键词的类"><a href="#在内存中所有已加载的类中搜索包含特定关键词的类" class="headerlink" title="* 在内存中所有已加载的类中搜索包含特定关键词的类"></a>* 在内存中所有已加载的类中搜索包含特定关键词的类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking search classes display</span><br></pre></td></tr></table></figure><h3 id="生成-hook-的-js-代码"><a href="#生成-hook-的-js-代码" class="headerlink" title="* 生成 hook 的 js 代码"></a>* 生成 hook 的 js 代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking generate class javax.microedition.khronos.egl.EGLDisplay </span><br></pre></td></tr></table></figure><h3 id="在内存中所有已加载的类的方法中搜索包含特定关键词的方法"><a href="#在内存中所有已加载的类的方法中搜索包含特定关键词的方法" class="headerlink" title="* 在内存中所有已加载的类的方法中搜索包含特定关键词的方法"></a>* 在内存中所有已加载的类的方法中搜索包含特定关键词的方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking search methods display</span><br></pre></td></tr></table></figure><h3 id="hook类的方法（hook类里的所有方法-具体某个方法）"><a href="#hook类的方法（hook类里的所有方法-具体某个方法）" class="headerlink" title="* hook类的方法（hook类里的所有方法/具体某个方法）"></a>* hook类的方法（hook类里的所有方法/具体某个方法）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class 类名</span><br></pre></td></tr></table></figure><h3 id="hook类函数-在上面的基础上，额外dump参数，栈回溯，返回值"><a href="#hook类函数-在上面的基础上，额外dump参数，栈回溯，返回值" class="headerlink" title="* hook类函数 - 在上面的基础上，额外dump参数，栈回溯，返回值"></a>* hook类函数 - 在上面的基础上，额外dump参数，栈回溯，返回值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class 类名</span><br><span class="line">android hooking watch class_method 类名 --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><h2 id="Wallbreaker插件用法"><a href="#Wallbreaker插件用法" class="headerlink" title="Wallbreaker插件用法"></a>Wallbreaker插件用法</h2><ul><li>插件加载<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin load &#x27;C:\Users\Administrator\.objection\pluguns&#x27;</span><br><span class="line">//或者</span><br><span class="line">objection -d -g com.tanwan.mobile.rxhjgwzy explore -P &#x27;C:\Users\Administrator\.objection\pluguns&#x27;</span><br></pre></td></tr></table></figure></li><li>基本用法 Use wallbreaker command<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker objectsearch java.util.HashMap</span><br><span class="line">plugin wallbreaker objectdump &lt;object-handle&gt;</span><br></pre></td></tr></table></figure></li><li><strong><strong>Search</strong></strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wallbreaker classsearch &lt;type-pattern&gt;</span><br><span class="line">[return all matched class]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wallbreaker objectsearch &lt;instance-class-name&gt;</span><br><span class="line">[return all matched object-handle and toString]</span><br></pre></td></tr></table></figure></li><li><strong><strong>Dump</strong></strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wallbreaker classdump &lt;class-name&gt; [--fullname]</span><br><span class="line">[</span><br><span class="line">   pretty print class structure: fields declare, static field value, methods declare.</span><br><span class="line">      set --fullname to display package name of type name.</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wallbreaker objectdump &lt;object-handle&gt; [--fullname] [--as-class class-name]</span><br><span class="line">[</span><br><span class="line">   pretty print object structure: fields declare and value, methods declare.</span><br><span class="line">      set --fullname to display package name of type name;</span><br><span class="line">      set --as-class to cast instance type(super class, not interface).</span><br><span class="line">   if instance is a collection or map, dump all entries.</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div><p>—&gt; <a href="https://www.runoob.com">Markdown 教程</a></p><ul><li>aaaaaa<ul><li>bbb</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> Objection </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida学习笔记</title>
      <link href="/2021/08/13/frida%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/13/frida%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="Frida学习笔记"><a href="#Frida学习笔记" class="headerlink" title="Frida学习笔记"></a>Frida学习笔记</h1><ul><li><strong><a href="https://github.com/frida">官方地址</a></strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -l okhttp_poker.js -f com.example.demo --no-pause 可追加 </span><br><span class="line">-o [output filepath]保存到文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -f com.layabox.game.gsjh --no-pause -l _fcagent.js</span><br></pre></td></tr></table></figure><h2 id="手机中安装Frida服务端"><a href="#手机中安装Frida服务端" class="headerlink" title="手机中安装Frida服务端"></a>手机中安装Frida服务端</h2></li><li>下载<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ffrida%2Ffrida%2Freleases">frida-server</a></li><li>查看内核  uname -a 或者<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure>如果运行不了，关闭liunx的SELinux：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; /sys/fs/selinux/enforce</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2></li><li>端口映射<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">adb forward tcp:27043 tcp:27043</span><br></pre></td></tr></table></figure></li><li>查看<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida-ps -U</span><br><span class="line">* 安装更新</span><br><span class="line">pip3 install -U frida</span><br><span class="line">pip3 install -U frida-tools</span><br></pre></td></tr></table></figure></li><li>基本模块 frida-trace，frida-ps，frida，frida-discover</li><li><p><strong>hook so</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import frida</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">jscode = &quot;&quot;&quot;</span><br><span class="line">Java.perform(function()&#123;</span><br><span class="line">    Interceptor.attach(Module.findExportByName(&quot;libfridaso.so&quot;,&quot;Java_com_example_fridasostring_fridaSoString_FridaSo&quot;),&#123;</span><br><span class="line">        onEnter: function(args) &#123;</span><br><span class="line">            send(&quot;Hook start&quot;);</span><br><span class="line">            send(&quot;args[2]=&quot; + args[2]);</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function(retval)&#123;</span><br><span class="line">            send(&quot;return:&quot;+retval);</span><br><span class="line">            var env = Java.vm.getEnv(); //获取env对象，也就是native函数的第一个参数</span><br><span class="line">            var jstrings = env.newStringUtf(&quot;tamper&quot;); //因为返回的是字符串指针，使用我们需要构造一个newStringUtf对象，用来代替这个指针</span><br><span class="line">            retval.replace(jstrings); //替换返回值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">def printMessage(message,data):</span><br><span class="line">    if message[&#x27;type&#x27;] == &#x27;send&#x27;:</span><br><span class="line">        print(&#x27;[*] &#123;0&#125;&#x27;.format(message[&#x27;payload&#x27;]))</span><br><span class="line">    else:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(&#x27;com.example.fridasostring&#x27;)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(&#x27;message&#x27;,printMessage)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure></li><li><p><strong>hook Java层</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import frida  #导入frida模块</span><br><span class="line">import sys    #导入sys模块</span><br><span class="line"></span><br><span class="line">jscode = &quot;&quot;&quot;  #从此处开始定义用来Hook的javascript代码</span><br><span class="line">    Java.perform(function()&#123;  </span><br><span class="line">        var MainActivity = Java.use(&#x27;com.example.testfrida.MainActivity&#x27;); //获得MainActivity类</span><br><span class="line">        MainActivity.testFrida.implementation = function()&#123; //Hook testFrida函数，用js自己实现</span><br><span class="line">            send(&#x27;Statr! Hook!&#x27;); //发送信息，用于回调python中的函数</span><br><span class="line">            return &#x27;Change String!&#x27; //劫持返回值，修改为我们想要返回的字符串</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def on_message(message,data): #js中执行send函数后要回调的函数</span><br><span class="line">    print(message)</span><br><span class="line">    </span><br><span class="line">process = frida.get_remote_device().attach(&#x27;com.example.testfrida&#x27;) #得到设备并劫持进程com.example.testfrida（该开始用get_usb_device函数用来获取设备，但是一直报错找不到设备，改用get_remote_device函数即可解决这个问题）</span><br><span class="line">script = process.create_script(jscode) #创建js脚本</span><br><span class="line">script.on(&#x27;message&#x27;,on_message) #加载回调函数，也就是js中执行send函数规定要执行的python函数</span><br><span class="line">script.load() #加载脚本</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure></li><li><p>frida环境配置<a href="https://www.52pojie.cn/thread-836277-1-1.html">查看</a></p></li><li>frida操作手册<a href="https://github.com/hookmaster/frida-all-in-one">查看</a></li><li>hook jni<a href="https://github.com/chame1eon/jnitrace">查看</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> Objection </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Models 常用方法</title>
      <link href="/2021/07/26/Django_models/"/>
      <url>/2021/07/26/Django_models/</url>
      
        <content type="html"><![CDATA[<h1 id="Modles"><a href="#Modles" class="headerlink" title="Modles"></a>Modles</h1><ul><li>1  null   默认为False，True则表示可以为null。（空字符串在数据库中可能被存储为’’）</li><li>2  blank  默认为False，True表示可以为空。</li><li>3  choice  可选的，限制了该选项的字段值必须是所指定的choice中的一个。</li><li>4  db_column  数据库column名称。默认为本字段的名称。</li><li>5  db_index  如果为True的话，该字段的数据库索引将会被创建</li><li>6  default   设置该字段的默认值，可以是值也可以是对象。</li><li>7  editable   默认为True，若为False，则不会在admin/界面显示</li><li>8  primary_key  若设置为True，则表示将该字段设置为主键。一般情况下django默认会设置一个自增长的id主键。</li><li>9  unique   若设置为True，该字段值不可重复</li></ul><hr><ul><li>AutoField()[自增长]  根据已有id自增长的整形唯一字段</li><li>BooleanField()  布尔型字段</li><li>CharField() [变长] 字符型字段</li><li>DateTimeField() 日期和时间字段，值为datetime.datetime实例</li><li>DecimalField()  混合精度的小数型数字字段</li><li>EmailField(max_length=254, **options)  邮件字段</li><li>FileField(upload_to=None, max_length=100, **options)  文件上传字段</li><li>FloatField()  浮点字段</li><li>ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options) 图像字段</li><li>IntegerField  整形字段。</li><li>GenericIPAddressField(protocol=’both’, unpack_ipv4=False, **options)  ip地址字段<br>TextField()   与CharField类似，但一般用来存储体积较大的文本。</li><li>URLField(max_length=200, **options)    URL字段</li><li>TimeField(auto_now=False, auto_now_add=False, **options)   时间字段，其值为datetime.time实例</li></ul><hr><ul><li>1  ForeignKey(othermodel, on_delete, **options)  多对一或者一对多或者外键字段。</li><li>2  ManyToManyField(othermodel, **options)  多对多字段。</li><li>3  OneToOneField(othermodel, on_delete, parent_link=False, **options)  一对一字段。</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuerySet常用方法</title>
      <link href="/2021/07/26/Django_QuerySet/"/>
      <url>/2021/07/26/Django_QuerySet/</url>
      
        <content type="html"><![CDATA[<h1 id="QuerySet常用方法"><a href="#QuerySet常用方法" class="headerlink" title="QuerySet常用方法"></a>QuerySet常用方法</h1><ul><li>使用 connection.queries 可以查看sql语句</li></ul><ul><li>filter 将满足条件的结果返回，返回值为QuerySet对象</li></ul><ul><li>exclude 将满足条件的结果过滤掉,返回值为QuerySet对象</li><li>annotate 给QuerySet中的每一个对象都添加一个查询表达式，（Q,F,聚合函数）的字段</li><li>order_by 安装某个字段进行排序，默认为从小到大排序，如果想要重大到小可以在字段前加“-”,需要注意</li><li>order_by可以传递多个参数，会按照先后级别进行排序，而且order_by还可以用annotate新增的字段来排序，注意：order_by重复调用会只会保存最后一个。</li><li>values:提取需要哪些字段，默认会把全部都提取出来。返回的结果是QuerySet，但是其中包裹的不是模型，而是字典，如果想要提取关联数据，那么可以通过F表达式来完成。values也可以使用聚合函数values_list 提取需要字段，返回QuerySet，其中包裹的元组，如果数据只有一条，则可以使用flat=True进行扁平化处理，直接返回结果</li><li>all 方法：返回全部数据（返回包裹对象的QuerySet）</li><li>select_related : 可以将关联的对象一起查询出来，只能用于外键连接的形式（一对多或者一对一的形式）</li><li>prefetch_related : 使用的时候传入反向引用的时候调用的名称默认为 filed_set，使用这个方式可以用来查询多对一或者多对多的方式，也可以用来查询一对一或者一对多的，但是不推荐。</li><li>defer : 过滤掉不需要的字段，返回值是一个包裹着模型的QuerySet</li><li>only : 提取某些字段，返回一个包裹模型的QuerySet</li><li>get : 直接返回对象，只能返回一条数据，如果返回数据超过一条就会报错，如果没有匹配到任何数据也会报错。</li><li>create : 用于增加一条数据，并且将数据保存在数据库中，相当于先创建数据，然后调用save方法</li><li>get_or_create : 如果给定的条件存在数据就查找返回，如果不存在就创建一个，然后在返回，返回结果是一个元组，元组中两个内容，第一个是模型对象，第二个是bool值，如果没有创建返回False，如果创建了返还True。</li><li>bulk_create ：可以一次性创建多条数据。</li><li>count ：获取满足条件的数据的个数</li><li>first,last 分别返回QuerySet中第一条和最后一条数据</li><li>exists ： 判断数据是否存在，存在返回True，不存在返回False</li><li>distinct : 去重，默认按照全部字段判断。注意如果和order_by同时使用会失效</li><li>update ：更新数据</li><li>delete : 删除数据，需要注意：字段中on_delete的级联删除方式</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django - ForeignKey 用法</title>
      <link href="/2021/07/26/Django_ForeignKey/"/>
      <url>/2021/07/26/Django_ForeignKey/</url>
      
        <content type="html"><![CDATA[<h1 id="ForeignKey"><a href="#ForeignKey" class="headerlink" title="ForeignKey"></a>ForeignKey</h1><h2 id="1-创建Model-测试"><a href="#1-创建Model-测试" class="headerlink" title="1.创建Model 测试"></a>1.创建Model 测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;User&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    author = models.ForeignKey(<span class="string">&#x27;User&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">&#x27;Article&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-引入"><a href="#2-引入" class="headerlink" title="2.引入"></a>2.引入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Order_Session, db_wx_login,User,Article</span><br></pre></td></tr></table></figure><h2 id="3-外键的方式引用"><a href="#3-外键的方式引用" class="headerlink" title="3. 外键的方式引用"></a>3. 外键的方式引用</h2><p>  在django中，如果这个模型被其它模型使用外键的方式引用，那么django会自动给这个模型添加一个属性，这个属性的名字为：引用的模型名称小写形式_set 。上边Article模型引用了User模型，所以User模型会被django添加一个属性为：article_set，返回的也是一个QuerySet，也可使用all方法获取全部文章，或者使用first获取第一篇文章。</p><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(request.method)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建测试数据</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;user = User(username=&#x27;lxc&#x27;, password=&#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">    user.save()</span></span><br><span class="line"><span class="string">    article = Article(title=&#x27;测试标题&#x27;, content=&#x27;测试内容&#x27;)</span></span><br><span class="line"><span class="string">    article.author = user</span></span><br><span class="line"><span class="string">    article.save()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#pk代表primary key 大部分时候==id</span></span><br><span class="line">    <span class="comment">#先查询User表id=4的对象给author，在查author在Article的对象</span></span><br><span class="line">    abc = Article.objects.<span class="built_in">filter</span>(author=User.objects.get(<span class="built_in">id</span>=<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> abc:</span><br><span class="line">        <span class="comment">#&lt;class &#x27;django.db.models.query.QuerySet&#x27;&gt; == abc</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;abc: &#x27;</span>,item.title,item.content,item.author_id,<span class="built_in">type</span>(abc))</span><br><span class="line">    <span class="comment">#user = &lt;class &#x27;api.models.User&#x27;&gt;</span></span><br><span class="line">    user = User.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b1: &#x27;</span>,user.username,user.password,user.<span class="built_in">id</span>,<span class="built_in">type</span>(user))</span><br><span class="line">    b = user.article_set.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;b2: &#x27;</span>,item.title,item.content,item.author_id)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="built_in">all</span> = Article.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;all: &#x27;</span>,item,item.title,item.content,item.author_id)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;post_create It is not a POST request!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习知识Markdown基础</title>
      <link href="/2021/07/25/%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86Makedown%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/07/25/%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86Makedown%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<!-- https://www.bootcdn.cn/botui/ --><p><link href="https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css" rel="stylesheet"></p><link href="https://cdn.bootcss.com/botui/0.3.9/botui.min.css" rel="stylesheet"><!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 --><div class="entry-content">  <div class="moe-mashiro" style="text-align:center; font-size: 50px; margin-bottom: 20px;">[崖墓の小屋]</div>  <div id="hello-mashiro" class="popcontainer" style="min-height: 300px; padding: 2px 6px 4px; background-color: rgb(36, 200, 255); border-radius: 10px;">    <center>    <p>    </p>    <h4>    与&nbsp;<ruby>    cungudafa&nbsp;<rp>    （</rp>    <rt>    真（ま）白（しろ）</rt>    <rp>    ）</rp>    </ruby>    对话中...</h4>    <p>    </p>    </center>    <bot-ui></botui>  </div></div><!--<script src="https://cungudafa.gitee.io/js/botui.js></script>--><script src="/js/third-party/botui.js"></script><script>bot_ui_ini()</script><h1 id="学习知识Makedown基础"><a href="#学习知识Makedown基础" class="headerlink" title="学习知识Makedown基础"></a>学习知识Makedown基础</h1><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h3><h4 id="一-目录"><a href="#一-目录" class="headerlink" title="一. 目录"></a>一. 目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h4 id="二-段落"><a href="#二-段落" class="headerlink" title="二. 段落"></a>二. 段落</h4><p>Markdown [段落]没有特殊的格式，直接<em>编写</em>文字就好，段落的换行是使用两个以上空格加上回车。<strong>回车</strong></p><h4 id="三-字体"><a href="#三-字体" class="headerlink" title="三. 字体"></a>三. 字体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><hr><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p><hr><h4 id="四-分隔线"><a href="#四-分隔线" class="headerlink" title="四. 分隔线"></a>四. 分隔线</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id=""><a href="#" class="headerlink" title="- - -"></a>- - -</h2><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h4 id="五-删除线"><a href="#五-删除线" class="headerlink" title="五. 删除线"></a>五. 删除线</h4><p>GOOGLE.COM<br><del>BAIDU.COM</del></p><h4 id="六-下划线"><a href="#六-下划线" class="headerlink" title="六. 下划线"></a>六. 下划线</h4><p><u>带下划线文本</u></p><hr><h4 id="七-脚注"><a href="#七-脚注" class="headerlink" title="七. 脚注"></a>七. 脚注</h4><p><sup><a href="#fn_要注明的文本" id="reffn_要注明的文本">要注明的文本</a></sup><br>创建脚注格式类似这样 <sup><a href="#fn_RUNOOB" id="reffn_RUNOOB">RUNOOB</a></sup>。<br><sup><a href="#fn_RUNOOB" id="reffn_RUNOOB">RUNOOB</a></sup>: 菜鸟教程 — 学的不仅是技术，更是梦想！！！</p><hr><h4 id="八-列表"><a href="#八-列表" class="headerlink" title="八. 列表"></a>八. 列表</h4><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><hr><h4 id="九-区块中使用列表"><a href="#九-区块中使用列表" class="headerlink" title="九. 区块中使用列表"></a>九. 区块中使用列表</h4><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h4 id="十-列表中使用区块"><a href="#十-列表中使用区块" class="headerlink" title="十. 列表中使用区块"></a>十. 列表中使用区块</h4><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h4 id="十一-区块-引用"><a href="#十一-区块-引用" class="headerlink" title="十一. 区块 引用"></a>十一. 区块 引用</h4><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h4 id="十二-代码"><a href="#十二-代码" class="headerlink" title="十二. 代码"></a>十二. 代码</h4><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），代码区块使用 4 个空格或者一个制表符（Tab 键）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="十三-链接"><a href="#十三-链接" class="headerlink" title="十三. 链接"></a>十三. 链接</h4><p><a href="链接地址">链接名称</a><br>或者<br>&lt;链接地址&gt;</p><p>这是一个链接 <a href="https://www.runoob.com">菜鸟教程</a></p><h5 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h5><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h4 id="十四-图片"><a href="#十四-图片" class="headerlink" title="十四. 图片"></a>十四. 图片</h4><p><img src="图片地址" alt="图片alt" title="&#39;图片title&#39;"></p><hr><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</p><hr><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><hr><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><hr><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><hr><p> 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。<br><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"></p><hr><h4 id="十四-表格"><a href="#十四-表格" class="headerlink" title="十四. 表格"></a>十四. 表格</h4><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div><p>|| <em>Year</em> || <em>Temperature (low)</em> || <em>Temperature (high)</em> ||<br>|| 1900 || -10 || 25 ||<br>|| 1910 || -15 || 30 ||<br>|| 1920 || -10 || 32 ||</p><hr><div class="table-container"><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table></div><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对齐方式</span><br><span class="line">我们可以设置表格的对齐方式：</span><br><span class="line">-: 设置内容和标题栏居右对齐。</span><br><span class="line">:- 设置内容和标题栏居左对齐。</span><br><span class="line">:-: 设置内容和标题栏居中对齐。</span><br></pre></td></tr></table></figure><h4 id="十五-高级功能"><a href="#十五-高级功能" class="headerlink" title="十五.高级功能"></a>十五.高级功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">支持的 HTML 元素</span><br><span class="line">不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</span><br><span class="line">目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如：</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><hr><h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><p><strong>文本加粗</strong><br>** 正常显示星号 **<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure></p><h5 id="十六-公式"><a href="#十六-公式" class="headerlink" title="十六.公式"></a>十六.公式</h5><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 十七. 其他</span><br><span class="line">More info: [Writing](https://hexo.io/docs/writing.html)</span><br><span class="line"></span><br><span class="line">### Run server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$ hexo server<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">More info: [Server](https://hexo.io/docs/server.html)</span><br><span class="line"></span><br><span class="line">### Generate static files</span><br><span class="line"></span><br><span class="line">``` python</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="MeiliDu"><a href="#MeiliDu" class="headerlink" title="MeiliDu"></a>MeiliDu</h1><p><a href="http://www.repostatus.org/#active"><img src="http://www.repostatus.org/badges/latest/active.svg" alt="Project Status: Active - The project has reached a stable, usable state and is being actively developed."></a></p><blockquote><p>a beautiful read</p></blockquote><p>A simple, text focused theme for Hexo. Bringing your readers attention to what is most import: your posts.<br>Check out the <a href="https://meilidu.github.io/">Demo</a></p><p><img src="gitHubAssets/showcase.png" alt="MeiliDu responsive showcase."></p><h1 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h1><p>:exclamation: Make sure your <strong>Node version is 6.x or above</strong> as the theme uses some ES6 syntax. :exclamation:</p><ol><li>Get the <a href="https://github.com/HoverBaum/meilidu-hexo/releases/latest">latest release</a>, simply download the file <strong>meilidu.zip</strong>. (see below for cloning)</li><li>Unpack it into your <strong>themes</strong> folder. (You should now have a folder in your themes folder named “meilidu” which should not contain a folder named “meilidu”)</li><li>Change your <strong>_config.yml</strong>: <code>theme: meilidu</code></li></ol><h3 id="Alternative-clone"><a href="#Alternative-clone" class="headerlink" title="Alternative: clone"></a>Alternative: clone</h3><p>You can also manage the theme as a subproject of your website. Simply run the following in the root directory of your project. After that change the theme property in your projects <code>_config.yml</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/HoverBaum/meilidu-hexo.git themes/meilidu</span><br></pre></td></tr></table></figure><h1 id="Get-help-and-involved"><a href="#Get-help-and-involved" class="headerlink" title="Get help and involved"></a>Get help and involved</h1><p>Below is a documentation of all features and how to use them as well as some <em>good to know</em> points. If you have any further questions or suggestions please open an issue.</p><p>The issues are open to anyone looking for help or wishing to make a suggestion to improve the theme.</p><h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><p>We have a few features you can configure and some that need to be enabled first. Check out the <a href="https://meilidu.github.io/">Demo</a> to see them all in action.</p><h3 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h3><p>Add an array of all widgets you want to display in the footer in MeiliDus <code>_config.yml</code>. These should be the names of files in the <code>layout/_widgets</code> folder. A widget should always be wrapped in an <em>footer__element</em>, like such:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer__element&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi there, <span class="tag">&lt;<span class="name">br</span> /&gt;</span>welcome to my Blog glad you found it. Have a look around, will you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Read-more"><a href="#Read-more" class="headerlink" title="Read more"></a>Read more</h3><p>You can change the text of “read more” links by setting the <code>readMore</code> option in MeiliDus <code>_config.yml</code>.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">readMore:</span> <span class="string">...read</span> <span class="string">more</span></span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>You can set the link to you RSS feed in MeiliDus <code>_config.yml</code>.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><p>You also need to install the <a href="https://github.com/hexojs/hexo-generator-feed">feed generator</a> for this to work.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>Make sure to use the <code>--save</code> option and run this in the root folder of your repository as it won’t work otherwise.</p><h3 id="Tags-page"><a href="#Tags-page" class="headerlink" title="Tags page"></a>Tags page</h3><p>To activate the tags page create a <code>source/tags/index.md</code> with the following content.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &quot;Tags&quot;</span><br><span class="line"><span class="section">layout: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="Categories-page"><a href="#Categories-page" class="headerlink" title="Categories page"></a>Categories page</h3><p>Activating the categories page is similar to tags, create a <code>source/categories/index.md</code> with the following content.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &quot;Categories&quot;</span><br><span class="line"><span class="section">layout: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="About-page"><a href="#About-page" class="headerlink" title="About page"></a>About page</h3><p>Like any other page create a folder with the name of the page and an <code>index.md</code> file in it to have an about page. The most basic about page in <code>source/about/index.md</code> might look like this.</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: About</span><br><span class="line"><span class="section">layout: page</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">This is a page about pages. It is the mother of all pages and pageception.</span><br></pre></td></tr></table></figure><h3 id="Archives"><a href="#Archives" class="headerlink" title="Archives"></a>Archives</h3><p>If you archive is only showing the current years posts try adding the following yml to your sites <code>_config.yml</code> (not the one in meilidus folder).</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>It can have any size really. It will always fill half of the screens height when the user first arrives on the page. Simply replace <code>meilidu/source/img/header.jpg</code> with your own file.</p><p>The default header is from <a href="https://unsplash.com/search/landscape%20mountain?photo=Ni4NgA64TFQ">unspalsh</a>, a picture by <a href="https://unsplash.com/@albertorestifo">Alberto Restifo</a>.</p><h3 id="Top-menu"><a href="#Top-menu" class="headerlink" title="Top menu"></a>Top menu</h3><p>To customize the menu at the top of the page simply change MeiliDus <code>_config.yml</code> and add your links to the <code>menu</code> object. Remove everything from it to hide the top menu.</p><h1 id="Good-to-know"><a href="#Good-to-know" class="headerlink" title="Good to know"></a>Good to know</h1><h4 id="Absolute-URLs"><a href="#Absolute-URLs" class="headerlink" title="Absolute URLs"></a>Absolute URLs</h4><p>Hexo itself and the MeiliDu theme use a lot of absolute URLs (those starting with <code>/something</code>). Due to this you can only run your blog on a domain or subdomain but not as something like <code>domain.com/blog/</code>. To run a blog on GitHub check out <a href="https://help.github.com/articles/user-organization-and-project-pages/">User pages</a> in the GitHub documentation.</p><h4 id="Using-GitHub-to-host"><a href="#Using-GitHub-to-host" class="headerlink" title="Using GitHub to host"></a>Using GitHub to host</h4><p>You can host websites for free on GitHub. The <a href="https://meilidu.github.io/">Demo for MeiliDu</a> is a great example of this. I use <a href="https://travis-ci.org/">Travis</a> to automate the generation of static files whenever we push to the master branch. Check out this <a href="https://gist.github.com/HoverBaum/d11361337d2c59f0de591c9c9390c1a9">travis config file</a>, it comes with explanation on how to use it. Personally I found it easiest to have a repo that contains the blog (this one) and one that is only there to get the page going. Travis then gets the current version, generates all files and pushes to the website repo.</p><h4 id="Why-an-Apple-showcase"><a href="#Why-an-Apple-showcase" class="headerlink" title="Why an Apple showcase???"></a>Why an Apple showcase???</h4><p>Because two minutes of googleing found this <a href="http://www.pixeden.com/psd-web-elements/modern-psd-responsive-showcase">PSD showcase</a> so that is what I went with.</p><h1 id="Blogs-using-MeiliDu"><a href="#Blogs-using-MeiliDu" class="headerlink" title="Blogs using MeiliDu"></a>Blogs using MeiliDu</h1><p>You are using MeiliDu for your blog? That is awesome! Let us know about it with a pull request and be featured here as an example for people to see how MeiliDu looks in the wild.</p><ul><li><a href="http://hoverbaum.gitlab.io/">HoverBaum</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Makedown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
